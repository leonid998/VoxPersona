"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é VoxPersona –±–æ—Ç–∞.

–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JSON –∏ Markdown –æ—Ç—á–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫ –∏–∑ coverage_verifier.
"""

import json
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Any
import structlog

logger = structlog.get_logger(__name__)


class ReportBuilder:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é.

    –°–æ–∑–¥–∞–µ—Ç JSON –∏ Markdown –æ—Ç—á–µ—Ç—ã —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∫—Ä—ã—Ç–∏–∏,
    –ø—Ä–æ–±–ª–µ–º–∞—Ö –∏ UX –º–µ—Ç—Ä–∏–∫–∞—Ö –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é.
    """

    def __init__(self, metrics: Dict[str, Any], session_info: Optional[Dict[str, Any]] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—è –æ—Ç—á–µ—Ç–æ–≤.

        Args:
            metrics: –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–∫—Ä—ã—Ç–∏—è –æ—Ç coverage_verifier.verify()
            session_info: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                {
                    "session_id": "20251022_153000",
                    "user_id": 155894817,
                    "start_time": "2025-10-22T15:30:00",
                    "end_time": "2025-10-22T15:35:00"
                }
        """
        self.metrics = metrics
        self.session_info = session_info or {}
        self.timestamp = datetime.now().isoformat()

        logger.info(
            "report_building_started",
            session_id=self.session_info.get("session_id"),
            coverage_percent=metrics.get("coverage_percent", 0)
        )

    def build_json(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON –æ—Ç—á–µ—Ç–∞.

        Returns:
            str: JSON —Å—Ç—Ä–æ–∫–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º
        """
        issues = self._prioritize_issues()

        report = {
            "timestamp": self.timestamp,
            "session_id": self.session_info.get("session_id", "unknown"),
            "status": self.metrics.get("status", "UNKNOWN"),
            "coverage": {
                "total_expected": self.metrics.get("total_expected", 0),
                "total_visited": self.metrics.get("total_visited", 0),
                "coverage_percent": self.metrics.get("coverage_percent", 0.0)
            },
            "issues": issues,
            "ux_metrics": {
                "max_depth": self.metrics.get("max_depth", 0),
                "deep_nodes_count": len(self.metrics.get("deep_nodes", [])),
                "nodes_without_back_count": len(self.metrics.get("nodes_without_back_button", []))
            }
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.session_info:
            report["session_info"] = {
                "user_id": self.session_info.get("user_id"),
                "start_time": self.session_info.get("start_time"),
                "end_time": self.session_info.get("end_time")
            }

        json_str = json.dumps(report, indent=2, ensure_ascii=False)

        logger.info(
            "report_json_built",
            issues_critical=len(issues["critical"]),
            issues_warnings=len(issues["warnings"]),
            issues_info=len(issues["info"])
        )

        return json_str

    def save_json(self, filepath: Path) -> Path:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª.

        Args:
            filepath: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        Returns:
            Path: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        filepath = Path(filepath)
        filepath.parent.mkdir(parents=True, exist_ok=True)

        json_content = self.build_json()
        filepath.write_text(json_content, encoding="utf-8")

        logger.info("report_saved_json", filepath=str(filepath), size_bytes=len(json_content))

        return filepath

    def build_markdown(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Markdown –æ—Ç—á–µ—Ç–∞.

        Returns:
            str: Markdown —Å—Ç—Ä–æ–∫–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º
        """
        issues = self._prioritize_issues()
        status_emoji = self._format_status_emoji(self.metrics.get("status", "UNKNOWN"))
        formatted_time = self._format_timestamp(self.timestamp)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        md = ["# üìä Menu Crawler Report\n"]
        md.append(f"**–î–∞—Ç–∞:** {formatted_time}  ")
        md.append(f"**–°—Ç–∞—Ç—É—Å:** {status_emoji}  ")
        md.append(f"**Session ID:** {self.session_info.get('session_id', 'unknown')}\n")
        md.append("---\n")

        # –ü–æ–∫—Ä—ã—Ç–∏–µ
        md.append("## üìà –ü–æ–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é\n")
        md.append("| –ú–µ—Ç—Ä–∏–∫–∞ | –ó–Ω–∞—á–µ–Ω–∏–µ |")
        md.append("|---------|----------|")
        md.append(f"| –í—Å–µ–≥–æ —É–∑–ª–æ–≤ (–æ–∂–∏–¥–∞–µ—Ç—Å—è) | {self.metrics.get('total_expected', 0)} |")
        md.append(f"| –ü–æ—Å–µ—â–µ–Ω–æ —É–∑–ª–æ–≤ | {self.metrics.get('total_visited', 0)} |")

        coverage = self.metrics.get("coverage_percent", 0.0)
        coverage_status = "‚úÖ" if coverage == 100 else "‚ö†Ô∏è" if coverage >= 90 else "‚ùå"
        md.append(f"| **Coverage** | **{coverage:.1f}%** {coverage_status} |\n")
        md.append("---\n")

        # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        critical = issues["critical"]
        md.append(f"## üî¥ –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã ({len(critical)})\n")

        if not critical:
            md.append("*–ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ*\n")
        else:
            for issue in critical:
                md.append(f"- `{issue['node']}` - {issue['type']}")

        md.append("---\n")

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        warnings = issues["warnings"]
        md.append(f"## üü° –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({len(warnings)})\n")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–æ–∑–∂–µ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö)
        undocumented = [w for w in warnings if w["type"] == "undocumented_node"]
        deep = [w for w in warnings if w["type"] == "deep_node"]
        no_back = [w for w in warnings if w["type"] == "no_back_button"]

        if not warnings:
            md.append("*–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ*\n")
        else:
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º —É–∂–µ —Å–¥–µ–ª–∞–Ω–∞ –≤—ã—à–µ

            if undocumented:
                md.append(f"### –ù–µ–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–∑–ª—ã ({len(undocumented)})")
                for issue in undocumented:
                    md.append(f"- `{issue['node']}` - —É–∑–µ–ª –Ω–∞–π–¥–µ–Ω –≤ –±–æ—Ç–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ menu_graph.json\n")

            if deep:
                md.append(f"### –ì–ª—É–±–æ–∫–∏–µ —É–∑–ª—ã (>4 –∫–ª–∏–∫–æ–≤) ({len(deep)})")
                for issue in deep:
                    md.append(f"- `{issue['node']}` - –≥–ª—É–±–∏–Ω–∞ {issue.get('depth', '?')} –∫–ª–∏–∫–æ–≤\n")

            if no_back:
                md.append(f"### –£–∑–ª—ã –±–µ–∑ –∫–Ω–æ–ø–∫–∏ \"–ù–∞–∑–∞–¥\" ({len(no_back)})")
                for issue in no_back:
                    md.append(f"- `{issue['node']}` - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥\n")

        md.append("---\n")

        # UX –ú–µ—Ç—Ä–∏–∫–∏
        md.append("## üìê UX –ú–µ—Ç—Ä–∏–∫–∏\n")
        md.append("| –ú–µ—Ç—Ä–∏–∫–∞ | –ó–Ω–∞—á–µ–Ω–∏–µ |")
        md.append("|---------|----------|")
        md.append(f"| –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ | {self.metrics.get('max_depth', 0)} –∫–ª–∏–∫–æ–≤ |")
        md.append(f"| –£–∑–ª–æ–≤ –≥–ª—É–±–∂–µ 4 —É—Ä–æ–≤–Ω—è | {len(self.metrics.get('deep_nodes', []))} |")
        md.append(f"| –£–∑–ª–æ–≤ –±–µ–∑ –∫–Ω–æ–ø–∫–∏ \"–ù–∞–∑–∞–¥\" | {len(self.metrics.get('nodes_without_back_button', []))} |\n")
        md.append("---\n")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        md.append("## ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n")

        if coverage == 100:
            md.append("- ‚úÖ –ü–æ–∫—Ä—ã—Ç–∏–µ 100% - –≤—Å–µ –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω—ã")
        elif coverage >= 90:
            md.append(f"- ‚ö†Ô∏è –ü–æ–∫—Ä—ã—Ç–∏–µ {coverage:.1f}% - –ø–æ—á—Ç–∏ –ø–æ–ª–Ω–æ–µ, –Ω–æ –µ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —É–∑–ª—ã")
        else:
            md.append(f"- ‚ùå –ü–æ–∫—Ä—ã—Ç–∏–µ {coverage:.1f}% - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–∑–ª–æ–≤")

        if undocumented:
            md.append("- ‚ö†Ô∏è –û–±–Ω–æ–≤–∏—Ç—å menu_graph.json - –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–∑–ª—ã")

        if deep:
            md.append("- ‚ö†Ô∏è –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —É–ø—Ä–æ—â–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –≥–ª—É–±–æ–∫–∏—Ö —É–∑–ª–æ–≤")

        if no_back:
            md.append("- ‚ö†Ô∏è –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ \"–ù–∞–∑–∞–¥\" –≤ –º–µ–Ω—é –±–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")

        if not critical and not warnings:
            md.append("- üéâ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n")

        md.append("\n---\n")
        md.append("*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω Menu Crawler v1.0*")

        markdown_content = "\n".join(md)

        logger.info("report_markdown_built", length=len(markdown_content))

        return markdown_content

    def save_markdown(self, filepath: Path) -> Path:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Markdown –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª.

        Args:
            filepath: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        Returns:
            Path: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        filepath = Path(filepath)
        filepath.parent.mkdir(parents=True, exist_ok=True)

        markdown_content = self.build_markdown()
        filepath.write_text(markdown_content, encoding="utf-8")

        logger.info("report_saved_markdown", filepath=str(filepath), size_bytes=len(markdown_content))

        return filepath

    def _prioritize_issues(self) -> Dict[str, List[Dict[str, Any]]]:
        """
        –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏.

        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:
                {
                    "critical": [...],
                    "warnings": [...],
                    "info": [...]
                }
        """
        issues = {
            "critical": [],
            "warnings": [],
            "info": []
        }

        # CRITICAL: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —É–∑–ª—ã (–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –Ω–æ –Ω–µ—Ç –≤ –±–æ—Ç–µ)
        for node in self.metrics.get("unreachable_nodes", []):
            issues["critical"].append({
                "type": "unreachable_node",
                "node": node,
                "severity": "CRITICAL"
            })

        # WARNING: –Ω–µ–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–∑–ª—ã (–≤ –±–æ—Ç–µ, –Ω–æ –Ω–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
        for node in self.metrics.get("undocumented_nodes", []):
            issues["warnings"].append({
                "type": "undocumented_node",
                "node": node,
                "severity": "WARNING"
            })

        # WARNING: –≥–ª—É–±–æ–∫–∏–µ —É–∑–ª—ã (>4 –∫–ª–∏–∫–æ–≤)
        for node, depth in self.metrics.get("deep_nodes", []):
            issues["warnings"].append({
                "type": "deep_node",
                "node": node,
                "depth": depth,
                "severity": "WARNING"
            })

        # WARNING: —É–∑–ª—ã –±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        for node in self.metrics.get("nodes_without_back_button", []):
            issues["warnings"].append({
                "type": "no_back_button",
                "node": node,
                "severity": "WARNING"
            })

        # INFO: –Ω–µ–ø–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ (90-99%)
        coverage = self.metrics.get("coverage_percent", 0)
        if 90 <= coverage < 100:
            issues["info"].append({
                "type": "incomplete_coverage",
                "coverage": coverage,
                "severity": "INFO"
            })

        return issues

    def _format_status_emoji(self, status: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å emoji –¥–ª—è Markdown.

        Args:
            status: –°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞ (PASS/PARTIAL/FAIL)

        Returns:
            str: –°—Ç–∞—Ç—É—Å —Å emoji
        """
        emoji_map = {
            "PASS": "‚úÖ PASS",
            "PARTIAL": "‚ö†Ô∏è PARTIAL",
            "FAIL": "‚ùå FAIL",
            "UNKNOWN": "‚ùì UNKNOWN"
        }
        return emoji_map.get(status.upper(), f"‚ùì {status}")

    def _format_timestamp(self, ts: Optional[str] = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏.

        Args:
            ts: ISO —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ None –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ "22 –æ–∫—Ç—è–±—Ä—è 2025, 15:35:00"
        """
        if ts:
            dt = datetime.fromisoformat(ts)
        else:
            dt = datetime.now()

        # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
        months_ru = [
            "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
            "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
        ]

        return f"{dt.day} {months_ru[dt.month - 1]} {dt.year}, {dt.strftime('%H:%M:%S')}"


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    import structlog

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    structlog.configure(
        processors=[
            structlog.processors.TimeStamper(fmt="iso"),
            structlog.processors.JSONRenderer()
        ]
    )

    # –ü—Ä–∏–º–µ—Ä –º–µ—Ç—Ä–∏–∫
    example_metrics = {
        "total_expected": 104,
        "total_visited": 104,
        "coverage_percent": 100.0,
        "unreachable_nodes": [],
        "undocumented_nodes": ["menu_new_feature"],
        "max_depth": 5,
        "deep_nodes": [["admin_settings_advanced", 5]],
        "nodes_without_back_button": [],
        "status": "PASS"
    }

    # –ü—Ä–∏–º–µ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏
    example_session = {
        "session_id": "20251022_153000",
        "user_id": 155894817,
        "start_time": "2025-10-22T15:30:00",
        "end_time": "2025-10-22T15:35:00"
    }

    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
    builder = ReportBuilder(example_metrics, example_session)

    # JSON –æ—Ç—á–µ—Ç
    json_report = builder.build_json()
    print("=== JSON Report ===")
    print(json_report)
    print()

    # Markdown –æ—Ç—á–µ—Ç
    md_report = builder.build_markdown()
    print("=== Markdown Report ===")
    print(md_report)
    print()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
    output_dir = Path("C:/Users/l0934/Projects/VoxPersona/menu_crawler/reports")

    json_path = builder.save_json(output_dir / "coverage_report.json")
    print(f"‚úÖ JSON –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {json_path}")

    md_path = builder.save_markdown(output_dir / "coverage_report.md")
    print(f"‚úÖ Markdown –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {md_path}")
