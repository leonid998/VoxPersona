#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–µ—Ä COMPLETE_MENU_TREE.md ‚Üí menu_graph.json
–ò–∑–≤–ª–µ–∫–∞–µ—Ç —É–∑–ª—ã –∏ —Å–≤—è–∑–∏ –¥–ª—è menu_crawler
"""

import json
import re
from pathlib import Path
from typing import Dict, List, Set, Tuple


class MenuTreeParser:
    """–ü–∞—Ä—Å–µ—Ä –¥–µ—Ä–µ–≤–∞ –º–µ–Ω—é –∏–∑ Markdown –≤ JSON –≥—Ä–∞—Ñ"""

    def __init__(self):
        self.nodes: Dict[str, dict] = {}
        self.edges: List[dict] = []
        self.callback_patterns: Set[str] = set()

    def parse_markdown(self, md_content: str) -> Tuple[Dict, List]:
        """–ü–∞—Ä—Å–∏–Ω–≥ Markdown –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""

        # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        callback_pattern = r'‚ñ∫\s*([a-z_]+(?:\|\|[a-z_{}]+)?)'
        menu_section_pattern = r'^##\s+(.+)$'
        button_pattern = r'([üì±‚öôÔ∏è‚ùìüìÅüîêüë•üé´‚öôÔ∏èüÜïüìäüìÑ‚úèÔ∏èüö´üóëÔ∏è‚ûïüìúüïíüí°üõ†Ô∏èüìùüîôüè†üè®üçΩÔ∏èüè¢‚ö°üî¨‚úÖ‚ùå‚ÑπÔ∏èüìÅüéµüëÅÔ∏è]+)\s+(.+?)\s+[‚îÄ‚ñ∫]+\s*([a-z_]+(?:\|\|[^‚îÇ\n\s]+)?)'

        lines = md_content.split('\n')
        current_section = None
        current_parent = None
        depth_stack = []  # –°—Ç–µ–∫ –≥–ª—É–±–∏–Ω—ã –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏

        # –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —É–∑–ª—ã
        self._add_node("menu_main", "menu", 0, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        for i, line in enumerate(lines):
            line = line.strip()

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏
            section_match = re.match(menu_section_pattern, line)
            if section_match:
                current_section = section_match.group(1)
                continue

            # –ü–æ–∏—Å–∫ callback_data –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            callback_matches = re.findall(callback_pattern, line)
            for callback in callback_matches:
                # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                clean_callback = self._clean_callback(callback)
                self.callback_patterns.add(clean_callback)

                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É–∑–ª–∞
                node_type = self._determine_node_type(clean_callback)
                depth = self._calculate_depth(line)
                description = self._extract_description(line, callback)

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–∑–ª–∞
                self._add_node(clean_callback, node_type, depth, description)

            # –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–æ–∫ —Å –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏
            button_matches = re.findall(button_pattern, line)
            for emoji, button_text, callback_data in button_matches:
                clean_callback = self._clean_callback(callback_data)
                full_button_text = f"{emoji} {button_text}".strip()

                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–∑–ª–∞
                parent_node = self._determine_parent(line, current_section, depth_stack)

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏
                if parent_node:
                    condition = self._check_condition(current_section, clean_callback)
                    self._add_edge(parent_node, clean_callback, callback_data, full_button_text, condition)

        return self.nodes, self.edges

    def _add_node(self, node_id: str, node_type: str, depth: int, description: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–∑–ª–∞ –≤ –≥—Ä–∞—Ñ"""
        if node_id not in self.nodes:
            node = {
                "type": node_type,
                "depth": depth,
                "description": description
            }

            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —É–∑–ª—ã
            if "||" in node_id and "{" not in node_id:
                node["dynamic"] = True

            # FSM —É–∑–ª—ã
            if node_id in ["new_chat", "rename_chat", "report_rename", "edit_audio_number",
                          "edit_date", "edit_employee", "edit_place_name", "edit_city",
                          "edit_zone_name", "edit_client", "access_search_user",
                          "invite_password_input", "change_password_current"]:
                node["fsm"] = True

            self.nodes[node_id] = node

    def _add_edge(self, from_node: str, to_node: str, callback_data: str, button_text: str, condition: str = None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏"""
        edge = {
            "from": from_node,
            "to": to_node,
            "callback_data": callback_data,
            "button_text": button_text
        }

        if condition:
            edge["condition"] = condition

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        if not any(e["from"] == from_node and e["to"] == to_node and e["callback_data"] == callback_data
                  for e in self.edges):
            self.edges.append(edge)

    def _clean_callback(self, callback: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ callback_data –æ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        # –£–¥–∞–ª–µ–Ω–∏–µ {id}, {user_id}, {conversation_id} –∏ —Ç.–¥.
        callback = re.sub(r'\{[^}]+\}', '', callback)
        # –£–¥–∞–ª–µ–Ω–∏–µ ||page||{n}
        callback = re.sub(r'\|\|page\|\|\d+', '', callback)
        # –£–¥–∞–ª–µ–Ω–∏–µ trailing ||
        callback = callback.rstrip('|')
        return callback

    def _determine_node_type(self, callback: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É–∑–ª–∞ –ø–æ callback_data"""
        if callback.startswith("menu_"):
            return "menu"
        elif callback.startswith("view") or callback.startswith("show"):
            return "view"
        elif callback.startswith("access_user_details") or callback.startswith("access_invite_details"):
            return "view"
        elif "actions" in callback or "confirm" in callback or "delete" in callback:
            return "action"
        elif callback.startswith("edit_") or callback.startswith("rename_"):
            return "action"
        elif callback.startswith("help_"):
            return "view"
        else:
            return "action"

    def _calculate_depth(self, line: str) -> int:
        """–†–∞—Å—á–µ—Ç –≥–ª—É–±–∏–Ω—ã –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –æ—Ç—Å—Ç—É–ø–∞–º"""
        indent = len(line) - len(line.lstrip('‚îÇ‚îú‚îî‚îÄ '))
        return min(indent // 4, 6)  # –ú–∞–∫—Å–∏–º—É–º 6 —É—Ä–æ–≤–Ω–µ–π

    def _extract_description(self, line: str, callback: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —É–∑–ª–∞"""
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –¥–µ—Ä–µ–≤–∞ –∏ callback
        clean_line = re.sub(r'[‚îÇ‚îú‚îî‚îÄ‚ñ∫\s]+', ' ', line)
        clean_line = clean_line.replace(callback, '').strip()

        # –£–¥–∞–ª–µ–Ω–∏–µ emoji
        clean_line = re.sub(r'[\U0001F300-\U0001F9FF]+', '', clean_line).strip()

        return clean_line or callback.replace('_', ' ').title()

    def _determine_parent(self, line: str, section: str, depth_stack: List) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–∑–ª–∞"""
        # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–∫—Ü–∏–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in section or not section:
            return "menu_main"
        elif "–ß–ê–¢–´" in section.upper():
            return "menu_chats"
        elif "–°–ò–°–¢–ï–ú–ù–ê–Ø" in section.upper():
            return "menu_system"
        elif "–ù–ê–°–¢–†–û–ô–ö–ò –î–û–°–¢–£–ü–ê" in section.upper():
            return "menu_access"
        elif "–ü–û–ú–û–©–¨" in section.upper():
            return "menu_help"
        else:
            return "menu_main"

    def _check_condition(self, section: str, callback: str) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–Ω–æ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ (super_admin)"""
        if "–î–û–°–¢–£–ü–ê" in section.upper() or callback.startswith("access_"):
            return "user_role == super_admin"
        return None

    def build_graph_structure(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥—Ä–∞—Ñ–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏"""

        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ–Ω—é –æ—Ç menu_main
        main_children = {
            "menu_chats": "üì± –ß–∞—Ç—ã/–î–∏–∞–ª–æ–≥–∏",
            "menu_system": "‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω–∞—è",
            "menu_help": "‚ùì –ü–æ–º–æ—â—å"
        }

        for child, button_text in main_children.items():
            self._add_node(child, "menu", 1, button_text.split()[-1])
            self._add_edge("menu_main", child, child, button_text)

        # –ú–µ–Ω—é —á–∞—Ç–æ–≤
        chats_children = {
            "new_chat": "üÜï –ù–æ–≤—ã–π —á–∞—Ç",
            "show_stats": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            "show_my_reports": "üìÑ –ú–æ–∏ –æ—Ç—á–µ—Ç—ã"
        }

        for child, button_text in chats_children.items():
            node_type = "action" if child == "new_chat" else "view"
            self._add_node(child, node_type, 2, button_text.split(maxsplit=1)[-1])
            self._add_edge("menu_chats", child, child, button_text)

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —á–∞—Ç—ã
        self._add_node("chat_actions", "action", 2, "–î–µ–π—Å—Ç–≤–∏—è —Å —á–∞—Ç–æ–º", )
        self.nodes["chat_actions"]["dynamic"] = True
        self._add_edge("menu_chats", "chat_actions", "chat_actions||{conversation_id}", "üìù [–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞]")

        # –î–µ–π—Å—Ç–≤–∏—è —Å —á–∞—Ç–æ–º
        chat_actions_children = {
            "confirm_switch": "–í –ß–∞—Ç",
            "rename_chat": "‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å",
            "delete_chat": "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"
        }

        for child, button_text in chat_actions_children.items():
            self._add_node(child, "action", 3, button_text)
            if "||" in child:
                callback = f"{child}||{{id}}"
            else:
                callback = child
            self._add_edge("chat_actions", child, callback, button_text)

        # –û—Ç—á–µ—Ç—ã
        self._add_node("send_report", "action", 3, "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç")
        self.nodes["send_report"]["dynamic"] = True
        self._add_edge("show_my_reports", "send_report", "send_report||{report_id}", "üìÑ [–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞]")

        # –î–µ–π—Å—Ç–≤–∏—è —Å –æ—Ç—á–µ—Ç–æ–º
        report_actions = {
            "report_view": "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä",
            "report_rename": "‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å",
            "report_delete": "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"
        }

        for child, button_text in report_actions.items():
            self._add_node(child, "action", 4, button_text)
            self._add_edge("send_report", child, child, button_text)

        # –°–∏—Å—Ç–µ–º–Ω–∞—è
        system_children = {
            "menu_storage": "üìÅ –•—Ä–∞–Ω–∏–ª–∏—â–µ",
            "menu_access": "üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞"
        }

        for child, button_text in system_children.items():
            self._add_node(child, "menu", 2, button_text.split()[-1])
            condition = "user_role == super_admin" if child == "menu_access" else None
            self._add_edge("menu_system", child, child, button_text, condition)

        # –•—Ä–∞–Ω–∏–ª–∏—â–µ
        self._add_node("view||audio", "view", 3, "–ê—É–¥–∏–æ —Ñ–∞–π–ª—ã")
        self._add_edge("menu_storage", "view||audio", "view||audio", "üìÅ –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ (super_admin only)
        access_children = {
            "access_users_menu": "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
            "access_invitations_menu": "üé´ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è",
            "access_security_menu": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
        }

        for child, button_text in access_children.items():
            self._add_node(child, "menu", 3, button_text.split(maxsplit=1)[-1])
            self._add_edge("menu_access", child, child, button_text, "user_role == super_admin")

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        users_children = {
            "access_list_users": "üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "access_edit_user_select": "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "access_block_user_select": "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
            "access_delete_user_select": "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        }

        for child, button_text in users_children.items():
            self._add_node(child, "view" if "list" in child else "action", 4, button_text.split(maxsplit=1)[-1])
            self._add_edge("access_users_menu", child, child, button_text, "user_role == super_admin")

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        self._add_node("access_user_details", "view", 5, "–î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        self.nodes["access_user_details"]["dynamic"] = True
        self._add_edge("access_list_users", "access_user_details", "access_user_details||{user_id}",
                      "‚úÖ [Username]", "user_role == super_admin")

        # –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        invitations_children = {
            "access_create_invite_admin": "‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            "access_create_invite_user": "‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "access_list_invites": "üìú –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"
        }

        for child, button_text in invitations_children.items():
            self._add_node(child, "action" if "create" in child else "view", 4, button_text.split(maxsplit=1)[-1])
            self._add_edge("access_invitations_menu", child, child, button_text, "user_role == super_admin")

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        self._add_node("access_invite_details", "view", 5, "–î–µ—Ç–∞–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")
        self.nodes["access_invite_details"]["dynamic"] = True
        self._add_edge("access_list_invites", "access_invite_details", "access_invite_details||{invite_code}",
                      "üé´ [CODE]", "user_role == super_admin")

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        security_children = {
            "access_cleanup_settings": "üïí –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π",
            "access_password_policy": "üîê –ü–æ–ª–∏—Ç–∏–∫–∞ –ø–∞—Ä–æ–ª–µ–π",
            "access_audit_log": "üìù –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π"
        }

        for child, button_text in security_children.items():
            self._add_node(child, "menu", 4, button_text.split(maxsplit=1)[-1])
            self._add_edge("access_security_menu", child, child, button_text, "user_role == super_admin")

        # –ü–æ–º–æ—â—å
        help_children = {
            "help_about": "üì± –û –±–æ—Ç–µ",
            "help_functions": "üõ†Ô∏è –§—É–Ω–∫—Ü–∏–∏",
            "help_stats": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            "help_tips": "üí° –°–æ–≤–µ—Ç—ã"
        }

        for child, button_text in help_children.items():
            self._add_node(child, "view", 2, button_text.split(maxsplit=1)[-1])
            self._add_edge("menu_help", child, child, button_text)

        # –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        back_buttons = [
            ("menu_chats", "menu_main", "üîô –ù–∞–∑–∞–¥"),
            ("menu_system", "menu_main", "üîô –ù–∞–∑–∞–¥"),
            ("menu_help", "menu_main", "üîô –ù–∞–∑–∞–¥"),
            ("menu_storage", "menu_system", "üîô –ù–∞–∑–∞–¥"),
            ("menu_access", "menu_system", "üîô –ù–∞–∑–∞–¥"),
            ("chat_actions", "menu_chats", "üîô –ù–∞–∑–∞–¥"),
            ("show_my_reports", "menu_chats", "üîô –ù–∞–∑–∞–¥"),
            ("access_users_menu", "menu_access", "üîô –ù–∞–∑–∞–¥"),
            ("access_invitations_menu", "menu_access", "üîô –ù–∞–∑–∞–¥"),
            ("access_security_menu", "menu_access", "üîô –ù–∞–∑–∞–¥"),
        ]

        for from_node, to_node, button_text in back_buttons:
            condition = "user_role == super_admin" if from_node.startswith("access_") else None
            self._add_edge(from_node, to_node, to_node, button_text, condition)

    def generate_json(self) -> dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ JSON"""
        return {
            "nodes": self.nodes,
            "edges": self.edges
        }

    def validate_graph(self) -> Tuple[bool, List[str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞"""
        errors = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–Ω–æ—Å—Ç–∏
        reachable = set()
        stack = ["menu_main"]

        while stack:
            node = stack.pop()
            if node in reachable:
                continue
            reachable.add(node)

            # –ù–∞–π—Ç–∏ –≤—Å–µ—Ö –¥–µ—Ç–µ–π
            for edge in self.edges:
                if edge["from"] == node and edge["to"] not in reachable:
                    stack.append(edge["to"])

        # –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–∑–ª—ã
        all_nodes = set(self.nodes.keys())
        isolated = all_nodes - reachable

        if isolated:
            errors.append(f"–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–∑–ª—ã (–Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º—ã –æ—Ç menu_main): {isolated}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —É–∑–ª–æ–≤ –≤ edges
        for edge in self.edges:
            if edge["from"] not in self.nodes:
                errors.append(f"–£–∑–µ–ª '{edge['from']}' –≤ edge –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ nodes")
            if edge["to"] not in self.nodes:
                errors.append(f"–£–∑–µ–ª '{edge['to']}' –≤ edge –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ nodes")

        return len(errors) == 0, errors


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    script_dir = Path(__file__).parent
    project_root = script_dir.parent.parent
    md_file = project_root / "TASKS" / "00005_20251014_HRYHG" / "Implemt" / "menu_crawler" / "COMPLETE_MENU_TREE.md"
    output_file = project_root / "menu_crawler" / "config" / "menu_graph.json"

    print("üå≥ –ü–ê–†–°–ï–† –î–ï–†–ï–í–ê –ú–ï–ù–Æ VOXPERSONA")
    print("=" * 60)

    # –ß—Ç–µ–Ω–∏–µ Markdown —Ñ–∞–π–ª–∞
    print(f"\nüìñ –ß—Ç–µ–Ω–∏–µ: {md_file}")
    if not md_file.exists():
        print(f"‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {md_file}")
        return

    md_content = md_file.read_text(encoding='utf-8')
    print(f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(md_content)} —Å–∏–º–≤–æ–ª–æ–≤, {len(md_content.splitlines())} —Å—Ç—Ä–æ–∫")

    # –ü–∞—Ä—Å–∏–Ω–≥
    print("\nüîç –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ–Ω—é...")
    parser = MenuTreeParser()
    parser.parse_markdown(md_content)
    parser.build_graph_structure()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –£–∑–ª–æ–≤ (nodes): {len(parser.nodes)}")
    print(f"   –°–≤—è–∑–µ–π (edges): {len(parser.edges)}")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö callback_data: {len(parser.callback_patterns)}")

    # –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º —É–∑–ª–æ–≤
    node_types = {}
    for node in parser.nodes.values():
        node_type = node["type"]
        node_types[node_type] = node_types.get(node_type, 0) + 1

    print(f"\n   –ü–æ —Ç–∏–ø–∞–º —É–∑–ª–æ–≤:")
    for node_type, count in sorted(node_types.items()):
        print(f"      {node_type}: {count}")

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —É–∑–ª—ã
    dynamic_count = sum(1 for node in parser.nodes.values() if node.get("dynamic"))
    fsm_count = sum(1 for node in parser.nodes.values() if node.get("fsm"))
    print(f"\n   –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —É–∑–ª—ã: {dynamic_count}")
    print(f"   FSM —É–∑–ª—ã: {fsm_count}")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    print("\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞...")
    is_valid, errors = parser.validate_graph()

    if is_valid:
        print("‚úÖ –ì—Ä–∞—Ñ –≤–∞–ª–∏–¥–µ–Ω!")
    else:
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
        for error in errors:
            print(f"   - {error}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON
    print(f"\nüíæ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON...")
    graph_data = parser.generate_json()

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    output_file.parent.mkdir(parents=True, exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(graph_data, f, ensure_ascii=False, indent=2)

    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_file}")
    print(f"   –†–∞–∑–º–µ—Ä: {output_file.stat().st_size / 1024:.2f} KB")

    # –ü—Ä–∏–º–µ—Ä—ã —É–∑–ª–æ–≤
    print(f"\nüìã –ü–†–ò–ú–ï–†–´ –£–ó–õ–û–í:")
    example_nodes = ["menu_main", "menu_chats", "chat_actions", "access_user_details", "send_report"]
    for node_id in example_nodes:
        if node_id in parser.nodes:
            node = parser.nodes[node_id]
            print(f"\n   {node_id}:")
            print(f"      type: {node['type']}")
            print(f"      depth: {node['depth']}")
            print(f"      description: {node['description']}")
            if node.get("dynamic"):
                print(f"      dynamic: True")
            if node.get("fsm"):
                print(f"      fsm: True")

    # –ü—Ä–∏–º–µ—Ä—ã —Å–≤—è–∑–µ–π
    print(f"\nüîó –ü–†–ò–ú–ï–†–´ –°–í–Ø–ó–ï–ô:")
    for i, edge in enumerate(parser.edges[:10]):
        condition_str = f" [CONDITION: {edge['condition']}]" if edge.get("condition") else ""
        print(f"   {edge['from']} ‚Üí {edge['to']}{condition_str}")
        print(f"      callback: {edge['callback_data']}")
        print(f"      button: {edge['button_text']}")

    print("\n" + "=" * 60)
    print("‚úÖ –ì–û–¢–û–í–û! menu_graph.json —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ.")
    print("\nüìå –ò–¢–û–ì–û–í–´–ï –ú–ï–¢–†–ò–ö–ò:")
    print(f"   ‚úÖ –£–∑–ª–æ–≤: {len(parser.nodes)}")
    print(f"   ‚úÖ –°–≤—è–∑–µ–π: {len(parser.edges)}")
    print(f"   ‚úÖ Callback –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(parser.callback_patterns)}")
    print(f"   ‚úÖ –ì—Ä–∞—Ñ —Å–≤—è–∑–µ–Ω: {is_valid}")


if __name__ == "__main__":
    main()
