#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Pyrogram User Session (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–¥ —á–µ—Ä–µ–∑ stdin).

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    echo "62874" | python menu_crawler/scripts/create_session_stdin.py
"""

import asyncio
import os
import sys
from pathlib import Path
from dotenv import load_dotenv
from pyrogram import Client


# Monkey patch –¥–ª—è input() - —á–∏—Ç–∞—Ç—å –∏–∑ stdin –≤–º–µ—Å—Ç–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
original_input = input

def mock_input(prompt=""):
    print(prompt, end='', flush=True)
    line = sys.stdin.readline().strip()
    print(line)  # Echo –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
    return line

# –ó–∞–º–µ–Ω–∏—Ç—å input –Ω–∞ mock_input
__builtins__.input = mock_input


async def create_session():
    """–°–æ–∑–¥–∞—Ç—å Pyrogram User Session."""
    # –ó–∞–≥—Ä—É–∑–∏—Ç—å .env
    project_root = Path(__file__).parent.parent.parent
    env_path = project_root / ".env"

    if not env_path.exists():
        print(f"‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_path}")
        return False

    load_dotenv(env_path)

    api_id = os.getenv("API_ID")
    api_hash = os.getenv("API_HASH")

    if not api_id or not api_hash:
        print("‚ùå API_ID –∏–ª–∏ API_HASH –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env")
        return False

    print("‚úÖ API_ID –∏ API_HASH –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env")
    print(f"üìÅ –ü—Ä–æ–µ–∫—Ç: {project_root}")
    print(f"üìÇ –°–µ—Å—Å–∏—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –≤: {project_root / 'menu_crawler'}")
    print()

    # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone = "+79272491236"  # TEST_USER_ID: 155894817 (@AsgoldPrime)

    print(f"üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ stdin...")
    print()

    # –°–æ–∑–¥–∞—Ç—å Pyrogram Client
    session_dir = project_root / "menu_crawler"

    client = Client(
        name="menu_crawler_session",
        api_id=int(api_id),
        api_hash=api_hash,
        workdir=str(session_dir),
        phone_number=phone
    )

    try:
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç (–∫–æ–¥ –±—É–¥–µ—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω –∏–∑ stdin —á–µ—Ä–µ–∑ monkey-patched input)
        await client.start()

        # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        me = await client.get_me()

        print()
        print("=" * 60)
        print("‚úÖ –°–ï–°–°–ò–Ø –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–ê!")
        print("=" * 60)
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name} {me.last_name or ''}")
        print(f"üÜî Username: @{me.username}")
        print(f"üî¢ Telegram ID: {me.id}")
        print(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {me.phone_number}")
        print()
        print(f"üìÅ –§–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_dir / 'menu_crawler_session.session'}")
        print()

        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç
        await client.stop()

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    print("=" * 60)
    print("üîê –°–û–ó–î–ê–ù–ò–ï PYROGRAM USER SESSION")
    print("=" * 60)
    print()

    success = asyncio.run(create_session())

    sys.exit(0 if success else 1)
