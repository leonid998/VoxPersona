"""
–°–∫—Ä–∏–ø—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ Telegram.

–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
–Ω–∞ –æ—Å–Ω–æ–≤–µ migration_report.json, —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–æ–º migrate_users.py.

–õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:
1. –ß—Ç–µ–Ω–∏–µ migration_report.json —Å telegram_id –∏ temp_password
2. –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram Bot
3. Rate limiting: 1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
4. Error handling: UserIsBlocked, PeerIdInvalid, FloodWait
5. Retry: –¥–æ 3 —Ä–∞–∑ —Å exponential backoff (1s ‚Üí 2s ‚Üí 4s)
6. –°–æ–∑–¥–∞–Ω–∏–µ password_delivery_report.json —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏

–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
- –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –≤ –õ–ò–ß–ù–´–ï —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –≤ –≥—Ä—É–ø–ø—ã)
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –ø–∞—Ä–æ–ª–µ–π (—Ç–æ–ª—å–∫–æ —É—Å–ø–µ—Ö/–æ—à–∏–±–∫–∞)
- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—å migration_report.json –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏

–ê–≤—Ç–æ—Ä: backend-developer
–î–∞—Ç–∞: 20 –æ–∫—Ç—è–±—Ä—è 2025
–ó–∞–¥–∞—á–∞: T19 (#00005_20251014_HRYHG)
"""

import asyncio
import json
import logging
import sys
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from pyrogram import Client
from pyrogram.errors import (
    UserIsBlocked,
    PeerIdInvalid,
    FloodWait,
    RPCError
)
from config import API_ID, API_HASH, TELEGRAM_BOT_TOKEN, SESSION_NAME

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s: %(message)s'
)
logger = logging.getLogger(__name__)


class PasswordDeliveryService:
    """
    –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–∞—Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ Telegram.

    Attributes:
        client: Pyrogram Client –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        sent_users: –°–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        failed_users: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—à–∏–±–∫–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    """

    def __init__(self, pyrogram_client: Client):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–∞—Ä–æ–ª–µ–π.

        Args:
            pyrogram_client: Pyrogram Client (bot) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        self.client = pyrogram_client
        self.sent_users: List[Dict] = []
        self.failed_users: List[Dict] = []

        logger.info("PasswordDeliveryService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _format_password_message(self, temp_password: str, expires_at: datetime) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            temp_password: –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
            expires_at: –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Markdown
        """
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä: "23 –æ–∫—Ç—è–±—Ä—è 2025, 14:32")
        months_ru = [
            "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
            "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
        ]

        expires_formatted = f"{expires_at.day} {months_ru[expires_at.month - 1]} {expires_at.year}, {expires_at.strftime('%H:%M')}"

        message = f"""üîê **–í–∞—à –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ VoxPersona**

**–ü–∞—Ä–æ–ª—å:** `{temp_password}`

‚ö†Ô∏è **–í–ê–ñ–ù–û:**
‚Ä¢ –≠—Ç–æ—Ç –ø–∞—Ä–æ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ **{expires_formatted}**
‚Ä¢ –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è **—Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å**
‚Ä¢ **–ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ** –ø–∞—Ä–æ–ª—å

–î–ª—è –≤—Ö–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –≤–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –ø–∞—Ä–æ–ª—å –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ."""

        return message

    async def _send_password_with_retry(
        self,
        telegram_id: int,
        username: str,
        temp_password: str,
        max_retries: int = 3
    ) -> Dict:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞—Ä–æ–ª—å —Å retry mechanism –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö.

        Retry –ª–æ–≥–∏–∫–∞:
        - –ü–æ–ø—ã—Ç–∫–∞ 1: –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏
        - –ü–æ–ø—ã—Ç–∫–∞ 2: –∑–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞
        - –ü–æ–ø—ã—Ç–∫–∞ 3: –∑–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã
        - –ü–æ–ø—ã—Ç–∫–∞ 4: –∑–∞–¥–µ—Ä–∂–∫–∞ 4 —Å–µ–∫—É–Ω–¥—ã (exponential backoff)

        Args:
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            temp_password: –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –ø–æ–ª—è–º–∏:
                - telegram_id: int
                - username: str
                - status: str ("success" –∏–ª–∏ "failed")
                - error: str (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ)
        """
        # –í—ã—á–∏—Å–ª–∏—Ç—å –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è (3 –¥–Ω—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞)
        expires_at = datetime.now() + timedelta(days=3)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = self._format_password_message(temp_password, expires_at)

        # –ü–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å retry
        for attempt in range(max_retries + 1):
            try:
                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ bot
                await self.client.send_message(
                    chat_id=telegram_id,
                    text=message,
                    parse_mode="Markdown"
                )

                logger.info(
                    f"‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {username} (ID: {telegram_id})"
                )

                return {
                    "telegram_id": telegram_id,
                    "username": username,
                    "status": "success"
                }

            except UserIsBlocked:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ ‚Üí –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –±–µ–∑ retry
                logger.warning(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞: {username} (ID: {telegram_id})"
                )
                return {
                    "telegram_id": telegram_id,
                    "username": username,
                    "status": "failed",
                    "error": "UserIsBlocked"
                }

            except PeerIdInvalid:
                # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π telegram_id ‚Üí –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –±–µ–∑ retry
                logger.warning(
                    f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π telegram_id: {username} (ID: {telegram_id})"
                )
                return {
                    "telegram_id": telegram_id,
                    "username": username,
                    "status": "failed",
                    "error": "PeerIdInvalid"
                }

            except FloodWait as e:
                # Telegram API rate limit ‚Üí –∂–¥–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                wait_time = e.value
                logger.warning(
                    f"‚è≥ FloodWait –¥–ª—è {username} (ID: {telegram_id}): "
                    f"–æ–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥"
                )
                await asyncio.sleep(wait_time)
                # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
                continue

            except RPCError as e:
                # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ Telegram API
                if attempt < max_retries:
                    # Exponential backoff: 1s ‚Üí 2s ‚Üí 4s
                    backoff_delay = 2 ** attempt
                    logger.warning(
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {username} (ID: {telegram_id}): {e}. "
                        f"Retry —á–µ—Ä–µ–∑ {backoff_delay}s (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})"
                    )
                    await asyncio.sleep(backoff_delay)
                else:
                    # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω
                    logger.error(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å {username} (ID: {telegram_id}) "
                        f"–ø–æ—Å–ª–µ {max_retries + 1} –ø–æ–ø—ã—Ç–æ–∫: {e}"
                    )
                    return {
                        "telegram_id": telegram_id,
                        "username": username,
                        "status": "failed",
                        "error": str(e)
                    }

            except Exception as e:
                # –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
                logger.error(
                    f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {username} (ID: {telegram_id}): {e}",
                    exc_info=True
                )
                return {
                    "telegram_id": telegram_id,
                    "username": username,
                    "status": "failed",
                    "error": f"Unexpected error: {str(e)}"
                }

        # Fallback (–Ω–µ –¥–æ–ª–∂–Ω–æ –¥–æ—Å—Ç–∏–≥–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏)
        return {
            "telegram_id": telegram_id,
            "username": username,
            "status": "failed",
            "error": "Max retries exceeded"
        }

    async def send_passwords_to_users(self, migrated_users: List[Dict]) -> Dict:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞—Ä–æ–ª–∏ –≤—Å–µ–º –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

        –õ–æ–≥–∏–∫–∞:
        1. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å + –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        2. Rate limiting: 1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        3. –°–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫

        Args:
            migrated_users: –°–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ migration_report.json
                –§–æ—Ä–º–∞—Ç: [{"telegram_id": int, "username": str, "temp_password": str, ...}, ...]

        Returns:
            dict: –û—Ç—á–µ—Ç –æ –¥–æ—Å—Ç–∞–≤–∫–µ —Å –ø–æ–ª—è–º–∏:
                - delivery_date: str (ISO timestamp)
                - total_users: int
                - sent: list (—É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ)
                - failed: list (–æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏)
        """
        logger.info(f"–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞—Ä–æ–ª–µ–π {len(migrated_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

        for i, user in enumerate(migrated_users, start=1):
            telegram_id = user["telegram_id"]
            username = user["username"]
            temp_password = user["temp_password"]

            logger.info(
                f"[{i}/{len(migrated_users)}] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Ä–æ–ª—è: {username} (ID: {telegram_id})"
            )

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å —Å retry
            result = await self._send_password_with_retry(
                telegram_id=telegram_id,
                username=username,
                temp_password=temp_password
            )

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result["status"] == "success":
                self.sent_users.append(result)
            else:
                self.failed_users.append(result)

            # Rate limiting: 1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            # (–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            if i < len(migrated_users):
                await asyncio.sleep(1)

        # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ –¥–æ—Å—Ç–∞–≤–∫–µ
        report = {
            "delivery_date": datetime.now().isoformat(),
            "total_users": len(migrated_users),
            "sent": self.sent_users,
            "failed": self.failed_users
        }

        logger.info(
            f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(self.sent_users)} —É—Å–ø–µ—à–Ω–æ, "
            f"{len(self.failed_users)} –æ—à–∏–±–æ–∫"
        )

        return report

    def save_delivery_report(self, report: Dict, output_path: Path) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –æ –¥–æ—Å—Ç–∞–≤–∫–µ –ø–∞—Ä–æ–ª–µ–π –≤ JSON —Ñ–∞–π–ª.

        Args:
            report: –û—Ç—á–µ—Ç –æ –¥–æ—Å—Ç–∞–≤–∫–µ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç send_passwords_to_users)
            output_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        try:
            output_path.parent.mkdir(parents=True, exist_ok=True)

            with open(output_path, "w", encoding="utf-8") as f:
                json.dump(report, f, indent=2, ensure_ascii=False)

            logger.info(f"–û—Ç—á–µ—Ç –æ –¥–æ—Å—Ç–∞–≤–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")

        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –æ –¥–æ—Å—Ç–∞–≤–∫–µ: {e}", exc_info=True)


def load_migration_report(report_path: Path) -> Dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç migration_report.json —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –º–∏–≥—Ä–∞—Ü–∏–∏.

    Args:
        report_path: –ü—É—Ç—å –∫ migration_report.json

    Returns:
        dict: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ migration_report.json

    Raises:
        FileNotFoundError: –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        ValueError: –ï—Å–ª–∏ —Ñ–∞–π–ª –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    """
    if not report_path.exists():
        raise FileNotFoundError(
            f"Migration report –Ω–µ –Ω–∞–π–¥–µ–Ω: {report_path}\n"
            f"–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ scripts/migrate_users.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞."
        )

    try:
        with open(report_path, "r", encoding="utf-8") as f:
            report = json.load(f)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if "migrated" not in report:
            raise ValueError(
                f"Migration report –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'migrated'"
            )

        logger.info(
            f"Migration report –∑–∞–≥—Ä—É–∂–µ–Ω: {len(report['migrated'])} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"
        )

        return report

    except json.JSONDecodeError as e:
        raise ValueError(f"Migration report —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: {e}")


async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞—Ä–æ–ª–µ–π.

    –í—ã–ø–æ–ª–Ω—è–µ—Ç:
    1. –ó–∞–≥—Ä—É–∑–∫—É migration_report.json
    2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Pyrogram Client (bot)
    3. –û—Ç–ø—Ä–∞–≤–∫—É –ø–∞—Ä–æ–ª–µ–π –≤—Å–µ–º –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –¥–æ—Å—Ç–∞–≤–∫–µ
    5. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—å migration_report.json
    """
    logger.info("=== VoxPersona Password Delivery Script ===")

    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç–∏
    base_dir = Path(__file__).parent.parent
    auth_data_path = base_dir / "src" / "auth_data"
    migration_report_path = auth_data_path / "migration_report.json"
    delivery_report_path = auth_data_path / "password_delivery_report.json"

    # 1. –ó–∞–≥—Ä—É–∑–∏—Ç—å migration_report.json
    try:
        migration_report = load_migration_report(migration_report_path)
    except (FileNotFoundError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ migration report: {e}")
        return

    migrated_users = migration_report["migrated"]

    if not migrated_users:
        logger.warning("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞—Ä–æ–ª–µ–π (migrated list –ø—É—Å—Ç)")
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞—Ä–æ–ª–µ–π: {len(migrated_users)}")

    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Pyrogram Client (bot)
    client = Client(
        name=f"{SESSION_NAME}_bot",  # –û—Ç–¥–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –±–æ—Ç–∞
        api_id=API_ID,
        api_hash=API_HASH,
        bot_token=TELEGRAM_BOT_TOKEN,  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å bot_token –≤–º–µ—Å—Ç–æ user session
        workdir=str(base_dir / "src")
    )

    async with client:
        logger.info("Telegram Bot Client –ø–æ–¥–∫–ª—é—á–µ–Ω")

        # 3. –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–∞—Ä–æ–ª–µ–π
        delivery_service = PasswordDeliveryService(pyrogram_client=client)

        # 4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        delivery_report = await delivery_service.send_passwords_to_users(migrated_users)

        # 5. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –æ –¥–æ—Å—Ç–∞–≤–∫–µ
        delivery_service.save_delivery_report(delivery_report, delivery_report_path)

        # 6. –í—ã–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        logger.info("=== Delivery Summary ===")
        logger.info(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {delivery_report['total_users']}")
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(delivery_report['sent'])}")
        logger.info(f"–û—à–∏–±–æ–∫: {len(delivery_report['failed'])}")

        if delivery_report['sent']:
            logger.info("\n--- –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ---")
            for user in delivery_report['sent']:
                logger.info(f"  ‚úÖ {user['username']} (ID: {user['telegram_id']})")

        if delivery_report['failed']:
            logger.warning("\n--- –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ ---")
            for user in delivery_report['failed']:
                logger.warning(
                    f"  ‚ùå {user['username']} (ID: {user['telegram_id']}) - "
                    f"–û—à–∏–±–∫–∞: {user['error']}"
                )

        logger.info(f"\n–û—Ç—á–µ—Ç –æ –¥–æ—Å—Ç–∞–≤–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {delivery_report_path}")

        # 7. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—å migration_report.json
        if delivery_report['failed']:
            logger.warning(
                f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ï—Å—Ç—å –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ ({len(delivery_report['failed'])} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)."
            )
            logger.warning(
                f"–ù–ï –£–î–ê–õ–Ø–ô–¢–ï migration_report.json –¥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
            )
        else:
            logger.info(
                f"\n‚úÖ –í—Å–µ –ø–∞—Ä–æ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!"
            )
            logger.info(
                f"‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –£–¥–∞–ª–∏—Ç–µ migration_report.json –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:"
            )
            logger.info(f"   rm {migration_report_path}")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Ä–æ–ª–µ–π –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {e}", exc_info=True)
        sys.exit(1)
