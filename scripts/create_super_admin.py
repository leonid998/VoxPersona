"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è super_admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ production auth —Å–∏—Å—Ç–µ–º–µ.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/create_super_admin.py <telegram_id> <username> <password>

–ü—Ä–∏–º–µ—Ä:
    python scripts/create_super_admin.py 155894817 admin Admin1!

–ê–≤—Ç–æ—Ä: backend-developer
–î–∞—Ç–∞: 20 –æ–∫—Ç—è–±—Ä—è 2025
–ó–∞–¥–∞—á–∞: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ (#00005_20251014_HRYHG)
"""

import sys
import logging
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from auth_manager import AuthManager
from auth_models import User
from auth_security import auth_security

logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s: %(message)s'
)
logger = logging.getLogger(__name__)


def create_super_admin(telegram_id: int, username: str, password: str) -> bool:
    """
    –°–æ–∑–¥–∞—ë—Ç super_admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ production auth —Å–∏—Å—Ç–µ–º–µ.

    Args:
        telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @)
        password: –ü–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
    """

    # –ü—É—Ç—å –∫ auth_data (production)
    auth_dir = Path(__file__).parent.parent / "src" / "auth_data"
    auth_dir.mkdir(parents=True, exist_ok=True)

    logger.info(f"üìÅ Auth data directory: {auth_dir}")
    logger.info(f"üë§ Creating super_admin user:")
    logger.info(f"   - Telegram ID: {telegram_id}")
    logger.info(f"   - Username: {username}")
    logger.info(f"   - Role: super_admin")

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AuthManager
        auth = AuthManager(auth_dir)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = auth.storage.get_user_by_telegram_id(telegram_id)
        if existing_user:
            logger.error(f"‚ùå User with telegram_id={telegram_id} already exists!")
            logger.info(f"   - User ID: {existing_user.user_id}")
            logger.info(f"   - Username: {existing_user.username}")
            logger.info(f"   - Role: {existing_user.role}")
            return False

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è (5-8 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
        is_valid, error_msg = auth_security.validate_password(password)
        if not is_valid:
            logger.error(f"‚ùå Password validation failed: {error_msg}")
            return False

        # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ storage (bypass invitation system)
        # –≠—Ç–æ –¥–æ–ø—É—Å—Ç–∏–º–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ super_admin
        import uuid
        from datetime import datetime, timedelta

        user_data = User(
            user_id=str(uuid.uuid4()),
            telegram_id=telegram_id,
            username=username,
            password_hash=auth_security.hash_password(password),
            role="super_admin",
            is_active=True,
            is_blocked=False,
            must_change_password=False,  # –ù–µ —Ç—Ä–µ–±—É–µ–º —Å–º–µ–Ω—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ admin
            failed_login_attempts=0,
            last_failed_login=None,
            created_at=datetime.now(),
            updated_at=datetime.now()
        )

        success = auth.storage.create_user(user_data)

        if not success:
            logger.error("‚ùå Failed to create user in storage")
            return False

        user = user_data

        if user:
            logger.info("‚úÖ Super_admin created successfully!")
            logger.info(f"üìã User details:")
            logger.info(f"   - User ID: {user.user_id}")
            logger.info(f"   - Telegram ID: {user.telegram_id}")
            logger.info(f"   - Username: {user.username}")
            logger.info(f"   - Role: {user.role}")
            logger.info(f"   - Active: {user.is_active}")
            logger.info(f"   - Blocked: {user.is_blocked}")
            logger.info(f"   - Must change password: {user.must_change_password}")
            logger.info("")
            logger.info("üéØ Next steps:")
            logger.info("  1. Test authentication in Telegram bot")
            logger.info("  2. Send /start to the bot")
            logger.info(f"  3. Enter password: {password}")
            logger.info("  4. Access admin menu via –°–∏—Å—Ç–µ–º–Ω–∞—è ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞")
            return True
        else:
            logger.error("‚ùå Failed to create user (unknown error)")
            return False

    except Exception as e:
        logger.error(f"‚ùå Error creating super_admin: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """Main entry point."""
    print("=" * 70)
    print(" üîê VoxPersona Super Admin Creation Script")
    print("=" * 70)
    print()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if len(sys.argv) != 4:
        print("‚ùå Usage: python scripts/create_super_admin.py <telegram_id> <username> <password>")
        print()
        print("Example:")
        print("  python scripts/create_super_admin.py 155894817 admin Admin1!")
        print()
        print("Password requirements:")
        print("  - 5-8 characters")
        print("  - Must contain letters and digits")
        sys.exit(1)

    try:
        telegram_id = int(sys.argv[1])
        username = sys.argv[2]
        password = sys.argv[3]

        success = create_super_admin(telegram_id, username, password)

        if success:
            print()
            print("=" * 70)
            print("‚úÖ SUCCESS: Super admin created!")
            print("=" * 70)
            sys.exit(0)
        else:
            print()
            print("=" * 70)
            print("‚ùå FAILED: Could not create super admin")
            print("=" * 70)
            sys.exit(1)

    except ValueError:
        logger.error("‚ùå Invalid telegram_id: must be a number")
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå Unexpected error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
