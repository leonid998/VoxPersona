#!/bin/bash

###############################################################################
# VoxPersona Automatic Backup Script
# –¶–µ–ª—å: –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –ó–∞–ø—É—Å–∫ –≤ 2:00 AM —á–µ—Ä–µ–∑ cron
# –ê–≤—Ç–æ—Ä: VoxPersona Team
# –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-10-24
###############################################################################

set -euo pipefail

# ============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ============================================================================

# –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_DIR="/home/voxpersona_user/VoxPersona"

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è backup
BACKUP_DIR="/home/voxpersona_user/backups"

# –ò–º—è backup —Ñ–∞–π–ª–∞ —Å timestamp
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_NAME="persistent_data_backup_${TIMESTAMP}.tar.gz"
BACKUP_PATH="${BACKUP_DIR}/${BACKUP_NAME}"

# –õ–æ–≥ —Ñ–∞–π–ª
LOG_FILE="${BACKUP_DIR}/backup.log"

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è backup (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7)
RETENTION_DAYS="${BACKUP_RETENTION_DAYS:-7}"

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è backup (–≤—Å–µ bind mount volumes –∏–∑ docker-compose.yml)
BACKUP_TARGETS=(
    "telegram_sessions"
    "auth_data"
    "rag_indices"
    "conversations"
    "md_reports"
    "chat_history"
    "logs"
    "data"
)

# Docker named volumes –¥–ª—è backup
DOCKER_VOLUMES=(
    "postgres_data"
    "minio_data"
    "minio_certs"
    "pip_cache"
    "huggingface_cache"
)

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ Docker volumes
TEMP_VOLUMES_DIR="${BACKUP_DIR}/temp_volumes_${TIMESTAMP}"

# ============================================================================
# –§–£–ù–ö–¶–ò–ò
# ============================================================================

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å timestamp
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "${LOG_FILE}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
check_directory() {
    local dir=$1
    if [[ ! -d "${PROJECT_DIR}/${dir}" ]]; then
        log "‚ö†Ô∏è  WARNING: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
        return 1
    fi
    return 0
}

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
get_dir_size() {
    local dir=$1
    du -sh "${PROJECT_DIR}/${dir}" 2>/dev/null | cut -f1 || echo "N/A"
}

# –≠–∫—Å–ø–æ—Ä—Ç Docker named volume –≤ tar –∞—Ä—Ö–∏–≤
export_docker_volume() {
    local volume_name=$1
    local export_path="${TEMP_VOLUMES_DIR}/${volume_name}.tar"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è volume
    if ! docker volume inspect "${volume_name}" &>/dev/null; then
        log "‚ö†Ô∏è  WARNING: Docker volume ${volume_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
        return 1
    fi

    log "  üì¶ –≠–∫—Å–ø–æ—Ä—Ç Docker volume: ${volume_name}"

    # –≠–∫—Å–ø–æ—Ä—Ç volume —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    if docker run --rm \
        -v "${volume_name}:/volume" \
        -v "${TEMP_VOLUMES_DIR}:/backup" \
        alpine \
        tar -cf "/backup/${volume_name}.tar" -C /volume . 2>&1 | tee -a "${LOG_FILE}"; then

        local size=$(du -sh "${export_path}" 2>/dev/null | cut -f1 || echo "N/A")
        log "    ‚úì ${volume_name} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (${size})"
        return 0
    else
        log "    ‚ùå ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ${volume_name}"
        return 1
    fi
}

# –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö Docker volumes
export_all_docker_volumes() {
    log "üê≥ –≠–∫—Å–ø–æ—Ä—Ç Docker named volumes..."

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    mkdir -p "${TEMP_VOLUMES_DIR}"

    local exported_count=0
    for volume in "${DOCKER_VOLUMES[@]}"; do
        if export_docker_volume "${volume}"; then
            ((exported_count++))
        fi
    done

    if [[ ${exported_count} -eq 0 ]]; then
        log "‚ö†Ô∏è  WARNING: –ù–∏ –æ–¥–∏–Ω Docker volume –Ω–µ –±—ã–ª —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω"
        return 1
    else
        log "‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ Docker volumes: ${exported_count}/${#DOCKER_VOLUMES[@]}"
        return 0
    fi
}

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
cleanup_temp_files() {
    if [[ -d "${TEMP_VOLUMES_DIR}" ]]; then
        log "üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
        rm -rf "${TEMP_VOLUMES_DIR}"
        log "  ‚úì –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ backup –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
create_backup_dir() {
    if [[ ! -d "${BACKUP_DIR}" ]]; then
        log "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ backup: ${BACKUP_DIR}"
        mkdir -p "${BACKUP_DIR}"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
check_disk_space() {
    local available_space=$(df -h "${BACKUP_DIR}" | awk 'NR==2 {print $4}')
    log "üíæ –î–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ: ${available_space}"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º—É–º 5GB —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
    local available_kb=$(df -k "${BACKUP_DIR}" | awk 'NR==2 {print $4}')
    if [[ ${available_kb} -lt 5242880 ]]; then
        log "‚ùå ERROR: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ (–º–∏–Ω–∏–º—É–º 5GB —Ç—Ä–µ–±—É–µ—Ç—Å—è)"
        return 1
    fi
    return 0
}

# –°–æ–∑–¥–∞–Ω–∏–µ backup –∞—Ä—Ö–∏–≤–∞
create_backup() {
    log "üöÄ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è backup: ${BACKUP_NAME}"

    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    cd "${PROJECT_DIR}" || {
        log "‚ùå ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ ${PROJECT_DIR}"
        return 1
    }

    # 1. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è backup (bind mounts)
    log "üìÅ –°–±–æ—Ä bind mount –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    local existing_targets=()
    for target in "${BACKUP_TARGETS[@]}"; do
        if check_directory "${target}"; then
            existing_targets+=("${target}")
            local size=$(get_dir_size "${target}")
            log "  ‚úì ${target} (${size})"
        fi
    done

    if [[ ${#existing_targets[@]} -eq 0 ]]; then
        log "‚ö†Ô∏è  WARNING: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö bind mount –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"
    fi

    # 2. –≠–∫—Å–ø–æ—Ä—Ç Docker named volumes
    export_all_docker_volumes

    # 3. –°–æ–∑–¥–∞–Ω–∏–µ tar.gz –∞—Ä—Ö–∏–≤–∞ —Å bind mounts
    log "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ bind mounts..."
    if [[ ${#existing_targets[@]} -gt 0 ]]; then
        if tar -czf "${BACKUP_PATH}" "${existing_targets[@]}" 2>&1 | tee -a "${LOG_FILE}"; then
            log "  ‚úì Bind mounts –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω—ã"
        else
            log "  ‚ùå ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å bind mounts"
            return 1
        fi
    fi

    # 4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Docker volumes –≤ –∞—Ä—Ö–∏–≤
    if [[ -d "${TEMP_VOLUMES_DIR}" ]]; then
        log "üì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Docker volumes –≤ –∞—Ä—Ö–∏–≤..."
        if tar -rf "${BACKUP_PATH%.gz}" -C "${TEMP_VOLUMES_DIR}" . 2>&1 | tee -a "${LOG_FILE}"; then
            log "  ‚úì Docker volumes –¥–æ–±–∞–≤–ª–µ–Ω—ã"
        else
            log "  ‚ö†Ô∏è  WARNING: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å Docker volumes"
        fi

        # –ü–µ—Ä–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
        gzip -f "${BACKUP_PATH%.gz}"
    fi

    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
    if [[ -f "${BACKUP_PATH}" ]]; then
        local backup_size=$(du -sh "${BACKUP_PATH}" | cut -f1)
        log "‚úÖ Backup —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: ${BACKUP_NAME} (${backup_size})"
        return 0
    else
        log "‚ùå ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å backup –∞—Ä—Ö–∏–≤"
        return 1
    fi
}

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö backup (—Å—Ç–∞—Ä—à–µ RETENTION_DAYS –¥–Ω–µ–π)
# –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π backup, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —Å—Ç–∞—Ä—à–µ RETENTION_DAYS
cleanup_old_backups() {
    log "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö backup (—Å—Ç–∞—Ä—à–µ ${RETENTION_DAYS} –¥–Ω–µ–π)..."

    # –ù–∞–π—Ç–∏ –≤—Å–µ backup —Ñ–∞–π–ª—ã, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
    local all_backups
    mapfile -t all_backups < <(find "${BACKUP_DIR}" -name "persistent_data_backup_*.tar.gz" -type f -printf "%T@ %p\n" | sort -rn | cut -d' ' -f2-)

    local total_backups=${#all_backups[@]}

    if [[ ${total_backups} -eq 0 ]]; then
        log "  ‚ÑπÔ∏è  –ù–µ—Ç backup —Ñ–∞–π–ª–æ–≤"
        return 0
    fi

    log "  üìä –í—Å–µ–≥–æ backup —Ñ–∞–π–ª–æ–≤: ${total_backups}"

    # –ù–∞–π—Ç–∏ —Å—Ç–∞—Ä—ã–µ backup (—Å—Ç–∞—Ä—à–µ RETENTION_DAYS –¥–Ω–µ–π)
    local old_backups
    mapfile -t old_backups < <(find "${BACKUP_DIR}" -name "persistent_data_backup_*.tar.gz" -type f -mtime +${RETENTION_DAYS} -printf "%T@ %p\n" | sort -rn | cut -d' ' -f2-)

    local old_count=${#old_backups[@]}

    if [[ ${old_count} -eq 0 ]]; then
        log "  ‚úì –ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö backup –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
        return 0
    fi

    log "  üìä –°—Ç–∞—Ä—ã—Ö backup (>${RETENTION_DAYS} –¥–Ω–µ–π): ${old_count}"

    # –ö–†–ò–¢–ò–ß–ù–û: –ï—Å–ª–∏ –≤—Å–µ backup —Å—Ç–∞—Ä—ã–µ, –æ—Å—Ç–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –ø–æ—Å–ª–µ–¥–Ω–∏–π
    local to_delete_count=0
    if [[ ${old_count} -eq ${total_backups} ]]; then
        log "  ‚ö†Ô∏è  –í—Å–µ backup —Å—Ç–∞—Ä—à–µ ${RETENTION_DAYS} –¥–Ω–µ–π!"
        log "  üõ°Ô∏è  –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π backup –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
        to_delete_count=$((old_count - 1))
    else
        to_delete_count=${old_count}
    fi

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö backup (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
    local deleted_count=0
    for ((i=1; i<=to_delete_count; i++)); do
        local backup_to_delete="${old_backups[$i]}"
        if [[ -n "${backup_to_delete}" && -f "${backup_to_delete}" ]]; then
            log "  üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ: $(basename "${backup_to_delete}")"
            rm -f "${backup_to_delete}"
            ((deleted_count++))
        fi
    done

    if [[ ${deleted_count} -eq 0 ]]; then
        log "  ‚úì –ù–µ—Ç backup –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω)"
    else
        log "  ‚úÖ –£–¥–∞–ª–µ–Ω–æ backup —Ñ–∞–π–ª–æ–≤: ${deleted_count}"
        log "  üõ°Ô∏è  –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ backup —Ñ–∞–π–ª–æ–≤: $((total_backups - deleted_count))"
    fi
}

# –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ backup
show_statistics() {
    log "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ backup:"

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ backup —Ñ–∞–π–ª–æ–≤
    local total_backups=$(find "${BACKUP_DIR}" -name "persistent_data_backup_*.tar.gz" -type f | wc -l)
    log "  ‚Ä¢ –í—Å–µ–≥–æ backup —Ñ–∞–π–ª–æ–≤: ${total_backups}"

    # –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö backup
    local total_size=$(du -sh "${BACKUP_DIR}" 2>/dev/null | cut -f1 || echo "N/A")
    log "  ‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${total_size}"

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 backup
    log "  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ backup:"
    find "${BACKUP_DIR}" -name "persistent_data_backup_*.tar.gz" -type f -printf "%T+ %p\n" | \
        sort -r | head -5 | while read -r line; do
        local date=$(echo "${line}" | awk '{print $1}')
        local file=$(echo "${line}" | awk '{print $2}')
        local size=$(du -sh "${file}" | cut -f1)
        log "    - $(basename "${file}") (${size}, ${date})"
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ backup
verify_backup() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ backup..."

    if tar -tzf "${BACKUP_PATH}" >/dev/null 2>&1; then
        log "  ‚úÖ Backup –∞—Ä—Ö–∏–≤ —Ü–µ–ª–æ—Å—Ç–Ω—ã–π –∏ —á–∏—Ç–∞–µ–º—ã–π"

        # –°–ø–∏—Å–æ–∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        local file_count=$(tar -tzf "${BACKUP_PATH}" | wc -l)
        log "  ‚Ä¢ –§–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ: ${file_count}"
        return 0
    else
        log "  ‚ùå ERROR: Backup –∞—Ä—Ö–∏–≤ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω!"
        return 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    log "ü§ñ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ backup VoxPersona"
    log "   –†–µ–∂–∏–º: –ü–æ–ª–Ω—ã–π backup (bind mounts + Docker volumes)"
    log "   –í—Ä–µ–º—è —Ö—Ä–∞–Ω–µ–Ω–∏—è: ${RETENTION_DAYS} –¥–Ω–µ–π"
    log "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    create_backup_dir

    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ—Å—Ç–∞
    if ! check_disk_space; then
        log "‚ùå FAILED: Backup –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ"
        cleanup_temp_files
        exit 1
    fi

    # –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ backup (bind mounts + Docker volumes)
    if ! create_backup; then
        log "‚ùå FAILED: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å backup"
        cleanup_temp_files
        exit 1
    fi

    # –®–∞–≥ 4: –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ Docker volumes
    cleanup_temp_files

    # –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
    if ! verify_backup; then
        log "‚ö†Ô∏è  WARNING: Backup —Å–æ–∑–¥–∞–Ω, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞"
    fi

    # –®–∞–≥ 6: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö backup (–≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π)
    cleanup_old_backups

    # –®–∞–≥ 7: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    show_statistics

    log "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    log "‚úÖ Backup —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
    log "   –§–∞–π–ª: ${BACKUP_NAME}"
    log "   –ü—É—Ç—å: ${BACKUP_PATH}"
    log "   –°–ª–µ–¥—É—é—â–∏–π backup: –∑–∞–≤—Ç—Ä–∞ –≤ 02:00"
    log "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
}

# ============================================================================
# –ó–ê–ü–£–°–ö
# ============================================================================

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç –∏–º–µ–Ω–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if [[ "${EUID}" -eq 0 ]] && [[ "${USER}" != "root" ]]; then
    log "‚ö†Ô∏è  WARNING: –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –æ—Ç root, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Ç voxpersona_user"
fi

# Trap –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
cleanup_on_error() {
    log "‚ùå ERROR: Backup –ø—Ä–µ—Ä–≤–∞–Ω —Å –æ—à–∏–±–∫–æ–π –Ω–∞ –ª–∏–Ω–∏–∏ ${LINENO}"
    cleanup_temp_files
    exit 1
}

trap cleanup_on_error ERR
trap cleanup_temp_files EXIT

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"

exit 0
