"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
–†–µ–∞–ª–∏–∑—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –∑–∞–≥—Ä—É–∑–∫—É –∏ –∞–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
"""

import os
import json
import logging
from datetime import datetime, date
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, asdict
from pathlib import Path

from .config import CHAT_HISTORY_DIR
from .constants import HISTORY_FILE_EXTENSION, INDEX_FILE_NAME
from .utils import count_tokens


@dataclass
class Message:
    """–ú–æ–¥–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞."""
    timestamp: str
    message_id: int
    type: str  # "user_question" | "bot_answer"
    text: str
    tokens: int
    sent_as: Optional[str] = None  # "message" | "file" (—Ç–æ–ª—å–∫–æ –¥–ª—è bot_answer)
    file_path: Optional[str] = None  # –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (–µ—Å–ª–∏ sent_as = "file")
    search_type: Optional[str] = None  # "fast" | "deep" (—Ç–æ–ª—å–∫–æ –¥–ª—è bot_answer)


@dataclass
class DayStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å."""
    total_questions: int = 0
    total_answers: int = 0
    fast_searches: int = 0
    deep_searches: int = 0
    total_tokens: int = 0
    files_sent: int = 0


@dataclass
class DayHistory:
    """–ò—Å—Ç–æ—Ä–∏—è –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å."""
    user_id: int
    username: str
    date: str
    messages: List[Message]
    stats: DayStats


class ChatHistoryManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–æ–≤."""

    def __init__(self):
        self.history_dir = Path(CHAT_HISTORY_DIR)
        self.ensure_history_directory()

    def ensure_history_directory(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏—Å—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
        try:
            self.history_dir.mkdir(parents=True, exist_ok=True)
            logging.debug(f"History directory ensured: {self.history_dir}")
        except Exception as e:
            logging.error(f"Failed to create history directory {self.history_dir}: {e}")
            raise

    def ensure_user_directory(self, user_id: int) -> Path:
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
        user_dir = self.history_dir / f"user_{user_id}"
        try:
            user_dir.mkdir(parents=True, exist_ok=True)
            return user_dir
        except Exception as e:
            logging.error(f"Failed to create user directory {user_dir}: {e}")
            raise

    def get_today_filename(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã."""
        today = date.today().isoformat()
        return f"{today}{HISTORY_FILE_EXTENSION}"

    def get_date_filename(self, target_date: date) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã."""
        return f"{target_date.isoformat()}{HISTORY_FILE_EXTENSION}"

    def load_day_history(self, user_id: int, target_date: Optional[date] = None) -> Optional[DayHistory]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å."""
        if target_date is None:
            target_date = date.today()
        
        user_dir = self.ensure_user_directory(user_id)
        filename = self.get_date_filename(target_date)
        file_path = user_dir / filename

        if not file_path.exists():
            return None

        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—ä–µ–∫—Ç—ã
            messages = [Message(**msg) for msg in data['messages']]
            stats = DayStats(**data['stats'])
            
            return DayHistory(
                user_id=data['user_id'],
                username=data['username'],
                date=data['date'],
                messages=messages,
                stats=stats
            )
        except Exception as e:
            logging.error(f"Failed to load day history for user {user_id}, date {target_date}: {e}")
            return None

    def save_day_history(self, day_history: DayHistory) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞ –¥–µ–Ω—å."""
        user_dir = self.ensure_user_directory(day_history.user_id)
        filename = self.get_date_filename(date.fromisoformat(day_history.date))
        file_path = user_dir / filename

        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ dict –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            data = asdict(day_history)
            
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            logging.debug(f"Saved day history for user {day_history.user_id}, date {day_history.date}")
            return True
        except Exception as e:
            logging.error(f"Failed to save day history: {e}")
            return False

    def save_message_to_history(
        self, 
        user_id: int, 
        username: str, 
        message_id: int,
        message_type: str, 
        text: str,
        sent_as: Optional[str] = None,
        file_path: Optional[str] = None,
        search_type: Optional[str] = None
    ) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é."""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = date.today()
            day_history = self.load_day_history(user_id, today)
            
            if day_history is None:
                day_history = DayHistory(
                    user_id=user_id,
                    username=username,
                    date=today.isoformat(),
                    messages=[],
                    stats=DayStats()
                )

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = Message(
                timestamp=datetime.now().isoformat(),
                message_id=message_id,
                type=message_type,
                text=text,
                tokens=count_tokens(text),
                sent_as=sent_as,
                file_path=file_path,
                search_type=search_type
            )

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            day_history.messages.append(message)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_stats(day_history.stats, message)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            return self.save_day_history(day_history)

        except Exception as e:
            logging.error(f"Failed to save message to history: {e}")
            return False

    def _update_stats(self, stats: DayStats, message: Message) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω—è."""
        stats.total_tokens += message.tokens

        if message.type == "user_question":
            stats.total_questions += 1
        elif message.type == "bot_answer":
            stats.total_answers += 1
            
            if message.sent_as == "file":
                stats.files_sent += 1
            
            if message.search_type == "fast":
                stats.fast_searches += 1
            elif message.search_type == "deep":
                stats.deep_searches += 1

    def get_user_stats(self, user_id: int, days_back: int = 30) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π."""
        stats = {
            "total_questions": 0,
            "total_answers": 0,
            "fast_searches": 0,
            "deep_searches": 0,
            "total_tokens": 0,
            "files_sent": 0,
            "days_active": 0
        }

        user_dir = self.ensure_user_directory(user_id)
        if not user_dir.exists():
            return stats

        current_date = date.today()
        for i in range(days_back):
            check_date = date.fromordinal(current_date.toordinal() - i)
            day_history = self.load_day_history(user_id, check_date)
            
            if day_history and day_history.messages:
                stats["days_active"] += 1
                stats["total_questions"] += day_history.stats.total_questions
                stats["total_answers"] += day_history.stats.total_answers
                stats["fast_searches"] += day_history.stats.fast_searches
                stats["deep_searches"] += day_history.stats.deep_searches
                stats["total_tokens"] += day_history.stats.total_tokens
                stats["files_sent"] += day_history.stats.files_sent

        return stats

    def format_day_history_for_display(self, user_id: int, target_date: Optional[date] = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–Ω—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        if target_date is None:
            target_date = date.today()

        day_history = self.load_day_history(user_id, target_date)
        
        if not day_history or not day_history.messages:
            return f"üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞ {target_date.strftime('%d.%m.%Y')}\n\n–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å."

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        result = f"üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞ {target_date.strftime('%d.%m.%Y')}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = day_history.stats
        result += f"ü§î –í–æ–ø—Ä–æ—Å—ã: {stats.total_questions}\n"
        result += f"ü§ñ –û—Ç–≤–µ—Ç—ã: {stats.total_answers}\n"
        result += f"‚ö° –ë—ã—Å—Ç—Ä—ã—Ö –ø–æ–∏—Å–∫–æ–≤: {stats.fast_searches}\n"
        result += f"üîç –ì–ª—É–±–æ–∫–∏—Ö –ø–æ–∏—Å–∫–æ–≤: {stats.deep_searches}\n"
        result += f"üìù –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats.total_tokens:,}\n"
        result += f"üìé –§–∞–π–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats.files_sent}\n\n"

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
        result += "**–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**\n\n"
        recent_messages = day_history.messages[-5:] if len(day_history.messages) > 5 else day_history.messages
        
        for msg in recent_messages:
            timestamp = datetime.fromisoformat(msg.timestamp).strftime('%H:%M')
            
            if msg.type == "user_question":
                preview = msg.text[:100] + "..." if len(msg.text) > 100 else msg.text
                result += f"üë§ {timestamp}: {preview}\n"
            else:
                preview = msg.text[:100] + "..." if len(msg.text) > 100 else msg.text
                search_icon = "‚ö°" if msg.search_type == "fast" else "üîç" if msg.search_type == "deep" else "ü§ñ"
                file_icon = "üìé" if msg.sent_as == "file" else ""
                result += f"{search_icon} {timestamp}: {preview} {file_icon}\n"
            
            result += "\n"

        return result

    def format_user_stats_for_display(self, user_id: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        stats = self.get_user_stats(user_id)
        
        result = "üìà **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∑–∞ 30 –¥–Ω–µ–π):**\n\n"
        result += f"üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: {stats['days_active']}\n"
        result += f"ü§î –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {stats['total_questions']:,}\n"
        result += f"ü§ñ –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {stats['total_answers']:,}\n"
        result += f"‚ö° –ë—ã—Å—Ç—Ä—ã—Ö –ø–æ–∏—Å–∫–æ–≤: {stats['fast_searches']:,}\n"
        result += f"üîç –ì–ª—É–±–æ–∫–∏—Ö –ø–æ–∏—Å–∫–æ–≤: {stats['deep_searches']:,}\n"
        result += f"üìù –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {stats['total_tokens']:,}\n"
        result += f"üìé –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {stats['files_sent']:,}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        if stats['total_questions'] > 0:
            avg_tokens_per_question = stats['total_tokens'] / stats['total_questions']
            result += f"üí° –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞: {avg_tokens_per_question:.1f} —Ç–æ–∫–µ–Ω–æ–≤\n"
        
        if stats['total_answers'] > 0:
            deep_search_ratio = (stats['deep_searches'] / stats['total_answers']) * 100
            result += f"üéØ –ì–ª—É–±–æ–∫–∏—Ö –ø–æ–∏—Å–∫–æ–≤: {deep_search_ratio:.1f}%\n"

        return result


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
chat_history_manager = ChatHistoryManager()