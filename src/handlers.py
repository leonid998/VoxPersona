from datetime import datetime
from datetime import datetime
import os
import threading
import logging
import asyncio
from pyrogram import Client, filters
from pyrogram.types import CallbackQuery, Message, Document
from minio.error import S3Error

from src.minio_manager import get_minio_manager, MinIOError, MinIOConnectionError, MinIOUploadError

from config import (
    processed_texts,
    user_states,
    authorized_users,
    STORAGE_DIRS
)
from utils import run_loading_animation, openai_audio_filter
from validators import validate_date_format, check_audio_file_size, check_state, check_file_detection, check_valid_data, check_authorized, validate_building_type
from parser import parse_message_text, parse_building_type, parse_zone, parse_file_number, parse_place_name, parse_city, parse_name

from storage import delete_tmp_params, safe_filename, find_real_filename
from datamodels import mapping_building_names, REPORT_MAPPING, mapping_scenario_names

from markups import (
    help_menu_markup, 
    storage_menu_markup,
    interview_or_design_menu,
    interview_menu_markup,
    design_menu_markup,
    building_type_menu_markup,
    make_dialog_markup
)

from menus import (
    send_main_menu, 
    files_menu_markup,
    register_menu_message,
    clear_active_menus,
    show_confirmation_menu,
    show_edit_menu
)
from storage import process_stored_file

from analysis import (
    assign_roles
)

from run_analysis import run_analysis_with_spinner, run_dialog_mode

from audio_utils import extract_audio_filename, define_audio_file_params, transcribe_audio_and_save
from auth_utils import handle_unauthorized_user

from openai import PermissionDeniedError as OpenAIPermissionError

# Initialize MinIO manager
minio_manager = get_minio_manager()

filter_wav_document = filters.create(openai_audio_filter)

audio_file_name_to_save = ""
transcription_text = ""

rags = {}
rags_lock = asyncio.Lock()


async def set_rags(new_rags: dict) -> None:
    """Allow external modules to update loaded RAGs."""
    global rags
    async with rags_lock:
        rags = new_rags

def ask_client(data: dict, text: str, state: dict, chat_id: int, app: Client):
    data["client"] = parse_name(text)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    state["step"] = "confirm_data"
    show_confirmation_menu(chat_id, state, app)

def ask_employee(data: dict, text: str, state: dict, chat_id: int, app: Client):
    data["employee"] = parse_name(text)
    state["step"] = "ask_place_name"
    app.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è:")

def ask_building_type(data: dict, text: str, state: dict, chat_id: int, app: Client):
    data["building_type"] = parse_building_type(text)
    state["step"] = "ask_zone"
    app.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∑–æ–Ω—É (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å) –∏–ª–∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ -:")

def ask_zone(data: dict, text: str, mode: str, state: dict, chat_id: int, app: Client):
    data['zone_name'] = parse_zone(text)
    if mode == "interview":
        # –î–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é —Å–µ–π—á–∞—Å –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥ ‚Äî —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä
        state["step"] = "ask_client"
        app.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞:")
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –¥–∏–∑–∞–π–Ω ‚Äî –Ω–∞–¥–æ —Å–ø—Ä–æ—Å–∏—Ç—å –≥–æ—Ä–æ–¥
        state["step"] = "ask_city"
        app.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")

def ask_place_name(data: dict, text: str, state: dict, chat_id: int, app: Client):
    data["place_name"] = parse_place_name(text)
    state["step"] = "ask_building_type"
    app.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è:")

def ask_date(data: dict, text: str, state: dict, chat_id: int, app: Client):
    if not validate_date_format(text):
        app.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-01-01).")
        return
    data["date"] = text
    state["step"] = "ask_employee"
    app.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")

def ask_city(data: dict, text: str, state: dict, chat_id: int, app: Client):
    data["city"] = parse_city(text)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    state["step"] = "confirm_data"
    show_confirmation_menu(chat_id, state, app)

def ask_audio_number(data: dict, text: str, state: dict, chat_id: int, app: Client):
    """
    –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞.
    """
    try:
        audio_number = parse_file_number(text)
        data["audio_number"] = audio_number
        state["step"] = "ask_date"
        app.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-01-01):")
    except ValueError:
        app.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

# --------------------------------------------------------------------------------------
#                                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π
# --------------------------------------------------------------------------------------

def handle_edit_field(chat_id: int, field: str, app: Client):
    """
    –°—Ç–∞–≤–∏—Ç —à–∞–≥ (step) –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—è, –∑–∞—Ç–µ–º –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
    """
    st = user_states.get(chat_id, {})
    if not st:
        logging.error("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    st["previous_step"] = st.get("step")
    st["step"] = f"edit_{field}"
    mode = st.get("mode")
    edit_fields = {
        "audio_number": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞:",
        "date": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-01-01):",
        "employee": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
        "place_name": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è:",
        "building_type": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è",
        "zone_name": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–æ–Ω—É (–µ—Å–ª–∏ –µ—Å—Ç—å)"
    }

    if mode == "design":
        edit_fields["city"] = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:"
    else:
        edit_fields["client"] = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –ö–ª–∏–µ–Ω—Ç–∞"
    
    prompt_text = edit_fields.get(field, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")

    app.send_message(chat_id, prompt_text)

def handle_authorized_text(app: Client, user_states: dict[int, dict], message: Message):
    """
    –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –≤ —Ç.—á. –ª–æ–≥–∏–∫—É –ø–æ —à–∞–≥–∞–º (—Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é/–¥–∏–∑–∞–π–Ω–∞).
    """
    c_id = message.chat.id
    text_ = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    st = user_states.get(c_id)

    if not check_state(st, c_id, app):
        logging.info("–ù–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ –ø–∏—à–µ—Ç –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
        send_main_menu(c_id, app)
        return
    
    if st.get("step") == "dialog_mode":
        deep = st.get("deep_search", False)
        msg = app.send_message(c_id, "‚è≥ –î—É–º–∞—é...")
        st_ev = threading.Event()
        sp_th = threading.Thread(target=run_loading_animation, args=(c_id, msg.id, st_ev, app))
        sp_th.start()
        try:
            if not rags:
                app.send_message(c_id, "üîÑ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –µ—â—ë –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            else:
                run_dialog_mode(chat_id=c_id, app=app, text=text_, deep_search=deep, rags=rags)
            return
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞: {e}")
            app.send_message(c_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        finally:
            st_ev.set()
            sp_th.join()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if st.get("step", "").startswith("edit_"):
        step = st["step"]
        field = st["step"].split("edit_")[1]         
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
        if field == "date" and not validate_date_format(text_):
            app.send_message(c_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        data_ = st.setdefault("data", {})
        data_[field] = text_
        
        previous_step = st.pop("previous_step", "confirm_data")
        st["step"] = previous_step
        
        show_confirmation_menu(c_id, st, app)
        return

    mode = st.get("mode")        # 'interview' –∏–ª–∏ 'design'
    step = st.get("step")        # –Ω–∞–ø—Ä–∏–º–µ—Ä, 'ask_employee'
    data_ = st.setdefault("data", {})

    if st.get("step") == "inputing_fields":
        ask_audio_number(data_, text_, st, c_id, app)
        return

    if step == "ask_employee":
        ask_employee(data_, text_, st, c_id, app)
        return
    
    elif step == "ask_audio_number":
        ask_audio_number(data_, text_, st, c_id, app)
        return

    elif step == "ask_place_name":
        ask_place_name(data_, text_, st, c_id, app)
        return
    
    elif step == "ask_date":
        ask_date(data_, text_, st, c_id, app)

    elif step == "ask_city":
        ask_city(data_, text_, st, c_id, app)
        return
    
    elif step == "ask_building_type":
        ask_building_type(data_, text_, st, c_id, app)
        return
    
    elif step == "ask_zone":
        ask_zone(data_, text_, mode, st, c_id, app)

    elif step == "ask_client":
        ask_client(data_, text_, st, c_id, app)
    else:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        user_states.pop(c_id, None)
        app.send_message(c_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start.")
        send_main_menu(c_id, app)

# =========================================================================
#  Callback-queries
# =========================================================================

def handle_help_menu(chat_id: int, app: Client):
    clear_active_menus(chat_id, app)
    kb, txt = help_menu_markup()
    mm = app.send_message(chat_id, txt, reply_markup=kb)
    register_menu_message(chat_id, mm.id)

def handle_menu_storage(chat_id: int, app: Client):
    clear_active_menus(chat_id, app)
    mm = app.send_message(chat_id, "–ß—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º?:", reply_markup=interview_or_design_menu())
    register_menu_message(chat_id, mm.id)

def handle_main_menu(chat_id: int, app: Client):
    send_main_menu(chat_id, app)

def handle_view_files(chat_id: int, data, app: Client):
    parts = data.split("||")
    if len(parts) < 2: 
        return
    cat = parts[1]
    clear_active_menus(chat_id, app)
    mm = app.send_message(chat_id, f"–§–∞–π–ª—ã –≤ '{cat}':", reply_markup=files_menu_markup(cat))
    register_menu_message(chat_id, mm.id)

def process_selected_file(chat_id: int, category: str, filename: str, app: Client):
    msg = app.send_message(chat_id, "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...")
    stop_event = threading.Event()
    spinner_thread = threading.Thread(target=run_loading_animation, args=(chat_id, msg.id, stop_event, app))
    spinner_thread.start()
    
    try:
        result = process_stored_file(category, filename, chat_id, app)
        if result is not None:
            processed_texts[chat_id] = result
            # app.edit_message_text(chat_id, msg.id, "‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
            logging.info("‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
    finally:
        stop_event.set()
        spinner_thread.join()
        app.delete_messages(chat_id, msg.id)
    
    # app.send_message(chat_id, "–ß—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–ª—å—à–µ?", reply_markup=interview_or_design_menu())
    # send_main_menu(chat_id, app)


def preprocess_parts(data: str, treshold: int=3) -> list[str]:
    parts = data.split("||")
    if len(parts) < treshold:
        logging.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è choose_building")
        return
    return parts

def handle_file_selection(chat_id: int, data: str, app: Client):
    parts = preprocess_parts(data)
    category, file_name = parts[1], parts[2]
    folder = STORAGE_DIRS.get(category, "")
    real_name = find_real_filename(folder, file_name)
    if not check_file_detection(real_name, chat_id, app):
        logging.error(f"–§–∞–π–ª {real_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise ValueError(f"–§–∞–π–ª {real_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    process_selected_file(chat_id, category, real_name, app)

def handle_file_deletion(chat_id: int, data: str, app: Client):
    parts = preprocess_parts(data)
    category, file_name = parts[1], parts[2]
    folder = STORAGE_DIRS.get(category, "")
    real_name = find_real_filename(folder, file_name)
    if not check_file_detection(real_name, chat_id, app):
        logging.error(f"–§–∞–π–ª {real_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise ValueError(f"–§–∞–π–ª {real_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    try:
        os.remove(os.path.join(folder, real_name))
        # app.send_message(chat_id, "–§–∞–π–ª —É–¥–∞–ª—ë–Ω.")
        logging.info("–§–∞–π–ª —É–¥–∞–ª—ë–Ω.")
    except Exception as e:
        # app.send_message(chat_id, f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

    mm = app.send_message(chat_id, f"–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ '{category}':", reply_markup=files_menu_markup(category))
    register_menu_message(chat_id, mm.id)

def file_upload_handler(chat_id: int, data: str, app: Client):
    parts = preprocess_parts(data, 2)
    category = parts[1]
    # user_states[chat_id] = {"upload_category": category}
    user_states.setdefault(chat_id, {})["upload_category"] = category
    app.send_message(chat_id, f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ '{category}'.")

# --------------------------------------------------------------------------------------
#                        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (Callback)
# --------------------------------------------------------------------------------------

def handle_confirm_data(chat_id: int, app: Client):
    st = user_states.get(chat_id)
    if not st:
        return
    st["data_collected"] = True
    st["step"] = None

    mode = st.get("mode", "‚Äî")
    d = st.get("data", {})
    employee = d.get("employee", "‚Äî")
    place = d.get("place_name", "‚Äî")
    date_ = d.get("date", "‚Äî")
    city = d.get("city", "")
    zone_name = d.get("zone_name", "")
    number_audio = d.get("audio_number", "‚Äî")
    building_type = d.get("building_type", "‚Äî")
    client = d.get("client", "")

    msg = (
        f"**–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã**:\n\n"
        f"**–°—Ü–µ–Ω–∞—Ä–∏–π**: {mapping_scenario_names[mode]}\n"
        f"**–ù–æ–º–µ—Ä —Ñ–∞–π–ª–∞**: {number_audio}\n"
        f"**–î–∞—Ç–∞**: {date_}\n"
        f"**–§–ò–û –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞**: {employee}\n"
        f"**–ó–∞–≤–µ–¥–µ–Ω–∏–µ**: {place}\n"
        f"**–¢–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è**: {building_type}\n"
        f"**–ó–æ–Ω–∞**: {zone_name}\n"
    )

    if city:
        msg += f"**–ì–æ—Ä–æ–¥**: {city}\n\n"
    if client:
        msg += f"**–§–ò–û –ö–ª–∏–µ–Ω—Ç–∞**: {client}\n\n"

    msg += "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á—ë—Ç."

    app.send_message(chat_id, msg)
    if mode == "interview":
        app.send_message(chat_id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á—ë—Ç—ã:", reply_markup=interview_menu_markup())
    elif mode == "design":
        app.send_message(chat_id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á—ë—Ç—ã:", reply_markup=design_menu_markup())

def handle_back_to_confirm(chat_id: int, app: Client):
    st = user_states.get(chat_id)
    if not st:
        return
    st["step"] = "confirm_data"
    show_confirmation_menu(chat_id, st, app)

def handle_mode_selection(chat_id: int, mode: str, app: Client):
    """
    –í—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è ¬´–ò–Ω—Ç–µ—Ä–≤—å—é¬ª –∏–ª–∏ ¬´–î–∏–∑–∞–π–Ω¬ª
    """
        
    clear_active_menus(chat_id, app)
    user_states[chat_id] = {
        "mode": "interview" if mode == "mode_interview" else "design",
        "data": {}
    }
    st = user_states[chat_id]
    mm = app.send_message(chat_id, "üì¶ –ú–µ–Ω—é —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:", reply_markup=storage_menu_markup())
    register_menu_message(chat_id, mm.id)
    
def preprocess_report_without_buildings(chat_id: int, data: str, app: Client, building_name: str = "non-building"):
    validate_datas = []
    st = user_states.get(chat_id, {})
    mode = st.get("mode")
    data_ = st.get("data", {})
    data_["audio_file_name"] = audio_file_name_to_save

    validate_datas.append(mode)
    validate_datas.append(data_)

    check_valid_data(validate_datas, chat_id, app, "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
    
    data_["type_of_location"] = building_name

    try:
        run_analysis_with_spinner(
            chat_id=chat_id,
            processed_texts=processed_texts,
            app=app,
            callback_data=data,
            data=data_,
            transcription_text=transcription_text
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—á—ë—Ç–∞ {data}: {e}")
        # app.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

def preprocess_report_with_buildings(chat_id: int, data: str, app: Client):
    st = user_states.setdefault(chat_id, {})
    st["pending_report"] = data
    clear_active_menus(chat_id, app)
    mm = app.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è:", reply_markup=building_type_menu_markup())
    register_menu_message(chat_id, mm.id)

def handle_report(chat_id: int, callback_data : str, app: Client):
    if callback_data  in [
        "report_int_methodology",
        "report_int_links",
        "report_design_audit_methodology"
    ]:
        preprocess_report_without_buildings(chat_id, callback_data , app)

    elif callback_data  in [
        "report_int_general", 
        "report_int_specific",
        "report_design_compliance",
        "report_design_structured"
    ]:

        state = user_states.get(chat_id, {})
        data = state.get("data", {})
        building_type = data.get('building_type', "")
        valid_building_type = validate_building_type(building_type)
        if valid_building_type is None:
            preprocess_report_with_buildings(chat_id, callback_data , app)
        else:
            building_type = valid_building_type
            data['building_type'] = building_type
            preprocess_report_without_buildings(chat_id, callback_data , app, building_name=building_type)

def handle_assign_roles(chat_id: int, app: Client, mode: str, processed_texts: dict[int, str]):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª ¬´–ò–Ω—Ç–µ—Ä–≤—å—é¬ª ‚Äî —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ–º —Ä–æ–ª–∏
    if mode == "interview":
        transcript = processed_texts.get(chat_id)
        if transcript:
            msg_ = app.send_message(chat_id, "üîÑ –†–∞—Å—Å—Ç–∞–≤–ª—è—é —Ä–æ–ª–∏ –≤ –¥–∏–∞–ª–æ–≥–µ...")
            st_ev = threading.Event()
            sp_th = threading.Thread(target=run_loading_animation, args=(chat_id, msg_.id, st_ev, app))
            sp_th.start()
            try:
                # –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º —Ä–æ–ª–∏
                roles_ = assign_roles(transcript)
                processed_texts[chat_id] = roles_
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
                app.edit_message_text(chat_id, msg_.id, "‚úÖ –†–æ–ª–∏ –≤ –¥–∏–∞–ª–æ–≥–µ —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω—ã.")
                logging.info("‚úÖ –†–æ–ª–∏ –≤ –¥–∏–∞–ª–æ–≥–µ —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω—ã.")
                
            except Exception as e:
                logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–æ–ª–µ–π: {str(e)}")
                # app.edit_message_text(chat_id, msg_.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–æ–ª–µ–π: {str(e)}")
                
            finally:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
                st_ev.set()
                sp_th.join()

def handle_choose_building(chat_id: int, data: str, app: Client):
    validate_datas = []
    parts = preprocess_parts(data, 2) # 'hotel' / 'restaurant' / 'spa'
    short_name = parts[1]
    st = user_states.get(chat_id, {})
    pending_report = st.get("pending_report", None)
    mode = st.get("mode")
    data_ = st.get("data", {})
    data_["audio_file_name"] = audio_file_name_to_save

    validate_datas.append(mode)
    validate_datas.append(pending_report)
    validate_datas.append(data_)

    check_valid_data(validate_datas, chat_id, app, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –∫–∞–∫–æ–π –æ—Ç—á—ë—Ç –≤—ã —Ö–æ—Ç–µ–ª–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º short_name –∏–∑ callback –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    building_name = mapping_building_names.get(short_name, short_name)

    data_["type_of_location"] = building_name


    #–ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    run_analysis_with_spinner(
        chat_id=chat_id,
        processed_texts=processed_texts,
        app=app,
        callback_data=pending_report,
        data=data_,
        transcription_text=transcription_text
    )

    st["pending_report"] = None

def handle_toggle_deep(callback: CallbackQuery, app: Client):
    chat_id = callback.message.chat.id
    st = user_states.get(chat_id, {})
    st["deep_search"] = not st.get("deep_search", False)
    callback.message.edit_reply_markup(make_dialog_markup(st["deep_search"]))

def handle_menu_dialog(chat_id: int, app: Client):
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–µ–Ω—é
    clear_active_menus(chat_id, app)

    user_states[chat_id] = {"step": "dialog_mode", "deep_search": False}
    app.send_message(
        chat_id,
        "–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å?",
        reply_markup=make_dialog_markup(False)
    )

def register_handlers(app: Client):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã Pyrogram.
    """

    @app.on_message(filters.command("start"))
    def cmd_start(app: Client, message: Message):
        c_id = message.chat.id
        if c_id not in authorized_users:
            app.send_message(c_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        else:
            send_main_menu(c_id, app)

    @app.on_message(filters.text & ~filters.command("start"))
    def handle_auth_text(client: Client, message: Message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
        –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –∂–¥—ë–º –ø–∞—Ä–æ–ª—å.
        –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É —Ö–µ–Ω–¥–ª–µ—Ä—É (handle_authorized_text).
        """
        c_id = message.chat.id

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω?
        if c_id in authorized_users:
            handle_authorized_text(app, user_states, message)
            return
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        handle_unauthorized_user(authorized_users, message, app)  


    @app.on_message(filters.voice | filters.audio | filter_wav_document)
    def handle_audio_msg(app: Client, message: Message, tmpdir: str="/root/Vox/VoxPersona/temp_audio", max_size: int=2 * 1024 * 1024 * 1024):
        """
        –ü—Ä–∏—ë–º –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–ª–∏ –∞—É–¥–∏–æ-—Å–æ–æ–±—â–µ–Ω–∏—è, –¥–æ 2 –ì–ë.
        –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º ‚Üí assign_roles ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ processed_texts –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
        –ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ MinIO, –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–¥–∞–ª—è–µ—Ç—Å—è.
        """
        c_id = message.chat.id
        global audio_file_name_to_save
        global transcription_text
        st = user_states.get(c_id, {})
        mode =  st.get("mode")

        try:
            check_authorized(c_id, authorized_users)
        except ValueError as e:
            logging.exception(e)
            app.send_message(c_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
            return
        
        file_size = define_audio_file_params(message)

        try:
            check_audio_file_size(file_size, max_size, c_id, app)
        except ValueError as e:
            logging.exception(e)
            return

        os.makedirs(tmpdir, exist_ok=True)

        file_name = extract_audio_filename(message)
        path = os.path.join(tmpdir, file_name)

        msg_ = app.send_message(c_id, "üéôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        st_ev = threading.Event()
        sp_th = threading.Thread(target=run_loading_animation, args=(c_id, msg_.id, st_ev, app))
        sp_th.start()

        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            downloaded = app.download_media(message, file_name=path)
            audio_file_name_to_save = os.path.basename(downloaded)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π MinIOManager –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            metadata = {
                'user_id': str(c_id),
                'upload_timestamp': datetime.now().isoformat(),
                'file_type': 'audio',
                'processing_status': 'uploaded'
            }
            
            success = minio_manager.upload_audio_file(
                file_path=downloaded,
                object_name=file_name,
                metadata=metadata
            )
            
            if success:
                logging.info(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ MinIO.")
            else:
                raise MinIOUploadError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {file_name}")

            transcription_text = transcribe_audio_and_save(downloaded, c_id, processed_texts)

            app.edit_message_text(c_id, msg_.id, "‚úÖ –ê—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª ¬´–ò–Ω—Ç–µ—Ä–≤—å—é¬ª ‚Äî —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ–º —Ä–æ–ª–∏
            handle_assign_roles(c_id, app, mode, processed_texts)
            st["step"] = "inputing_fields"
            if message.caption:
                text = message.caption.strip()
                try:
                    parsed_data = parse_message_text(text, mode)
                    st["data"] = parsed_data
                    show_confirmation_menu(c_id, st, app)
                except Exception as e:
                    app.send_message(c_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é –ø–æ–ª—è.\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞:")
                    logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
                return
            else:
                app.send_message(c_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é –ø–æ–ª—è.\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞:")
        
        except (MinIOError, MinIOConnectionError, MinIOUploadError) as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ MinIO: {e}")
            app.edit_message_text(c_id, msg_.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
            send_main_menu(c_id, app)
            return
            
        except S3Error as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ MinIO.: {e}")
            app.edit_message_text(c_id, msg_.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ")
            send_main_menu(c_id, app)
            return

        except OpenAIPermissionError:
            logging.exception("üö´ –û—à–∏–±–∫–∞: Whisper –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–ª—é—á/—Ä–µ–≥–∏–æ–Ω).")
            # app.edit_message_text(c_id, msg_.id, "üö´ –û—à–∏–±–∫–∞: Whisper –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–ª—é—á/—Ä–µ–≥–∏–æ–Ω).")
            app.edit_message_text(c_id, msg_.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ")
            send_main_menu(c_id, app)
        except Exception as e:
            logging.exception(f"‚ùå–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}")
            # app.edit_message_text(c_id, msg_.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
            app.edit_message_text(c_id, msg_.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ")
            send_main_menu(c_id, app)
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
            st_ev.set()
            sp_th.join()

            delete_tmp_params(msg=msg_, tmp_file=downloaded, tmp_dir=tmpdir, client_id=c_id, app=app)

    @app.on_message(filters.document)
    def handle_document_msg(app: Client, message: Message):
        """
        –ü—Ä–∏—ë–º –¥–æ–∫—É–º–µ–Ω—Ç–∞. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "upload||category".
        """
        c_id = message.chat.id
        if c_id not in authorized_users:
            return

        doc: Document = message.document
        st = user_states.get(c_id, {})
        if "upload_category" in st:
            cat = st["upload_category"]
            fold = STORAGE_DIRS.get(cat, "")
            if not fold:
                # app.send_message(c_id, "–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.")
                logging.error("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.")
                return

            current_time = datetime.now().strftime("%d-%m-%Y-%H-%M-%S")
            orig_name = doc.file_name or f"file_{current_time}"
            sf = safe_filename(orig_name)
            path_ = os.path.join(fold, sf)

            try:
                app.download_media(message, file_name=path_)
                # app.send_message(c_id, f"‚úÖ –§–∞–π–ª '{orig_name}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ '{cat}'.")
                logging.info(f"‚úÖ –§–∞–π–ª '{orig_name}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ '{cat}'.")
            except Exception as e:
                logging.exception(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
                # app.send_message(c_id, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

            user_states.pop(c_id, None)
        else:
            app.send_message(c_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª¬ª –≤ –º–µ–Ω—é.")

        send_main_menu(c_id, app)
    
    @app.on_callback_query()
    def callback_query_handler(client: Client, callback: CallbackQuery):
        c_id = callback.message.chat.id
        data = callback.data
        try:
            callback.answer()
        except:
            pass

        try:
            # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            if data == "menu_main":
                handle_main_menu(c_id, app)
            elif data == "menu_dialog":
                handle_menu_dialog(c_id, app)
            elif data == "menu_help":
                handle_help_menu(c_id, app)
            elif data == "menu_storage":
                handle_menu_storage(c_id, app)
            # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤
            elif data.startswith("view||"):
                handle_view_files(c_id, data, app)

            elif data.startswith("select||"):
                handle_file_selection(c_id, data, app)

            elif data.startswith("delete||"):
                handle_file_deletion(c_id, data, app)

            elif data.startswith("upload||"):
                file_upload_handler(c_id, data, app)

            elif data == "toggle_deep":
                handle_toggle_deep(callback, app)
                return

            # –í—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è
            elif data in ["mode_interview", "mode_design"]:
                handle_mode_selection(c_id, data, app)

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            elif data == "confirm_data":
                handle_confirm_data(c_id, app)
            elif data == "edit_data":
                show_edit_menu(c_id, user_states.get(c_id, {}), app)

            elif data == "back_to_confirm":
                handle_back_to_confirm(c_id, app)

            elif data.startswith("edit_"):
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                field = data.split("edit_")[1]
                handle_edit_field(c_id, field, app)

            #–û—Ç—á–µ—Ç—ã
            elif data in REPORT_MAPPING.keys():
                handle_report(c_id, data, app)

            # # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–¥–∞–Ω–∏—è:
            elif data.startswith("choose_building||"):
                handle_choose_building(c_id, data, app)
        
        except ValueError as ve:
            logging.exception(ve)
            return

        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –≤ callback_query_handler: {e}")

