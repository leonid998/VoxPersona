from typing import Any, cast
from datetime import datetime, date
import os
import re
import threading
import logging
import asyncio
from pyrogram import Client, filters
from pyrogram.types import CallbackQuery, Message, Document, InlineKeyboardMarkup, InlineKeyboardButton
from minio.error import S3Error

from src.minio_manager import get_minio_manager, MinIOError, MinIOConnectionError, MinIOUploadError

from config import (
    processed_texts,
    user_states,
    authorized_users,
    STORAGE_DIRS
)
from utils import run_loading_animation, openai_audio_filter, get_username_from_chat
from constants import COMMAND_HISTORY, COMMAND_STATS, COMMAND_REPORTS
from conversation_manager import conversation_manager
from md_storage import md_storage_manager
from validators import validate_date_format, check_audio_file_size, check_state, check_file_detection, check_valid_data, check_authorized, validate_building_type
from parser import parse_message_text, parse_building_type, parse_zone, parse_file_number, parse_place_name, parse_city, parse_name

from storage import delete_tmp_params, safe_filename, find_real_filename
from datamodels import mapping_building_names, REPORT_MAPPING, mapping_scenario_names

from markups import (
    help_menu_markup,
    storage_menu_markup,
    system_menu_markup,
    chats_menu_markup,
    chats_menu_markup_dynamic,
    interview_or_design_menu,
    interview_menu_markup,
    design_menu_markup,
    building_type_menu_markup,
    make_dialog_markup,
    edit_menu_markup
)

from menus import (
    send_main_menu,
    files_menu_markup,
    show_confirmation_menu,
    show_edit_menu
)
from menu_manager import send_menu
from message_tracker import track_and_send
from storage import process_stored_file

from analysis import (
    assign_roles
)

from run_analysis import run_analysis_with_spinner, run_dialog_mode

from audio_utils import extract_audio_filename, define_audio_file_params, transcribe_audio_and_save
from auth_utils import handle_unauthorized_user

from openai import PermissionDeniedError as OpenAIPermissionError

# === –ú–£–õ–¨–¢–ò–ß–ê–¢–´: –ò–º–ø–æ—Ä—Ç—ã ===
from conversation_manager import conversation_manager
from conversation_handlers import (
    ensure_active_conversation,
    handle_new_chat,
    handle_chat_actions,
    handle_switch_chat_request,
    handle_switch_chat_confirm,
    handle_rename_chat_request,
    handle_rename_chat_input,
    handle_delete_chat_request,
    handle_delete_chat_confirm
)
# === –ö–û–ù–ï–¶ –ú–£–õ–¨–¢–ò–ß–ê–¢–´ ===

# === –ê–í–¢–û–û–¢–ü–†–ê–í–ö–ê –§–ê–ô–õ–û–í ===
from file_sender import auto_send_history_file, auto_send_reports_file
# === –ö–û–ù–ï–¶ –ê–í–¢–û–û–¢–ü–†–ê–í–ö–ê –§–ê–ô–õ–û–í ===

# Initialize MinIO manager
minio_manager = get_minio_manager()

filter_wav_document = filters.create(openai_audio_filter)

audio_file_name_to_save = ""
transcription_text = ""

rags = {}
rags_lock = asyncio.Lock()


async def set_rags(new_rags: dict[str, Any]) -> None:
    """Allow external modules to update loaded RAGs."""
    global rags
    async with rags_lock:
        rags = new_rags

async def ask_client(data: dict[str, Any], text: str, state: dict[str, Any], chat_id: int, app: Client):
    data["client"] = parse_name(text)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    state["step"] = "confirm_data"
    await show_confirmation_menu(chat_id, state, app)

def ask_employee(data: dict[str, Any], text: str, state: dict[str, Any], chat_id: int, app: Client):
    data["employee"] = parse_name(text)
    state["step"] = "ask_place_name"
    app.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è:")

def ask_building_type(data: dict[str, Any], text: str, state: dict[str, Any], chat_id: int, app: Client):
    data["building_type"] = parse_building_type(text)
    state["step"] = "ask_zone"
    app.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∑–æ–Ω—É (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å) –∏–ª–∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ -:")

def ask_zone(data: dict[str, Any], text: str, mode: str, state: dict[str, Any], chat_id: int, app: Client):
    data['zone_name'] = parse_zone(text)
    if mode == "interview":
        # –î–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é —Å–µ–π—á–∞—Å –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥ ‚Äî —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä
        state["step"] = "ask_client"
        app.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞:")
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –¥–∏–∑–∞–π–Ω ‚Äî –Ω–∞–¥–æ —Å–ø—Ä–æ—Å–∏—Ç—å –≥–æ—Ä–æ–¥
        state["step"] = "ask_city"
        app.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")

def ask_place_name(data: dict[str, Any], text: str, state: dict[str, Any], chat_id: int, app: Client):
    data["place_name"] = parse_place_name(text)
    state["step"] = "ask_building_type"
    app.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è:")

def ask_date(data: dict[str, Any], text: str, state: dict[str, Any], chat_id: int, app: Client):
    if not validate_date_format(text):
        app.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-01-01).")
        return
    data["date"] = text
    state["step"] = "ask_employee"
    app.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")

async def ask_city(data: dict[str, Any], text: str, state: dict[str, Any], chat_id: int, app: Client):
    data["city"] = parse_city(text)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    state["step"] = "confirm_data"
    await show_confirmation_menu(chat_id, state, app)

def ask_audio_number(data: dict[str, Any], text: str, state: dict[str, Any], chat_id: int, app: Client):
    """
    –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞.
    """
    try:
        audio_number = parse_file_number(text)
        data["audio_number"] = audio_number
        state["step"] = "ask_date"
        app.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-01-01):")
    except ValueError:
        app.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

# --------------------------------------------------------------------------------------
#                                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π
# --------------------------------------------------------------------------------------

async def handle_edit_field(chat_id: int, field: str, app: Client):
    """
    –°—Ç–∞–≤–∏—Ç —à–∞–≥ (step) –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—è, –∑–∞—Ç–µ–º –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.

    ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç track_and_send –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤.
    """
    st = user_states.get(chat_id, {})
    if not st:
        logging.error("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    st["previous_step"] = st.get("step")
    st["step"] = f"edit_{field}"
    mode = st.get("mode")
    edit_fields = {
        "audio_number": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞:",
        "date": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-01-01):",
        "employee": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
        "place_name": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è:",
        "building_type": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è",
        "zone_name": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–æ–Ω—É (–µ—Å–ª–∏ –µ—Å—Ç—å)"
    }

    if mode == "design":
        edit_fields["city"] = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:"
    else:
        edit_fields["client"] = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –ö–ª–∏–µ–Ω—Ç–∞"

    prompt_text = edit_fields.get(field, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    cancel_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_confirm")]
    ])

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º track_and_send –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
    await track_and_send(
        chat_id=chat_id,
        app=app,
        text=prompt_text,
        reply_markup=cancel_markup,
        message_type="input_request"
    )


async def handle_history_command(message: Message, app: Client) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history."""
    chat_id = message.chat.id
    username = await get_username_from_chat(chat_id, app)

    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ –∫–æ–º–∞–Ω–¥—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        text = message.text.strip()
        parts = text.split()
        target_date = None

        if len(parts) > 1:
            date_str = parts[1]
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
            date_formats = ["%Y-%m-%d", "%d.%m.%Y", "%d/%m/%Y"]

            for fmt in date_formats:
                try:
                    target_date = datetime.strptime(date_str, fmt).date()
                    break
                except ValueError:
                    continue

            if target_date is None:
                app.send_message(
                    chat_id,
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: YYYY-MM-DD, DD.MM.YYYY –∏–ª–∏ DD/MM/YYYY\n"
                    "–ü—Ä–∏–º–µ—Ä: `/history 2025-01-15`"
                )
                return

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –∏—Å—Ç–æ—Ä–∏—é
        active_conversation_id = conversation_manager.get_active_conversation_id(chat_id)
        if not active_conversation_id:
            app.send_message(chat_id, "üì≠ –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = conversation_manager.get_messages(chat_id, active_conversation_id, limit=20)
        if not messages:
            app.send_message(chat_id, "üì≠ –í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        conversation = conversation_manager.load_conversation(chat_id, active_conversation_id)
        result = f"üìú –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ \"{conversation.metadata.title}\"\n\n"

        for msg in messages:
            timestamp = msg.timestamp[:16].replace('T', ' ')  # 2025-10-05 12:30
            role = "üë§ –í—ã" if msg.type == "user_question" else "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
            preview = msg.text[:100] + "..." if len(msg.text) > 100 else msg.text
            file_marker = " üìé" if msg.sent_as == "file" else ""
            result += f"**{role}** ({timestamp}){file_marker}\n{preview}\n\n"

        result += f"üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {conversation.metadata.message_count}\n"
        result += f"üìù –¢–æ–∫–µ–Ω–æ–≤: {conversation.metadata.total_tokens:,}"

        app.send_message(chat_id, result, )

    except Exception as e:
        logging.error(f"Error handling history command: {e}")
        app.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.")


async def handle_stats_command(message: Message, app: Client) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats."""
    chat_id = message.chat.id

    try:
        stats_text = conversation_manager.format_user_stats_for_display(chat_id)
        await app.send_message(chat_id, stats_text, )

    except Exception as e:
        logging.error(f"Error handling stats command: {e}")
        await app.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


async def handle_reports_command(message: Message, app: Client) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reports."""
    chat_id = message.chat.id

    try:
        reports = md_storage_manager.get_user_reports(chat_id, limit=10)

        if not reports:
            app.send_message(
                chat_id,
                "üìÅ **–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã:**\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.",

            )
            return

        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç—á–µ—Ç–∞–º–∏
        keyboard = []

        for i, report in enumerate(reports[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
            timestamp = datetime.fromisoformat(report.timestamp).strftime("%d.%m %H:%M")
            question_preview = report.question[:40] + "..." if len(report.question) > 40 else report.question
            search_icon = "‚ö°" if report.search_type == "fast" else "üîç"

            button_text = f"{search_icon} {timestamp}: {question_preview}"
            callback_data = f"send_report||{report.file_path}"

            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

        keyboard.append([InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—á–µ—Ç—ã", callback_data="show_all_reports")])

        reports_text = md_storage_manager.format_user_reports_for_display(chat_id)

        await send_menu(
            chat_id=chat_id,
            app=app,
            text=reports_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logging.error(f"Error handling reports command: {e}")
        app.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤.")


def handle_report_callback(callback_query: CallbackQuery, app: Client) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤."""
    chat_id = callback_query.message.chat.id
    data = callback_query.data

    try:
        if data.startswith("send_report||"):
            relative_path = data.split("send_report||", 1)[1]

            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            file_path = md_storage_manager.get_report_file_path(relative_path)

            if file_path and file_path.exists():
                app.send_document(
                    chat_id,
                    str(file_path),
                    caption="üìÑ –í–∞—à –æ—Ç—á–µ—Ç"
                )
                app.answer_callback_query(callback_query.id, "‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            else:
                app.answer_callback_query(
                    callback_query.id,
                    "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    show_alert=True
                )

        elif data == "show_all_reports":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤
            reports_text = md_storage_manager.format_user_reports_for_display(chat_id)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            back_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –æ—Ç—á–µ—Ç–∞–º", callback_data="show_my_reports")]
            ])

            app.edit_message_text(
                chat_id,
                callback_query.message.id,
                reports_text,
                reply_markup=back_keyboard
            )
            app.answer_callback_query(callback_query.id)

    except Exception as e:
        logging.error(f"Error handling report callback: {e}")
        app.answer_callback_query(
            callback_query.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
            show_alert=True
        )

async def handle_authorized_text(app: Client, user_states: dict[int, dict[str, Any]], message: Message):
    """
    –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –≤ —Ç.—á. –ª–æ–≥–∏–∫—É –ø–æ —à–∞–≥–∞–º (—Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é/–¥–∏–∑–∞–π–Ω–∞).
    """
    c_id = message.chat.id
    text_ = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∏—Å—Ç–æ—Ä–∏–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç–æ–≤
    if text_.startswith(COMMAND_HISTORY):
        await handle_history_command(message, app)
        return
    elif text_.startswith(COMMAND_STATS):
        await handle_stats_command(message, app)
        return
    elif text_.startswith(COMMAND_REPORTS):
        await handle_reports_command(message, app)
        return

    # === –ú–£–õ–¨–¢–ò–ß–ê–¢–´: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞ ===
    if c_id in user_states and user_states[c_id].get("step") == "renaming_chat":
        await handle_rename_chat_input(c_id, text_, app)
        return
    # === –ö–û–ù–ï–¶ –ú–£–õ–¨–¢–ò–ß–ê–¢–´ ===


    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    st = user_states.get(c_id)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {c_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç '{text_[:50]}...'. –°–æ—Å—Ç–æ—è–Ω–∏–µ: {st}")

    # === –ü–†–û–í–ï–†–ö–ê –†–ï–ñ–ò–ú–ê –î–ò–ê–õ–û–ì–ê ===
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±—Ä–∞—Ç—å —á–∞—Ç –∏ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
    if not st or st.get("step") != "dialog_mode":
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {c_id} –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–∂–∏–º–∞. st={st}")
        await app.send_message(
            c_id,
            "üìå –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:\n\n"
            "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π\n"
            "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ (–±—ã—Å—Ç—Ä—ã–π –∏–ª–∏ –≥–ª—É–±–æ–∫–∏–π)\n"
            "3Ô∏è‚É£ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å\n\n"
            "–û—Ç–∫—Ä–æ–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∏–∂–µ üëá"
        )
        await send_main_menu(c_id, app)
        return
    # === –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò ===

    # === –ú–£–õ–¨–¢–ò–ß–ê–¢–´: –ü–æ–ª—É—á–µ–Ω–∏–µ conversation_id ===
    conversation_id = st.get("conversation_id")
    if not conversation_id:
        # Fallback: —Å–æ–∑–¥–∞–µ–º —á–∞—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        username = await get_username_from_chat(c_id, app)
        conversation_id = ensure_active_conversation(c_id, username, text_)
        st["conversation_id"] = conversation_id
        user_states[c_id] = st  # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ
    # === –ö–û–ù–ï–¶ –ú–£–õ–¨–¢–ò–ß–ê–¢–´ ===


    if st.get("step") == "dialog_mode":
        deep = st.get("deep_search", False)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-—Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ MessageTracker
        msg = await track_and_send(
            chat_id=c_id,
            app=app,
            text="‚è≥ –î—É–º–∞—é...",
            message_type="status_message"
        )
        st_ev = threading.Event()
        sp_th = threading.Thread(target=run_loading_animation, args=(c_id, msg.id, st_ev, app))
        sp_th.start()
        try:
            if not rags:
                await app.send_message(c_id, "üîÑ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –µ—â—ë –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            else:
                await run_dialog_mode(
                    message=message,
                    app=app,
                    deep_search=deep,
                    rags=rags,
                    conversation_id=conversation_id
                )
            return
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞: {e}")
            await app.send_message(c_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        finally:
            st_ev.set()
            sp_th.join()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if st.get("step", "").startswith("edit_"):
        step = st["step"]
        field = st["step"].split("edit_")[1]
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
        if field == "date" and not validate_date_format(text_):
            app.send_message(c_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        data_ = st.setdefault("data", {})
        data_[field] = text_

        previous_step = st.pop("previous_step", "confirm_data")
        st["step"] = previous_step

        await show_confirmation_menu(c_id, st, app)
        return

    mode = st.get("mode")        # 'interview' –∏–ª–∏ 'design'
    if mode is None:
        # –ï—Å–ª–∏ mode –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        user_states.pop(c_id, None)
        app.send_message(c_id, "–†–µ–∂–∏–º –Ω–µ –≤—ã–±—Ä–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start.")
        send_main_menu(c_id, app)
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ mode —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
    if not isinstance(mode, str):
        user_states.pop(c_id, None)
        app.send_message(c_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start.")
        send_main_menu(c_id, app)
        return

    step = st.get("step")        # –Ω–∞–ø—Ä–∏–º–µ—Ä, 'ask_employee'
    data_ = st.setdefault("data", {})

    if st.get("step") == "inputing_fields":
        ask_audio_number(data_, text_, st, c_id, app)
        return

    if step == "ask_employee":
        ask_employee(data_, text_, st, c_id, app)
        return

    elif step == "ask_audio_number":
        ask_audio_number(data_, text_, st, c_id, app)
        return

    elif step == "ask_place_name":
        ask_place_name(data_, text_, st, c_id, app)
        return

    elif step == "ask_date":
        ask_date(data_, text_, st, c_id, app)

    elif step == "ask_city":
        await ask_city(data_, text_, st, c_id, app)
        return

    elif step == "ask_building_type":
        ask_building_type(data_, text_, st, c_id, app)
        return

    elif step == "ask_zone":
        ask_zone(data_, text_, mode, st, c_id, app)

    elif step == "ask_client":
        await ask_client(data_, text_, st, c_id, app)
    else:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        user_states.pop(c_id, None)
        app.send_message(c_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start.")
        send_main_menu(c_id, app)

# =========================================================================
#  Callback-queries
# =========================================================================

async def handle_help_menu(chat_id: int, app: Client):
    kb, txt = help_menu_markup()
    await send_menu(chat_id, app, txt, kb)

async def handle_menu_storage(chat_id: int, app: Client):
    await send_menu(chat_id, app, "–ß—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º?:", interview_or_design_menu())

async def handle_menu_system(chat_id: int, app: Client):
    await send_menu(chat_id, app, "‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", system_menu_markup())

async def handle_menu_chats(chat_id: int, app: Client):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —á–∞—Ç–æ–≤ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Å–ø–∏—Å–∫–æ–º."""
    await send_menu(
        chat_id,
        app,
        "üì± –ò—Å—Ç–æ—Ä–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–æ–≤:",
        chats_menu_markup_dynamic(chat_id)
    )

async def handle_main_menu(chat_id: int, app: Client):
    await send_main_menu(chat_id, app)

async def handle_show_stats(chat_id: int, app: Client):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–æ–≤"""
    try:
        stats_text = conversation_manager.format_user_stats_for_display(chat_id)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –º–µ–Ω—é —á–∞—Ç–æ–≤ –≤–Ω–∏–∑—É
        await send_menu(
            chat_id=chat_id,
            app=app,
            text=stats_text,
            reply_markup=chats_menu_markup_dynamic(chat_id)
        )
    except Exception as e:
        logging.error(f"Error showing stats: {e}")
        await send_menu(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            reply_markup=chats_menu_markup_dynamic(chat_id)
        )

async def handle_show_my_reports(chat_id: int, app: Client):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        reports = md_storage_manager.get_user_reports(chat_id, limit=10)

        if not reports:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ —Å –º–µ–Ω—é —á–∞—Ç–æ–≤ –≤–Ω–∏–∑—É
            await send_menu(
                chat_id=chat_id,
                app=app,
                text="üìÅ **–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã:**\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.",
                reply_markup=chats_menu_markup_dynamic(chat_id)
            )
            return

        keyboard = []
        for i, report in enumerate(reports[:5], 1):
            timestamp = datetime.fromisoformat(report.timestamp).strftime("%d.%m %H:%M")
            question_preview = report.question[:40] + "..." if len(report.question) > 40 else report.question
            search_icon = "‚ö°" if report.search_type == "fast" else "üîç"

            button_text = f"{search_icon} {timestamp}: {question_preview}"
            callback_data = f"send_report||{report.file_path}"

            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

        keyboard.append([InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—á–µ—Ç—ã", callback_data="show_all_reports")])

        reports_text = md_storage_manager.format_user_reports_for_display(chat_id)

        await send_menu(
            chat_id=chat_id,
            app=app,
            text=reports_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logging.error(f"Error showing reports: {e}")
        await send_menu(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤.",
            reply_markup=chats_menu_markup_dynamic(chat_id)
        )

async def handle_view_files(chat_id: int, data, app: Client):
    parts = data.split("||")
    if len(parts) < 2:
        return
    cat = parts[1]
    await send_menu(chat_id, app, f"–§–∞–π–ª—ã –≤ '{cat}':", files_menu_markup(cat))

async def process_selected_file(chat_id: int, category: str, filename: str, app: Client):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-—Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ MessageTracker
    msg = await track_and_send(
        chat_id=chat_id,
        app=app,
        text="‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...",
        message_type="status_message"
    )
    stop_event = threading.Event()
    spinner_thread = threading.Thread(target=run_loading_animation, args=(chat_id, msg.id, stop_event, app))
    spinner_thread.start()

    try:
        result = process_stored_file(category, filename, chat_id, app)
        if result is not None:
            processed_texts[chat_id] = result
            # app.edit_message_text(chat_id, msg.id, "‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
            logging.info("‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
    finally:
        stop_event.set()
        spinner_thread.join()
        await app.delete_messages(chat_id, msg.id)

    # app.send_message(chat_id, "–ß—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–ª—å—à–µ?", reply_markup=interview_or_design_menu())
    # send_main_menu(chat_id, app)


def preprocess_parts(data: str, treshold: int=3) -> list[str] | None:
    parts = data.split("||")
    if len(parts) < treshold:
        logging.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è choose_building")
        return None
    return parts

async def handle_file_selection(chat_id: int, data: str, app: Client):
    parts = preprocess_parts(data)
    if parts is None:
        await app.send_message(chat_id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return
    category, file_name = parts[1], parts[2]
    folder = STORAGE_DIRS.get(category, "")
    real_name = find_real_filename(folder, file_name)
    if not check_file_detection(real_name, chat_id, app):
        logging.error(f"–§–∞–π–ª {real_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise ValueError(f"–§–∞–π–ª {real_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    await process_selected_file(chat_id, category, real_name, app)

async def handle_file_deletion(chat_id: int, data: str, app: Client):
    parts = preprocess_parts(data)
    if parts is None:
        app.send_message(chat_id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return
    category, file_name = parts[1], parts[2]
    folder = STORAGE_DIRS.get(category, "")
    real_name = find_real_filename(folder, file_name)
    if not check_file_detection(real_name, chat_id, app):
        logging.error(f"–§–∞–π–ª {real_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise ValueError(f"–§–∞–π–ª {real_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    try:
        os.remove(os.path.join(folder, real_name))
        logging.info("–§–∞–π–ª —É–¥–∞–ª—ë–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

    await send_menu(
        chat_id=chat_id,
        app=app,
        text=f"–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ '{category}':",
        reply_markup=files_menu_markup(category)
    )

async def file_upload_handler(chat_id: int, data: str, app: Client):
    parts = preprocess_parts(data, 2)
    if parts is None:
        await app.send_message(chat_id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return
    category = parts[1]
    # user_states[chat_id] = {"upload_category": category}
    user_states.setdefault(chat_id, {})["upload_category"] = category
    await app.send_message(chat_id, f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ '{category}'.")

# --------------------------------------------------------------------------------------
#                        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (Callback)
# --------------------------------------------------------------------------------------

async def handle_confirm_data(chat_id: int, app: Client):
    st = user_states.get(chat_id)
    if not st:
        return
    st["data_collected"] = True
    st["step"] = None

    mode = st.get("mode", "‚Äî")
    d = cast(dict[str, Any], st.get("data", {}))
    employee = d.get("employee", "‚Äî")
    place = d.get("place_name", "‚Äî")
    date_ = d.get("date", "‚Äî")
    city = d.get("city", "")
    zone_name = d.get("zone_name", "")
    number_audio = d.get("audio_number", "‚Äî")
    building_type = d.get("building_type", "‚Äî")
    client = d.get("client", "")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ mode —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ª–æ–≤–∞—Ä—é
    scenario_name = mapping_scenario_names.get(mode, "‚Äî") if isinstance(mode, str) else "‚Äî"

    msg = (
        f"**–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã**:\n\n"
        f"**–°—Ü–µ–Ω–∞—Ä–∏–π**: {scenario_name}\n"
        f"**–ù–æ–º–µ—Ä —Ñ–∞–π–ª–∞**: {number_audio}\n"
        f"**–î–∞—Ç–∞**: {date_}\n"
        f"**–§–ò–û –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞**: {employee}\n"
        f"**–ó–∞–≤–µ–¥–µ–Ω–∏–µ**: {place}\n"
        f"**–¢–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è**: {building_type}\n"
        f"**–ó–æ–Ω–∞**: {zone_name}\n"
    )

    if city:
        msg += f"**–ì–æ—Ä–æ–¥**: {city}\n\n"
    if client:
        msg += f"**–§–ò–û –ö–ª–∏–µ–Ω—Ç–∞**: {client}\n\n"

    msg += "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á—ë—Ç—ã:**"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    markup = None
    if mode == "interview":
        markup = interview_menu_markup()
    elif mode == "design":
        markup = design_menu_markup()

    if markup:
        await send_menu(
            chat_id=chat_id,
            app=app,
            text=msg,
            reply_markup=markup
        )

async def handle_back_to_confirm(chat_id: int, app: Client):
    st = user_states.get(chat_id)
    if not st:
        return
    st["step"] = "confirm_data"
    await show_confirmation_menu(chat_id, st, app)

async def handle_mode_selection(chat_id: int, mode: str, app: Client):
    """
    –í—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è ¬´–ò–Ω—Ç–µ—Ä–≤—å—é¬ª –∏–ª–∏ ¬´–î–∏–∑–∞–π–Ω¬ª
    """

    user_states[chat_id] = {
        "mode": "interview" if mode == "mode_interview" else "design",
        "data": {}
    }
    st = user_states[chat_id]
    await send_menu(chat_id, app, "üì¶ –ú–µ–Ω—é —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:", storage_menu_markup())

async def preprocess_report_without_buildings(chat_id: int, data: str, app: Client, building_name: str = "non-building"):
    validate_datas = []
    st = user_states.get(chat_id, {})
    mode = st.get("mode")
    data_ = cast(dict[str, Any], st.get("data", {}))

    data_["audio_file_name"] = audio_file_name_to_save

    validate_datas.append(mode)
    validate_datas.append(data_)

    check_valid_data(validate_datas, chat_id, app, "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")

    data_["type_of_location"] = building_name

    try:
        await run_analysis_with_spinner(
            chat_id=chat_id,
            processed_texts=processed_texts,
            app=app,
            callback_data=data,
            data=data_,
            transcription_text=transcription_text
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—á—ë—Ç–∞ {data}: {e}")
        # app.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"))

async def preprocess_report_with_buildings(chat_id: int, data: str, app: Client):
    st = user_states.setdefault(chat_id, {})
    st["pending_report"] = data
    await send_menu(chat_id, app, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è:", building_type_menu_markup())

async def handle_report(chat_id: int, callback_data : str, app: Client):
    if callback_data  in [
        "report_int_methodology",
        "report_int_links",
        "report_design_audit_methodology"
    ]:
        await preprocess_report_without_buildings(chat_id, callback_data , app)

    elif callback_data  in [
        "report_int_general",
        "report_int_specific",
        "report_design_compliance",
        "report_design_structured"
    ]:

        state = user_states.get(chat_id, {})
        data = cast(dict[str, Any], state.get("data", {}))
        building_type = data.get('building_type', "")
        valid_building_type = validate_building_type(building_type)
        if valid_building_type is None:
            await preprocess_report_with_buildings(chat_id, callback_data , app)
        else:
            building_type = valid_building_type
            data['building_type'] = building_type
            preprocess_report_without_buildings(chat_id, callback_data , app, building_name=building_type)

def handle_assign_roles(chat_id: int, app: Client, mode: str, processed_texts: dict[int, str]):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª ¬´–ò–Ω—Ç–µ—Ä–≤—å—é¬ª ‚Äî —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ–º —Ä–æ–ª–∏
    if mode == "interview":
        transcript = processed_texts.get(chat_id)
        if transcript:
            msg_ = app.send_message(chat_id, "üîÑ –†–∞—Å—Å—Ç–∞–≤–ª—è—é —Ä–æ–ª–∏ –≤ –¥–∏–∞–ª–æ–≥–µ...")
            st_ev = threading.Event()
            sp_th = threading.Thread(target=run_loading_animation, args=(chat_id, msg_.id, st_ev, app))
            sp_th.start()
            try:
                # –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º —Ä–æ–ª–∏
                roles_ = assign_roles(transcript)
                processed_texts[chat_id] = roles_

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
                app.edit_message_text(chat_id, msg_.id, "‚úÖ –†–æ–ª–∏ –≤ –¥–∏–∞–ª–æ–≥–µ —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω—ã.")
                logging.info("‚úÖ –†–æ–ª–∏ –≤ –¥–∏–∞–ª–æ–≥–µ —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω—ã.")

            except Exception as e:
                logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–æ–ª–µ–π: {str(e)}")
                # app.edit_message_text(chat_id, msg_.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–æ–ª–µ–π: {str(e)}")

            finally:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
                st_ev.set()
                sp_th.join()

async def handle_choose_building(chat_id: int, data: str, app: Client):
    validate_datas = []
    parts = preprocess_parts(data, 2) # 'hotel' / 'restaurant' / 'spa'
    if parts is None:
        app.send_message(chat_id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return
    short_name = parts[1]
    st = user_states.get(chat_id, {})
    pending_report = st.get("pending_report", None)
    mode = st.get("mode")
    data_ = cast(dict[str, Any], st.get("data", {}))

    if not isinstance(pending_report, str):
        logging.error("pending_report –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π")
        return
    if not isinstance(mode, str):
        logging.error("mode –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π")
        return

    data_["audio_file_name"] = audio_file_name_to_save

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º short_name –∏–∑ callback –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    building_name = mapping_building_names.get(short_name, short_name)

    data_["type_of_location"] = building_name

    validate_datas.append(mode)
    validate_datas.append(pending_report)
    validate_datas.append(data_)

    check_valid_data(validate_datas, chat_id, app, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –∫–∞–∫–æ–π –æ—Ç—á—ë—Ç –≤—ã —Ö–æ—Ç–µ–ª–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")

    #–ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    await run_analysis_with_spinner(
        chat_id=chat_id,
        processed_texts=processed_texts,
        app=app,
        callback_data=pending_report,
        data=data_,
        transcription_text=transcription_text
    )

    st["pending_report"] = None

async def handle_mode_fast(callback: CallbackQuery, app: Client):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞."""
    chat_id = callback.message.chat.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    st = user_states.get(chat_id, {})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
    if "step" not in st or "conversation_id" not in st:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ —Å–±—Ä–æ—à–µ–Ω–æ - –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        username = await get_username_from_chat(chat_id, app)
        conversation_id = ensure_active_conversation(chat_id, username)
        st = {
            "conversation_id": conversation_id,
            "step": "dialog_mode",
            "deep_search": False
        }
    else:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ - –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º deep_search
        st["deep_search"] = False

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[chat_id] = st

    await callback.answer("‚ö° –í—ã–±—Ä–∞–Ω –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã–±—Ä–∞–ª –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫. –°–æ—Å—Ç–æ—è–Ω–∏–µ: {st}")

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await send_menu(
        chat_id,
        app,
        "‚úÖ –†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: **–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫**\n\n"
        "–¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å üëá",
        make_dialog_markup()
    )


async def handle_mode_deep(callback: CallbackQuery, app: Client):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–ª—É–±–æ–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è."""
    chat_id = callback.message.chat.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    st = user_states.get(chat_id, {})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
    if "step" not in st or "conversation_id" not in st:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ —Å–±—Ä–æ—à–µ–Ω–æ - –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        username = await get_username_from_chat(chat_id, app)
        conversation_id = ensure_active_conversation(chat_id, username)
        st = {
            "conversation_id": conversation_id,
            "step": "dialog_mode",
            "deep_search": True
        }
    else:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ - –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º deep_search
        st["deep_search"] = True

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[chat_id] = st

    await callback.answer("üî¨ –í—ã–±—Ä–∞–Ω–æ –≥–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã–±—Ä–∞–ª –≥–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ. –°–æ—Å—Ç–æ—è–Ω–∏–µ: {st}")

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await send_menu(
        chat_id,
        app,
        "‚úÖ –†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: **–ì–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ**\n\n"
        "–¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å üëá",
        make_dialog_markup()
    )

async def handle_menu_dialog(chat_id: int, app: Client):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
    st = user_states.get(chat_id, {})

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º conversation_id –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
    conversation_id = st.get("conversation_id")
    if not conversation_id:
        username = await get_username_from_chat(chat_id, app)
        conversation_id = ensure_active_conversation(chat_id, username)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    user_states[chat_id] = {
        "conversation_id": conversation_id,
        "step": "dialog_mode",
        "deep_search": st.get("deep_search", False)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∂–∏–º
    }

    await send_menu(
        chat_id,
        app,
        "–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å?",
        make_dialog_markup()
    )

def register_handlers(app: Client):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã Pyrogram.
    """

    @app.on_message(filters.command("start"))  # type: ignore[misc,reportUntypedFunctionDecorator]
    async def cmd_start(app: Client, message: Message):
        c_id = message.chat.id
        if c_id not in authorized_users:
            await app.send_message(c_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        else:
            # –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –æ—Ç—á–µ—Ç–æ–≤
            await auto_send_history_file(c_id, app)
            await auto_send_reports_file(c_id, app)

            await send_main_menu(c_id, app)

    @app.on_message(filters.text & ~filters.command("start"))  # type: ignore[misc,reportUntypedFunctionDecorator]
    async def handle_auth_text(client: Client, message: Message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
        –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –∂–¥—ë–º –ø–∞—Ä–æ–ª—å.
        –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É —Ö–µ–Ω–¥–ª–µ—Ä—É (handle_authorized_text).
        """
        c_id = message.chat.id

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω?
        if c_id in authorized_users:
            await handle_authorized_text(app, user_states, message)
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        await handle_unauthorized_user(authorized_users, message, app)


    @app.on_message(filters.voice | filters.audio | filter_wav_document)  # type: ignore[misc,reportUntypedFunctionDecorator]
    async def handle_audio_msg(app: Client, message: Message, tmpdir: str="/root/Vox/VoxPersona/temp_audio", max_size: int=2 * 1024 * 1024 * 1024):
        """
        –ü—Ä–∏—ë–º –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–ª–∏ –∞—É–¥–∏–æ-—Å–æ–æ–±—â–µ–Ω–∏—è, –¥–æ 2 –ì–ë.
        –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º ‚Üí assign_roles ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ processed_texts –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
        –ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ MinIO, –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–¥–∞–ª—è–µ—Ç—Å—è.
        """
        c_id = message.chat.id
        global audio_file_name_to_save
        global transcription_text
        st = user_states.get(c_id, {})
        mode = st.get("mode")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø mode
        if mode is not None and not isinstance(mode, str):
            logging.error("mode –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π")
            mode = None

        try:
            check_authorized(c_id, authorized_users)
        except ValueError as e:
            logging.exception(e)
            app.send_message(c_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
            return

        file_size = define_audio_file_params(message)

        try:
            check_audio_file_size(file_size, max_size, c_id, app)
        except ValueError as e:
            logging.exception(e)
            return

        os.makedirs(tmpdir, exist_ok=True)

        file_name = extract_audio_filename(message)
        path = os.path.join(tmpdir, file_name)

        msg_ = app.send_message(c_id, "üéôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        st_ev = threading.Event()
        sp_th = threading.Thread(target=run_loading_animation, args=(c_id, msg_.id, st_ev, app))
        sp_th.start()

        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            downloaded = app.download_media(message, file_name=path)
            if downloaded is None:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
            audio_file_name_to_save = os.path.basename(downloaded)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π MinIOManager –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            metadata = {
                'user_id': str(c_id),
                'upload_timestamp': datetime.now().isoformat(),
                'file_type': 'audio',
                'processing_status': 'uploaded'
            }

            success = minio_manager.upload_audio_file(
                file_path=downloaded,
                object_name=file_name,
                metadata=metadata
            )

            if success:
                logging.info(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ MinIO.")
            else:
                raise MinIOUploadError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {file_name}")

            transcription_text = transcribe_audio_and_save(downloaded, c_id, processed_texts)

            app.edit_message_text(c_id, msg_.id, "‚úÖ –ê—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª ¬´–ò–Ω—Ç–µ—Ä–≤—å—é¬ª ‚Äî —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ–º —Ä–æ–ª–∏
            if isinstance(mode, str):
                handle_assign_roles(c_id, app, mode, processed_texts)
            st["step"] = "inputing_fields"
            if message.caption:
                text = message.caption.strip()
                try:
                    if isinstance(mode, str):
                        parsed_data = parse_message_text(text, mode)
                        st["data"] = parsed_data
                        await show_confirmation_menu(c_id, st, app)
                    else:
                        app.send_message(c_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é –ø–æ–ª—è.\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞:")
                except Exception as e:
                    app.send_message(c_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é –ø–æ–ª—è.\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞:")
                    logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
                return
            else:
                app.send_message(c_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é –ø–æ–ª—è.\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞:")

        except (MinIOError, MinIOConnectionError, MinIOUploadError) as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ MinIO: {e}")
            app.edit_message_text(c_id, msg_.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
            send_main_menu(c_id, app)
            return

        except S3Error as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ MinIO.: {e}")
            app.edit_message_text(c_id, msg_.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ")
            send_main_menu(c_id, app)
            return

        except OpenAIPermissionError:
            logging.exception("üö´ –û—à–∏–±–∫–∞: Whisper –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–ª—é—á/—Ä–µ–≥–∏–æ–Ω).")
            # app.edit_message_text(c_id, msg_.id, "üö´ –û—à–∏–±–∫–∞: Whisper –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–ª—é—á/—Ä–µ–≥–∏–æ–Ω).")
            app.edit_message_text(c_id, msg_.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ")
            send_main_menu(c_id, app)
        except Exception as e:
            logging.exception(f"‚ùå–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}")
            # app.edit_message_text(c_id, msg_.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
            app.edit_message_text(c_id, msg_.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ")
            send_main_menu(c_id, app)
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
            st_ev.set()
            sp_th.join()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ downloaded –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ try –±–ª–æ–∫–µ
            downloaded_file = locals().get('downloaded')
            if downloaded_file:
                delete_tmp_params(msg=msg_, tmp_file=downloaded_file, tmp_dir=tmpdir, client_id=c_id, app=app)

    @app.on_message(filters.document)  # type: ignore[misc,reportUntypedFunctionDecorator]
    def handle_document_msg(app: Client, message: Message):
        """
        –ü—Ä–∏—ë–º –¥–æ–∫—É–º–µ–Ω—Ç–∞. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "upload||category".
        """
        c_id = message.chat.id
        if c_id not in authorized_users:
            return

        doc: Document = message.document
        st = user_states.get(c_id, {})
        if "upload_category" in st:
            cat = st["upload_category"]
            if isinstance(cat, str):
                fold = STORAGE_DIRS.get(cat, "")
            else:
                logging.error("upload_category –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π")
                return
            if not fold:
                # app.send_message(c_id, "–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.")
                logging.error("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.")
                return

            current_time = datetime.now().strftime("%d-%m-%Y-%H-%M-%S")
            orig_name = doc.file_name or f"file_{current_time}"
            sf = safe_filename(orig_name)
            path_ = os.path.join(fold, sf)

            try:
                app.download_media(message, file_name=path_)
                # app.send_message(c_id, f"‚úÖ –§–∞–π–ª '{orig_name}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ '{cat}'.")
                logging.info(f"‚úÖ –§–∞–π–ª '{orig_name}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ '{cat}'.")
            except Exception as e:
                logging.exception(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
                # app.send_message(c_id, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

            user_states.pop(c_id, None)
        else:
            app.send_message(c_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª¬ª –≤ –º–µ–Ω—é.")

        send_main_menu(c_id, app)

    @app.on_callback_query()  # type: ignore[misc,reportUntypedFunctionDecorator]
    async def callback_query_handler(client: Client, callback: CallbackQuery):
        c_id = callback.message.chat.id
        data = callback.data
        try:
            await callback.answer()
        except:
            pass

        try:
            # === –ú–£–õ–¨–¢–ò–ß–ê–¢–´: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback ===
            if data == "new_chat":
                await handle_new_chat(c_id, app)
                return

            elif data.startswith("chat_actions||"):
                conversation_id = data.split("||")[1]
                await handle_chat_actions(c_id, conversation_id, app)
                return

            elif data.startswith("switch_chat||"):
                conversation_id = data.split("||")[1]
                await handle_switch_chat_request(c_id, conversation_id, app, callback)
                return

            elif data.startswith("confirm_switch||"):
                conversation_id = data.split("||")[1]
                await handle_switch_chat_confirm(c_id, conversation_id, app)
                return

            elif data.startswith("rename_chat||"):
                conversation_id = data.split("||")[1]
                await handle_rename_chat_request(c_id, conversation_id, app)
                return

            elif data.startswith("delete_chat||"):
                conversation_id = data.split("||")[1]
                await handle_delete_chat_request(c_id, conversation_id, app)
                return

            elif data.startswith("confirm_delete||"):
                conversation_id = data.split("||")[1]
                username = await get_username_from_chat(c_id, app)
                await handle_delete_chat_confirm(c_id, conversation_id, username, app)
                return
            # === –ö–û–ù–ï–¶ –ú–£–õ–¨–¢–ò–ß–ê–¢–´ ===


            # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            if data == "menu_main":
                await handle_main_menu(c_id, app)
            elif data == "menu_dialog":
                await handle_menu_dialog(c_id, app)
            elif data == "menu_help":
                await handle_help_menu(c_id, app)
            elif data == "menu_system":
                await handle_menu_system(c_id, app)
            elif data == "menu_chats":
                await handle_menu_chats(c_id, app)
            elif data == "menu_storage":
                await handle_menu_storage(c_id, app)

            # –ú–µ–Ω—é —á–∞—Ç–æ–≤
            elif data == "show_stats":
                await handle_show_stats(c_id, app)
            elif data == "show_my_reports":
                await handle_show_my_reports(c_id, app)
            # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤
            elif data.startswith("view||"):
                await handle_view_files(c_id, data, app)

            elif data.startswith("select||"):
                await handle_file_selection(c_id, data, app)

            elif data.startswith("delete||"):
                await handle_file_deletion(c_id, data, app)

            elif data.startswith("upload||"):
                await file_upload_handler(c_id, data, app)

            elif data == "mode_fast":
                await handle_mode_fast(callback, app)
                return

            elif data == "mode_deep":
                await handle_mode_deep(callback, app)
                return

            # –í—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è
            elif data in ["mode_interview", "mode_design"]:
                await handle_mode_selection(c_id, data, app)

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            elif data == "confirm_data":
                handle_confirm_data(c_id, app)
            elif data == "edit_data":
                current_state = user_states.get(c_id, {})
                await show_edit_menu(c_id, current_state, app)

            elif data == "back_to_confirm":
                await handle_back_to_confirm(c_id, app)

            elif data.startswith("edit_"):
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                field = data.split("edit_")[1]
                await handle_edit_field(c_id, field, app)

            #–û—Ç—á–µ—Ç—ã
            elif data in REPORT_MAPPING.keys():
                await handle_report(c_id, data, app)

            # # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–¥–∞–Ω–∏—è:
            elif data.startswith("choose_building||"):
                await handle_choose_building(c_id, data, app)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
            elif data.startswith("send_report||") or data == "show_all_reports":
                handle_report_callback(callback, app)

        except ValueError as ve:
            logging.exception(ve)
            return

        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –≤ callback_query_handler: {e}")

