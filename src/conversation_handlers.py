"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º—É–ª—å—Ç–∏—á–∞—Ç–∞–º–∏ –≤ Telegram –±–æ—Ç–µ.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏
- –°–æ–∑–¥–∞–Ω–∏—è, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤
- –û–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —á–∞—Ç–∞–º–∏

–ü—Ä–∏–Ω—Ü–∏–ø: KISS - –ø—Ä–æ—Å—Ç—ã–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.
"""

import logging
from datetime import datetime
from typing import Optional

from pyrogram import Client
from pyrogram.types import CallbackQuery

from conversation_manager import conversation_manager
from conversations import ConversationMessage
from config import user_states
from utils import get_username_from_chat
from markups import (
    make_dialog_markup,
    switch_chat_confirmation_markup,
    delete_chat_confirmation_markup,
    chats_menu_markup_dynamic,
    chat_actions_menu_markup
)
from menu_manager import send_menu, clear_menus

logger = logging.getLogger(__name__)


def ensure_active_conversation(user_id: int, username: str, first_message: str = "") -> str:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞, —Å–æ–∑–¥–∞–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        first_message: –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞

    Returns:
        conversation_id –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
        active_id = conversation_manager.get_active_conversation_id(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
        if active_id:
            conversation = conversation_manager.load_conversation(user_id, active_id)
            if conversation:
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç {active_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return active_id

        # –ê–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        chat_name = first_message[:50] if first_message else "–ù–æ–≤—ã–π —á–∞—Ç"
        if len(first_message) > 50:
            chat_name += "..."

        new_conversation_id = conversation_manager.create_conversation(
            user_id=user_id,
            username=username,
            first_question=chat_name
        )

        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç {new_conversation_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return new_conversation_id

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ensure_active_conversation –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
        return conversation_manager.create_conversation(
            user_id=user_id,
            username=username,
            first_question="–ù–æ–≤—ã–π —á–∞—Ç"
        )


async def handle_new_chat(chat_id: int, app: Client):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞.
    Callback: "new_chat"

    Args:
        chat_id: ID —á–∞—Ç–∞ Telegram
        app: Pyrogram Client
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username = await get_username_from_chat(chat_id, app)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–π conversation_id –î–û —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        old_conversation_id = conversation_manager.get_active_conversation_id(chat_id)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
        new_conversation_id = conversation_manager.create_conversation(
            user_id=chat_id,
            username=username,
            first_question="–ù–æ–≤—ã–π —á–∞—Ç"
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
        user_states[chat_id] = {
            "conversation_id": new_conversation_id,
            "step": "dialog_mode",
            "deep_search": False
        }

        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–µ–Ω—é (–Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç)
        clear_menus(chat_id)

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –≤–Ω–∏–∑—É
        text = (
            "‚ú® –ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω!\n\n"
            "–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å?\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        await send_menu(
            chat_id=chat_id,
            app=app,
            text=text,
            reply_markup=make_dialog_markup()
        )

        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç {new_conversation_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        app.send_message(
            chat_id=chat_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


async def handle_chat_actions(chat_id: int, conversation_id: str, app: Client):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å —á–∞—Ç–æ–º.
    Callback: "chat_actions||{conversation_id}"

    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç:
    - –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
    - –ö–Ω–æ–ø–∫–∏: [–î–∞, –ø–µ—Ä–µ–π—Ç–∏] [–ù–µ—Ç]
    - –ö–Ω–æ–ø–∫–∏: [–ò–∑–º–µ–Ω–∏—Ç—å] [–£–¥–∞–ª–∏—Ç—å]

    Args:
        chat_id: ID —á–∞—Ç–∞ Telegram
        conversation_id: ID —á–∞—Ç–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        app: Pyrogram Client
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
        conversation = conversation_manager.load_conversation(chat_id, conversation_id)

        if not conversation:
            await app.send_message(
                chat_id=chat_id,
                text="‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
            return

        chat_name = conversation.metadata.title

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
        await send_menu(
            chat_id=chat_id,
            app=app,
            text=f"üîÑ –ß–∞—Ç: *{chat_name}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=chat_actions_menu_markup(conversation_id, chat_name)
        )

        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —á–∞—Ç–∞ {conversation_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —á–∞—Ç–∞ {conversation_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        await app.send_message(
            chat_id=chat_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


async def handle_switch_chat_request(
    chat_id: int,
    conversation_id: str,
    app: Client,
    callback_query: CallbackQuery
):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —á–∞—Ç–∞.
    Callback: "switch_chat||{conversation_id}"

    –£–°–¢–ê–†–ï–õ: –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è chat_actions||
    –û—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.

    Args:
        chat_id: ID —á–∞—Ç–∞ Telegram
        conversation_id: ID —á–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        app: Pyrogram Client
        callback_query: Callback query –æ–±—ä–µ–∫—Ç
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
        conversation = conversation_manager.load_conversation(chat_id, conversation_id)

        if not conversation:
            await callback_query.answer("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        chat_name = conversation.metadata.title

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback_query.edit_message_text(
            text=f"üîÑ –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç '{chat_name}'?",
            reply_markup=switch_chat_confirmation_markup(conversation_id, chat_name)
        )

        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —á–∞—Ç {conversation_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —á–∞—Ç–∞ {conversation_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —á–∞—Ç–∞", show_alert=True)


async def handle_switch_chat_confirm(
    chat_id: int,
    conversation_id: str,
    app: Client
):
    """
    –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç.
    Callback: "confirm_switch||{conversation_id}"

    Args:
        chat_id: ID —á–∞—Ç–∞ Telegram
        conversation_id: ID —á–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        app: Pyrogram Client
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–π conversation_id –î–û –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        old_conversation_id = conversation_manager.get_active_conversation_id(chat_id)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Ç –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
        conversation_manager.set_active_conversation(chat_id, conversation_id)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
        user_states[chat_id] = {
            "conversation_id": conversation_id,
            "step": "dialog_mode",
            "deep_search": False
        }

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
        conversation = conversation_manager.load_conversation(chat_id, conversation_id)

        if not conversation:
            app.send_message(
                chat_id=chat_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç"
            )
            return

        messages = conversation_manager.get_messages(chat_id, conversation_id, limit=5)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —á–∞—Ç: {conversation.metadata.title}\n\n"

        if messages:
            text += "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π:\n\n"
            for msg in messages:
                role_emoji = "üë§" if msg.type == "user_question" else "ü§ñ"
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                msg_preview = msg.text[:100] + "..." if len(msg.text) > 100 else msg.text
                text += f"{role_emoji} {msg_preview}\n\n"
        else:
            text += "üí¨ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.\n\n"

        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –≤–Ω–∏–∑—É
        await send_menu(
            chat_id=chat_id,
            app=app,
            text=text,
            reply_markup=make_dialog_markup()
        )

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ —á–∞—Ç {conversation_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ —á–∞—Ç {conversation_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        app.send_message(
            chat_id=chat_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —á–∞—Ç–∞"
        )


async def handle_rename_chat_request(
    chat_id: int,
    conversation_id: str,
    app: Client
):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞.
    Callback: "rename_chat||{conversation_id}"

    Args:
        chat_id: ID —á–∞—Ç–∞ Telegram
        conversation_id: ID —á–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        app: Pyrogram Client
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
        conversation = conversation_manager.load_conversation(chat_id, conversation_id)

        if not conversation:
            await app.send_message(
                chat_id=chat_id,
                text="‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
            return

        old_name = conversation.metadata.title

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        user_states[chat_id] = {
            "step": "renaming_chat",
            "conversation_id": conversation_id
        }

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        await app.send_message(
            chat_id=chat_id,
            text=f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ '{old_name}':"
        )

        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ {conversation_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞ {conversation_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        await app.send_message(
            chat_id=chat_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


async def handle_rename_chat_input(
    chat_id: int,
    new_name: str,
    app: Client
):
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫ —á–∞—Ç—É.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ text message handler.

    Args:
        chat_id: ID —á–∞—Ç–∞ Telegram
        new_name: –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
        app: Pyrogram Client
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º conversation_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state = user_states.get(chat_id, {})
        conversation_id = state.get("conversation_id")

        if not conversation_id:
            app.send_message(
                chat_id=chat_id,
                text="‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —á–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è"
            )
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç
        conversation = conversation_manager.load_conversation(chat_id, conversation_id)

        if not conversation:
            app.send_message(
                chat_id=chat_id,
                text="‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        conversation.metadata.title = new_name.strip()
        conversation.metadata.updated_at = datetime.now().isoformat()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conversation_manager.save_conversation(conversation)

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[chat_id] = {}

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç + –º–µ–Ω—é
        text = f"‚úÖ –ß–∞—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ '{new_name}'\n\n–í–∞—à–∏ —á–∞—Ç—ã:"

        await send_menu(
            chat_id=chat_id,
            app=app,
            text=text,
            reply_markup=chats_menu_markup_dynamic(chat_id)
        )

        logger.info(f"–ß–∞—Ç {conversation_id} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ '{new_name}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        app.send_message(
            chat_id=chat_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —á–∞—Ç–∞"
        )


async def handle_delete_chat_request(
    chat_id: int,
    conversation_id: str,
    app: Client
):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞.
    Callback: "delete_chat||{conversation_id}"

    Args:
        chat_id: ID —á–∞—Ç–∞ Telegram
        conversation_id: ID —á–∞—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        app: Pyrogram Client
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
        conversation = conversation_manager.load_conversation(chat_id, conversation_id)

        if not conversation:
            await app.send_message(
                chat_id=chat_id,
                text="‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
            return

        chat_name = conversation.metadata.title

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await app.send_message(
            chat_id=chat_id,
            text=f"‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å —á–∞—Ç '{chat_name}'?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
            reply_markup=delete_chat_confirmation_markup(conversation_id, chat_name)
        )

        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞ {conversation_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞ {conversation_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        await app.send_message(
            chat_id=chat_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


async def handle_delete_chat_confirm(
    chat_id: int,
    conversation_id: str,
    username: str,
    app: Client
):
    """
    –£–¥–∞–ª—è–µ—Ç —á–∞—Ç.
    Callback: "confirm_delete||{conversation_id}"

    Args:
        chat_id: ID —á–∞—Ç–∞ Telegram
        conversation_id: ID —á–∞—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        app: Pyrogram Client
    """
    try:
        # –£–¥–∞–ª—è–µ–º —á–∞—Ç
        conversation_manager.delete_conversation(chat_id, conversation_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —á–∞—Ç—ã
        all_conversations = conversation_manager.list_conversations(chat_id)

        if not all_conversations:
            # –ù–µ—Ç —á–∞—Ç–æ–≤ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            new_conversation_id = conversation_manager.create_conversation(
                user_id=chat_id,
                username=username,
                first_question="–ù–æ–≤—ã–π —á–∞—Ç"
            )

            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–µ–Ω—é (–Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç)
            clear_menus(chat_id)

            text = (
                "‚úÖ –ß–∞—Ç —É–¥–∞–ª–µ–Ω\n\n"
                "–≠—Ç–æ –±—ã–ª –≤–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Ç. –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç.\n\n"
                "–í–∞—à–∏ —á–∞—Ç—ã:"
            )

            await send_menu(
                chat_id=chat_id,
                app=app,
                text=text,
                reply_markup=chats_menu_markup_dynamic(chat_id)
            )

            logger.info(f"–£–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Ç {conversation_id}, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π {new_conversation_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        else:
            # –û—Å—Ç–∞–ª–∏—Å—å —á–∞—Ç—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
            text = "‚úÖ –ß–∞—Ç —É–¥–∞–ª–µ–Ω\n\n–í–∞—à–∏ —á–∞—Ç—ã:"

            await send_menu(
                chat_id=chat_id,
                app=app,
                text=text,
                reply_markup=chats_menu_markup_dynamic(chat_id)
            )

            logger.info(f"–£–¥–∞–ª–µ–Ω —á–∞—Ç {conversation_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ {conversation_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        app.send_message(
            chat_id=chat_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞"
        )
