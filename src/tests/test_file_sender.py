"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è file_sender.py

–ó–∞–¥–∞—á–∞ ID: 00001_20251007_T3H8K9
–§–∞–∑–∞: 5 (Testing)
–ê–≥–µ–Ω—Ç: test-automator

–ü–æ–∫—Ä—ã—Ç–∏–µ:
- Unit-—Ç–µ—Å—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (format_history_for_file, format_reports_for_file)
- Unit-—Ç–µ—Å—Ç—ã –¥–ª—è throttling (should_send_file, update_last_sent)
- Integration-—Ç–µ—Å—Ç—ã —Å mock Pyrogram (auto_send_history_file, auto_send_reports_file)
- E2E-—Ç–µ—Å—Ç—ã (manual) - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞

–¶–µ–ª–µ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: > 85%
"""

import pytest
from unittest.mock import AsyncMock, MagicMock, patch, mock_open
from datetime import datetime, timedelta
from io import BytesIO
import json
import tempfile
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–≥–æ –º–æ–¥—É–ª—è
import sys
sys.path.insert(0, str(Path(__file__).parent.parent))

from file_sender import (
    format_history_for_file,
    format_reports_for_file,
    auto_send_history_file,
    auto_send_reports_file,
    should_send_file,
    update_last_sent,
    THROTTLE_HOURS,
    MAX_MESSAGES,
    MAX_REPORTS
)


# ============================================================================
#                           FIXTURES
# ============================================================================

@pytest.fixture
def mock_message():
    """–°–æ–∑–¥–∞–µ—Ç mock ConversationMessage."""
    def _create(text="Test message", msg_type="user_question", timestamp=None):
        msg = MagicMock()
        msg.text = text
        msg.type = msg_type
        msg.timestamp = timestamp or datetime.now().isoformat()
        msg.sent_as = "message"
        return msg
    return _create


@pytest.fixture
def mock_report():
    """–°–æ–∑–¥–∞–µ—Ç mock ReportMetadata."""
    def _create(question="Test question", search_type="fast", timestamp=None):
        report = MagicMock()
        report.timestamp = timestamp or datetime.now().isoformat()
        report.filename = "voxpersona_20251007_140000.txt"
        report.file_path = "md_reports/user_123/voxpersona_20251007_140000.txt"
        report.question = question
        report.size_bytes = 46284  # ~45.2 KB
        report.tokens = 12345
        report.search_type = search_type
        return report
    return _create


@pytest.fixture
def temp_throttle_file(tmp_path):
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª throttle_history.json."""
    throttle_file = tmp_path / "throttle_history.json"
    return throttle_file


# ============================================================================
#                     UNIT-–¢–ï–°–¢–´: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
# ============================================================================

class TestFormatHistoryForFile:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ format_history_for_file()."""

    def test_empty_history(self):
        """–ü—É—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω—É–ª–µ–≤—ã–º —Å—á–µ—Ç—á–∏–∫–æ–º."""
        result = format_history_for_file([], "–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç")

        assert "–ò–°–¢–û–†–ò–Ø –ß–ê–¢–ê: –¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç" in result
        assert "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: 0" in result
        assert "=" * 60 in result

    def test_single_message_user(self, mock_message):
        """–û–¥–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."""
        messages = [mock_message(text="–ü—Ä–∏–≤–µ—Ç, –±–æ—Ç!", msg_type="user_question")]
        result = format_history_for_file(messages, "–ú–æ–π —á–∞—Ç")

        assert "üßë –í—ã" in result
        assert "–ü—Ä–∏–≤–µ—Ç, –±–æ—Ç!" in result
        assert "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: 1" in result

    def test_single_message_bot(self, mock_message):
        """–û–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."""
        messages = [mock_message(text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!", msg_type="bot_answer")]
        result = format_history_for_file(messages, "–ß–∞—Ç")

        assert "ü§ñ –ë–æ—Ç" in result
        assert "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!" in result

    def test_multiple_messages(self, mock_message):
        """–ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."""
        messages = [
            mock_message(f"–°–æ–æ–±—â–µ–Ω–∏–µ {i}", "user_question")
            for i in range(10)
        ]
        result = format_history_for_file(messages, "–ß–∞—Ç")

        assert "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: 10" in result
        for i in range(10):
            assert f"–°–æ–æ–±—â–µ–Ω–∏–µ {i}" in result

    def test_large_history(self, mock_message):
        """–ë–æ–ª—å—à–∞—è –∏—Å—Ç–æ—Ä–∏—è (100 —Å–æ–æ–±—â–µ–Ω–∏–π) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."""
        messages = [
            mock_message(f"Message {i}", "user_question")
            for i in range(100)
        ]
        result = format_history_for_file(messages, "Large Chat")

        assert "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: 100" in result
        assert "[1]" in result
        assert "[100]" in result

    def test_reversed_order(self, mock_message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        msg1 = mock_message("–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "user_question")
        msg2 = mock_message("–í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "bot_answer")
        msg3 = mock_message("–¢—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "user_question")
        messages = [msg1, msg2, msg3]

        result = format_history_for_file(messages, "–ß–∞—Ç")
        lines = result.split('\n')

        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        idx_first = next(i for i, line in enumerate(lines) if "–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" in line)
        idx_second = next(i for i, line in enumerate(lines) if "–í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" in line)
        idx_third = next(i for i, line in enumerate(lines) if "–¢—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" in line)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–¥—É—Ç –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ
        # (—Ñ—É–Ω–∫—Ü–∏—è –ù–ï —Ä–µ–≤–µ—Ä—Å–∏—Ç - —ç—Ç–æ –¥–µ–ª–∞–µ—Ç caller)
        assert idx_first < idx_second < idx_third

    def test_timestamp_formatting(self, mock_message):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ timestamp."""
        timestamp = "2025-10-07T14:30:00"
        msg = mock_message("–¢–µ—Å—Ç", "user_question", timestamp=timestamp)
        result = format_history_for_file([msg], "–ß–∞—Ç")

        # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY HH:MM:SS
        assert "07.10.2025 14:30:00" in result

    def test_invalid_timestamp_fallback(self, mock_message):
        """Fallback –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º timestamp."""
        msg = mock_message("–¢–µ—Å—Ç", "user_question", timestamp="invalid-timestamp")
        result = format_history_for_file([msg], "–ß–∞—Ç")

        # –î–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback [:16]
        assert "invalid-timesta" in result or "–¢–µ—Å—Ç" in result

    def test_role_emojis(self, mock_message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–æ–ª–µ–π."""
        msg_user = mock_message("User msg", "user_question")
        msg_bot = mock_message("Bot msg", "bot_answer")

        result = format_history_for_file([msg_user, msg_bot], "–ß–∞—Ç")

        assert "üßë –í—ã" in result
        assert "ü§ñ –ë–æ—Ç" in result

    def test_file_marker(self, mock_message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä–∫–µ—Ä–∞ —Ñ–∞–π–ª–∞ üìé."""
        msg = mock_message("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ —Ñ–∞–π–ª", "bot_answer")
        msg.sent_as = "file"

        result = format_history_for_file([msg], "–ß–∞—Ç")

        assert "üìé" in result

    def test_chat_title_in_header(self):
        """–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ."""
        result = format_history_for_file([], "–ú–æ–π —Å—É–ø–µ—Ä —á–∞—Ç 123")

        assert "–ò–°–¢–û–†–ò–Ø –ß–ê–¢–ê: –ú–æ–π —Å—É–ø–µ—Ä —á–∞—Ç 123" in result

    def test_export_timestamp(self):
        """Timestamp —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç."""
        result = format_history_for_file([], "–ß–∞—Ç")

        assert "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:" in result
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ timestamp –ø–æ—Ö–æ–∂ –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        current_year = datetime.now().year
        assert str(current_year) in result


# ============================================================================
#                     UNIT-–¢–ï–°–¢–´: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
# ============================================================================

class TestFormatReportsForFile:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ format_reports_for_file()."""

    def test_empty_reports(self):
        """–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫."""
        result = format_reports_for_file([])

        assert "–°–ü–ò–°–û–ö –û–¢–ß–ï–¢–û–í" in result
        assert "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤: 0" in result

    def test_single_report(self, mock_report):
        """–û–¥–∏–Ω –æ—Ç—á–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."""
        reports = [mock_report(question="–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")]
        result = format_reports_for_file(reports)

        assert "–°–ü–ò–°–û–ö –û–¢–ß–ï–¢–û–í" in result
        assert "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤: 1" in result
        assert "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å" in result
        assert "voxpersona_20251007_140000.txt" in result

    def test_multiple_reports(self, mock_report):
        """–ú–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."""
        reports = [
            mock_report(question=f"–í–æ–ø—Ä–æ—Å {i}")
            for i in range(10)
        ]
        result = format_reports_for_file(reports)

        assert "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤: 10" in result
        for i in range(10):
            assert f"–í–æ–ø—Ä–æ—Å {i}" in result

    def test_large_reports_list(self, mock_report):
        """–ë–æ–ª—å—à–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ (50 —à—Ç—É–∫)."""
        reports = [
            mock_report(question=f"Report {i}")
            for i in range(50)
        ]
        result = format_reports_for_file(reports)

        assert "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤: 50" in result
        assert "[1]" in result
        assert "[50]" in result

    def test_report_timestamp_formatting(self, mock_report):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ timestamp –æ—Ç—á–µ—Ç–∞."""
        timestamp = "2025-10-07T14:00:00"
        report = mock_report(timestamp=timestamp)
        result = format_reports_for_file([report])

        assert "07.10.2025 14:00:00" in result

    def test_report_file_path_displayed(self, mock_report):
        """–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è."""
        report = mock_report()
        result = format_reports_for_file([report])

        assert "–ü—É—Ç—å: md_reports/user_123/voxpersona_20251007_140000.txt" in result

    def test_report_metadata(self, mock_report):
        """–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ (—Ä–∞–∑–º–µ—Ä, —Ç–æ–∫–µ–Ω—ã, —Ç–∏–ø)."""
        report = mock_report()
        result = format_reports_for_file([report])

        # –†–∞–∑–º–µ—Ä –≤ KB (46284 –±–∞–π—Ç = ~45.2 KB)
        assert "45.2 KB" in result
        # –¢–æ–∫–µ–Ω—ã —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
        assert "12,345" in result
        # –¢–∏–ø –ø–æ–∏—Å–∫–∞ —Å —ç–º–æ–¥–∑–∏
        assert "‚ö° –ë—ã—Å—Ç—Ä—ã–π" in result

    def test_search_type_icons(self, mock_report):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–æ–≤ –ø–æ–∏—Å–∫–∞."""
        report_fast = mock_report(search_type="fast")
        report_deep = mock_report(search_type="deep")

        result_fast = format_reports_for_file([report_fast])
        result_deep = format_reports_for_file([report_deep])

        assert "‚ö° –ë—ã—Å—Ç—Ä—ã–π" in result_fast
        assert "üîç –ì–ª—É–±–æ–∫–∏–π" in result_deep

    def test_question_preview(self, mock_report):
        """–ü—Ä–µ–≤—å—é –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è."""
        report = mock_report(question="–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –ú–æ—Å–∫–≤–µ")
        result = format_reports_for_file([report])

        assert "–í–æ–ø—Ä–æ—Å: –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –ú–æ—Å–∫–≤–µ" in result


# ============================================================================
#                     UNIT-–¢–ï–°–¢–´: Throttling —Å–∏—Å—Ç–µ–º–∞
# ============================================================================

class TestThrottling:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π throttling (should_send_file, update_last_sent)."""

    def test_first_send_allowed(self, temp_throttle_file):
        """–ü–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ (—Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)."""
        with patch('file_sender.THROTTLE_FILE', temp_throttle_file):
            assert should_send_file(999999, "history") is True

    def test_within_24_hours_blocked(self, temp_throttle_file):
        """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–∞."""
        user_id = 888888

        with patch('file_sender.THROTTLE_FILE', temp_throttle_file):
            # –ü–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
            update_last_sent(user_id, "history")

            # –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å False
            assert should_send_file(user_id, "history") is False

    def test_after_24_hours_allowed(self, temp_throttle_file):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ 24 —á–∞—Å–æ–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞."""
        user_id = 777777

        with patch('file_sender.THROTTLE_FILE', temp_throttle_file):
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å timestamp 25 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
            past_time = datetime.now() - timedelta(hours=25)
            throttle_data = {
                str(user_id): {
                    "history_last_sent": past_time.isoformat()
                }
            }
            temp_throttle_file.write_text(json.dumps(throttle_data), encoding='utf-8')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å True
            assert should_send_file(user_id, "history") is True

    def test_different_file_types_independent(self, temp_throttle_file):
        """–†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ (history vs reports) –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã."""
        user_id = 666666

        with patch('file_sender.THROTTLE_FILE', temp_throttle_file):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º history
            update_last_sent(user_id, "history")

            # history –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
            assert should_send_file(user_id, "history") is False

            # reports –≤—Å–µ –µ—â–µ —Ä–∞–∑—Ä–µ—à–µ–Ω
            assert should_send_file(user_id, "reports") is True

    def test_different_users_independent(self, temp_throttle_file):
        """–†–∞–∑–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –≤–ª–∏—è—é—Ç –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞."""
        user1 = 111111
        user2 = 222222

        with patch('file_sender.THROTTLE_FILE', temp_throttle_file):
            # user1 –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
            update_last_sent(user1, "history")

            # user1 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
            assert should_send_file(user1, "history") is False

            # user2 –≤—Å–µ –µ—â–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
            assert should_send_file(user2, "history") is True

    def test_update_creates_file(self, temp_throttle_file):
        """update_last_sent —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
        with patch('file_sender.THROTTLE_FILE', temp_throttle_file):
            assert not temp_throttle_file.exists()

            update_last_sent(123, "history")

            assert temp_throttle_file.exists()

    def test_update_creates_directory(self, tmp_path):
        """update_last_sent —Å–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data/ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
        throttle_file = tmp_path / "nonexistent" / "throttle.json"

        with patch('file_sender.THROTTLE_FILE', throttle_file):
            update_last_sent(123, "history")

            assert throttle_file.exists()
            assert throttle_file.parent.exists()

    def test_update_adds_new_user(self, temp_throttle_file):
        """update_last_sent –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user1 = 111
        user2 = 222

        with patch('file_sender.THROTTLE_FILE', temp_throttle_file):
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            update_last_sent(user1, "history")

            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ
            update_last_sent(user2, "reports")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–∞ –≤ —Ñ–∞–π–ª–µ
            data = json.loads(temp_throttle_file.read_text(encoding='utf-8'))
            assert str(user1) in data
            assert str(user2) in data

    def test_update_iso_timestamp_format(self, temp_throttle_file):
        """update_last_sent –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ISO —Ñ–æ—Ä–º–∞—Ç timestamp."""
        user_id = 333

        with patch('file_sender.THROTTLE_FILE', temp_throttle_file):
            update_last_sent(user_id, "history")

            data = json.loads(temp_throttle_file.read_text(encoding='utf-8'))
            timestamp_str = data[str(user_id)]["history_last_sent"]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ timestamp –ø–∞—Ä—Å–∏—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            timestamp = datetime.fromisoformat(timestamp_str)
            assert isinstance(timestamp, datetime)

    def test_corrupted_json_failsafe(self, temp_throttle_file):
        """Graceful degradation –ø—Ä–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–º JSON."""
        temp_throttle_file.write_text("invalid json {{{", encoding='utf-8')

        with patch('file_sender.THROTTLE_FILE', temp_throttle_file):
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É (fail-safe)
            assert should_send_file(123, "history") is True


# ============================================================================
#                     INTEGRATION-–¢–ï–°–¢–´: auto_send_history_file
# ============================================================================

class TestAutoSendHistoryFile:
    """Integration-—Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ auto_send_history_file()."""

    @pytest.mark.asyncio
    async def test_success_basic(self, mock_message, temp_throttle_file):
        """–£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ (–±–∞–∑–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π)."""
        app_mock = AsyncMock()
        user_id = 123456

        with patch('file_sender.conversation_manager') as cm_mock, \
             patch('file_sender.should_send_file', return_value=True), \
             patch('file_sender.update_last_sent'), \
             patch('file_sender.THROTTLE_FILE', temp_throttle_file):

            # Mock ConversationManager
            cm_mock.get_active_conversation_id.return_value = "test-uuid-1234"

            # Mock Conversation
            mock_conv = MagicMock()
            mock_conv.messages = [mock_message("–¢–µ—Å—Ç", "user_question")]
            mock_conv.metadata = MagicMock(title="–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç")
            cm_mock.load_conversation.return_value = mock_conv

            result = await auto_send_history_file(user_id, app_mock)

            # Assertions
            assert result is True
            app_mock.send_document.assert_called_once()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ BytesIO –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω
            call_args = app_mock.send_document.call_args
            assert call_args[1]['chat_id'] == user_id
            file_obj = call_args[1]['document']
            assert isinstance(file_obj, BytesIO)

    @pytest.mark.asyncio
    async def test_empty_history_no_send(self, temp_throttle_file):
        """–ü—É—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è - send_document –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è."""
        app_mock = AsyncMock()
        user_id = 123456

        with patch('file_sender.conversation_manager') as cm_mock, \
             patch('file_sender.THROTTLE_FILE', temp_throttle_file):

            cm_mock.get_active_conversation_id.return_value = "test-uuid"

            # –ü—É—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è
            mock_conv = MagicMock()
            mock_conv.messages = []
            mock_conv.metadata = MagicMock(title="–ü—É—Å—Ç–æ–π —á–∞—Ç")
            cm_mock.load_conversation.return_value = mock_conv

            result = await auto_send_history_file(user_id, app_mock)

            assert result is False
            app_mock.send_document.assert_not_called()

    @pytest.mark.asyncio
    async def test_no_active_conversation(self, temp_throttle_file):
        """–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ - –≤–æ–∑–≤—Ä–∞—Ç False."""
        app_mock = AsyncMock()
        user_id = 123456

        with patch('file_sender.conversation_manager') as cm_mock, \
             patch('file_sender.THROTTLE_FILE', temp_throttle_file):

            cm_mock.get_active_conversation_id.return_value = None

            result = await auto_send_history_file(user_id, app_mock)

            assert result is False
            app_mock.send_document.assert_not_called()

    @pytest.mark.asyncio
    async def test_throttled_no_send(self, temp_throttle_file):
        """Throttling –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É."""
        app_mock = AsyncMock()
        user_id = 123456

        with patch('file_sender.should_send_file', return_value=False), \
             patch('file_sender.THROTTLE_FILE', temp_throttle_file):

            result = await auto_send_history_file(user_id, app_mock)

            assert result is False
            app_mock.send_document.assert_not_called()

    @pytest.mark.asyncio
    async def test_multiple_messages(self, mock_message, temp_throttle_file):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        app_mock = AsyncMock()
        user_id = 123456

        with patch('file_sender.conversation_manager') as cm_mock, \
             patch('file_sender.should_send_file', return_value=True), \
             patch('file_sender.update_last_sent'), \
             patch('file_sender.THROTTLE_FILE', temp_throttle_file):

            cm_mock.get_active_conversation_id.return_value = "test-uuid"

            # 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = [mock_message(f"Msg {i}", "user_question") for i in range(10)]
            mock_conv = MagicMock()
            mock_conv.messages = messages
            mock_conv.metadata = MagicMock(title="–ß–∞—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π")
            cm_mock.load_conversation.return_value = mock_conv

            result = await auto_send_history_file(user_id, app_mock)

            assert result is True
            app_mock.send_document.assert_called_once()

    @pytest.mark.asyncio
    async def test_max_messages_limit(self, mock_message, temp_throttle_file):
        """–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ MAX_MESSAGES (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 200)."""
        app_mock = AsyncMock()
        user_id = 123456

        with patch('file_sender.conversation_manager') as cm_mock, \
             patch('file_sender.should_send_file', return_value=True), \
             patch('file_sender.update_last_sent'), \
             patch('file_sender.THROTTLE_FILE', temp_throttle_file):

            cm_mock.get_active_conversation_id.return_value = "test-uuid"

            # 300 —Å–æ–æ–±—â–µ–Ω–∏–π (–±–æ–ª—å—à–µ —á–µ–º MAX_MESSAGES=200)
            messages = [mock_message(f"Msg {i}", "user_question") for i in range(300)]
            mock_conv = MagicMock()
            mock_conv.messages = messages
            mock_conv.metadata = MagicMock(title="–ë–æ–ª—å—à–∞—è –∏—Å—Ç–æ—Ä–∏—è")
            cm_mock.load_conversation.return_value = mock_conv

            result = await auto_send_history_file(user_id, app_mock)

            assert result is True
            # –§—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å–æ–æ–±—â–µ–Ω–∏–π
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ mock —Å–ª–æ–∂–Ω–æ, –Ω–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å

    @pytest.mark.asyncio
    async def test_bytesio_closed(self, mock_message, temp_throttle_file):
        """BytesIO –æ–±—ä–µ–∫—Ç –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ finally –±–ª–æ–∫–µ."""
        app_mock = AsyncMock()
        user_id = 123456

        with patch('file_sender.conversation_manager') as cm_mock, \
             patch('file_sender.should_send_file', return_value=True), \
             patch('file_sender.update_last_sent'), \
             patch('file_sender.THROTTLE_FILE', temp_throttle_file):

            cm_mock.get_active_conversation_id.return_value = "test-uuid"

            mock_conv = MagicMock()
            mock_conv.messages = [mock_message()]
            mock_conv.metadata = MagicMock(title="–¢–µ—Å—Ç")
            cm_mock.load_conversation.return_value = mock_conv

            result = await auto_send_history_file(user_id, app_mock)

            # BytesIO –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç (–ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—à–∏–±–∫–∏ –Ω–µ—Ç)
            assert result is True

    @pytest.mark.asyncio
    async def test_error_handling_graceful_degradation(self, mock_message, temp_throttle_file):
        """Graceful degradation –ø—Ä–∏ –æ—à–∏–±–∫–µ Pyrogram."""
        app_mock = AsyncMock()
        app_mock.send_document.side_effect = Exception("Network error")
        user_id = 123456

        with patch('file_sender.conversation_manager') as cm_mock, \
             patch('file_sender.should_send_file', return_value=True), \
             patch('file_sender.THROTTLE_FILE', temp_throttle_file):

            cm_mock.get_active_conversation_id.return_value = "test-uuid"

            mock_conv = MagicMock()
            mock_conv.messages = [mock_message()]
            mock_conv.metadata = MagicMock(title="–¢–µ—Å—Ç")
            cm_mock.load_conversation.return_value = mock_conv

            result = await auto_send_history_file(user_id, app_mock)

            # –û–∂–∏–¥–∞–µ–º graceful degradation - False, –Ω–æ –±–µ–∑ –∫—Ä–∞—à–∞
            assert result is False

    @pytest.mark.asyncio
    async def test_caption_includes_metadata(self, mock_message, temp_throttle_file):
        """Caption –≤–∫–ª—é—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)."""
        app_mock = AsyncMock()
        user_id = 123456

        with patch('file_sender.conversation_manager') as cm_mock, \
             patch('file_sender.should_send_file', return_value=True), \
             patch('file_sender.update_last_sent'), \
             patch('file_sender.THROTTLE_FILE', temp_throttle_file):

            cm_mock.get_active_conversation_id.return_value = "test-uuid"

            messages = [mock_message(f"Msg {i}") for i in range(5)]
            mock_conv = MagicMock()
            mock_conv.messages = messages
            mock_conv.metadata = MagicMock(title="–ú–æ–π —á–∞—Ç")
            cm_mock.load_conversation.return_value = mock_conv

            await auto_send_history_file(user_id, app_mock)

            call_args = app_mock.send_document.call_args
            caption = call_args[1]['caption']

            assert "–ú–æ–π —á–∞—Ç" in caption
            assert "5" in caption  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π


# ============================================================================
#                     INTEGRATION-–¢–ï–°–¢–´: auto_send_reports_file
# ============================================================================

class TestAutoSendReportsFile:
    """Integration-—Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ auto_send_reports_file()."""

    @pytest.mark.asyncio
    async def test_success_basic(self, mock_report, temp_throttle_file):
        """–£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤."""
        app_mock = AsyncMock()
        user_id = 123456

        with patch('file_sender.md_storage_manager') as md_mock, \
             patch('file_sender.should_send_file', return_value=True), \
             patch('file_sender.update_last_sent'), \
             patch('file_sender.THROTTLE_FILE', temp_throttle_file):

            # Mock MDStorageManager
            md_mock.get_user_reports.return_value = [
                mock_report("–í–æ–ø—Ä–æ—Å 1"),
                mock_report("–í–æ–ø—Ä–æ—Å 2"),
            ]

            result = await auto_send_reports_file(user_id, app_mock)

            assert result is True
            app_mock.send_document.assert_called_once()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º BytesIO
            call_args = app_mock.send_document.call_args
            file_obj = call_args[1]['document']
            assert isinstance(file_obj, BytesIO)

    @pytest.mark.asyncio
    async def test_no_reports_no_send(self, temp_throttle_file):
        """–ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ - send_document –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è."""
        app_mock = AsyncMock()
        user_id = 123456

        with patch('file_sender.md_storage_manager') as md_mock, \
             patch('file_sender.THROTTLE_FILE', temp_throttle_file):

            md_mock.get_user_reports.return_value = []

            result = await auto_send_reports_file(user_id, app_mock)

            assert result is False
            app_mock.send_document.assert_not_called()

    @pytest.mark.asyncio
    async def test_throttled_no_send(self, temp_throttle_file):
        """Throttling –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–æ–≤."""
        app_mock = AsyncMock()
        user_id = 123456

        with patch('file_sender.should_send_file', return_value=False), \
             patch('file_sender.THROTTLE_FILE', temp_throttle_file):

            result = await auto_send_reports_file(user_id, app_mock)

            assert result is False
            app_mock.send_document.assert_not_called()

    @pytest.mark.asyncio
    async def test_multiple_reports(self, mock_report, temp_throttle_file):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ—Ç—á–µ—Ç–æ–≤."""
        app_mock = AsyncMock()
        user_id = 123456

        with patch('file_sender.md_storage_manager') as md_mock, \
             patch('file_sender.should_send_file', return_value=True), \
             patch('file_sender.update_last_sent'), \
             patch('file_sender.THROTTLE_FILE', temp_throttle_file):

            reports = [mock_report(f"Report {i}") for i in range(20)]
            md_mock.get_user_reports.return_value = reports

            result = await auto_send_reports_file(user_id, app_mock)

            assert result is True
            app_mock.send_document.assert_called_once()

    @pytest.mark.asyncio
    async def test_error_handling(self, mock_report, temp_throttle_file):
        """Graceful degradation –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
        app_mock = AsyncMock()
        app_mock.send_document.side_effect = Exception("API error")
        user_id = 123456

        with patch('file_sender.md_storage_manager') as md_mock, \
             patch('file_sender.should_send_file', return_value=True), \
             patch('file_sender.THROTTLE_FILE', temp_throttle_file):

            md_mock.get_user_reports.return_value = [mock_report()]

            result = await auto_send_reports_file(user_id, app_mock)

            assert result is False


# ============================================================================
#                     E2E-–¢–ï–°–¢–´ (MANUAL) - –ò–ù–°–¢–†–£–ö–¶–ò–ò
# ============================================================================

"""
=============================================================================
                        E2E-–¢–ï–°–¢–´ (MANUAL)
=============================================================================

–≠—Ç–∏ —Ç–µ—Å—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é —Å —Ä–µ–∞–ª—å–Ω—ã–º Telegram –±–æ—Ç–æ–º.

–°–¶–ï–ù–ê–†–ò–ô 1: –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
-------------------------------
–®–∞–≥–∏:
1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: python main.py
2. –û—Ç–∫—Ä—ã—Ç—å Telegram, –Ω–∞–π—Ç–∏ –±–æ—Ç
3. –ö–æ–º–∞–Ω–¥–∞ /start (–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏)

–û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ:
‚úÖ –§–∞–π–ª—ã –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è (–Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏)
‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—è–≤–ª—è–µ—Ç—Å—è
‚úÖ –ë–æ—Ç –Ω–µ –ø–∞–¥–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π


–°–¶–ï–ù–ê–†–ò–ô 2: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏—Å—Ç–æ—Ä–∏–µ–π
-------------------------------------------------
–®–∞–≥–∏:
1. –°–æ–∑–¥–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å 3-5 —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç—É
2. –ö–æ–º–∞–Ω–¥–∞ /start

–û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ:
‚úÖ –î–≤–∞ —Ñ–∞–π–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è:
   - history_{user_id}.txt
   - reports_{user_id}.txt (–µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—á–µ—Ç—ã)
‚úÖ –û—Ç–∫—Ä—ã—Ç—å history.txt
‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤—ã–º)
‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ñ–∞–π–ª–æ–≤


–°–¶–ï–ù–ê–†–ò–ô 3: Throttling (24 —á–∞—Å–∞)
---------------------------------
–®–∞–≥–∏:
1. /start ‚Üí —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
2. –°—Ä–∞–∑—É —Å–Ω–æ–≤–∞ /start

–û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ:
‚úÖ –§–∞–π–ª—ã –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è (throttling 24 —á–∞—Å–∞)
‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—è–≤–ª—è–µ—Ç—Å—è
‚úÖ –ë–æ—Ç –Ω–µ –ø–∞–¥–∞–µ—Ç

–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –¥–∞–Ω–Ω—ã–µ:
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å data/throttle_history.json
- Timestamp –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω


–°–¶–ï–ù–ê–†–ò–ô 4: –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
-----------------------------------
–®–∞–≥–∏:
1. –ö–æ–º–∞–Ω–¥–∞ /history
2. –ö–æ–º–∞–Ω–¥–∞ /reports

–û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ:
‚úÖ /history —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Ä–∞–Ω—å—à–µ (—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
‚úÖ /reports —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Ä–∞–Ω—å—à–µ
‚úÖ –ù–µ—Ç —Ä–µ–≥—Ä–µ—Å—Å–∏–π


–ß–ï–ö–õ–ò–°–¢ –ü–û–°–õ–ï –í–´–ü–û–õ–ù–ï–ù–ò–Ø E2E:
------------------------------
[ ] –°—Ü–µ–Ω–∞—Ä–∏–π 1 –ø—Ä–æ–π–¥–µ–Ω
[ ] –°—Ü–µ–Ω–∞—Ä–∏–π 2 –ø—Ä–æ–π–¥–µ–Ω
[ ] –°—Ü–µ–Ω–∞—Ä–∏–π 3 –ø—Ä–æ–π–¥–µ–Ω
[ ] –°—Ü–µ–Ω–∞—Ä–∏–π 4 –ø—Ä–æ–π–¥–µ–Ω
[ ] –°–∫—Ä–∏–Ω—à–æ—Ç—ã/–ª–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
[ ] –ë–∞–≥–∏ –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã)

=============================================================================
"""


# ============================================================================
#                     –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ó–ê–ü–£–°–ö–ê –¢–ï–°–¢–û–í
# ============================================================================

"""
–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤:
-------------------
pytest src/tests/test_file_sender.py -v

–ó–∞–ø—É—Å–∫ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º:
-------------------
pytest src/tests/test_file_sender.py --cov=file_sender --cov-report=html --cov-report=term

–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ unit-—Ç–µ—Å—Ç–æ–≤:
---------------------------
pytest src/tests/test_file_sender.py -v -k "not asyncio"

–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ integration-—Ç–µ—Å—Ç–æ–≤:
----------------------------------
pytest src/tests/test_file_sender.py -v -k "asyncio"

–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞:
--------------------------
pytest src/tests/test_file_sender.py::TestFormatHistoryForFile -v

–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:
--------------------------
pytest src/tests/test_file_sender.py::TestFormatHistoryForFile::test_empty_history -v

–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞ –ø–æ–∫—Ä—ã—Ç–∏—è:
--------------------------------
pytest src/tests/test_file_sender.py --cov=file_sender --cov-report=html
# –û—Ç–∫—Ä–æ–π—Ç–µ htmlcov/index.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ
"""


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ pytest –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞
    pytest.main([__file__, "-v", "--cov=file_sender", "--cov-report=term"])
