#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –æ—Ç—á–µ—Ç–æ–≤ (report_number).
–í–µ—Ä—Å–∏—è –¥–ª—è –µ–¥–∏–Ω–æ–≥–æ index.json —Ñ–∞–π–ª–∞.

–ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
1. –°–æ–∑–¥–∞–µ—Ç –±—ç–∫–∞–ø index.json
2. –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ report_number –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ç—á–µ—Ç—ã
3. –ù—É–º–µ—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
4. –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
5. –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç rollback –∏–∑ –±—ç–∫–∞–ø–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python migrate_add_report_numbers_index.py [--dry-run] [--reports-dir PATH]
"""

import json
import logging
import shutil
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, List
import argparse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('migration.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    parser = argparse.ArgumentParser(
        description='–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –æ—Ç—á–µ—Ç–æ–≤ (report_number)'
    )
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π'
    )
    parser.add_argument(
        '--reports-dir',
        type=str,
        default='md_reports',
        help='–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –æ—Ç—á–µ—Ç–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: md_reports)'
    )

    args = parser.parse_args()

    reports_dir = Path(args.reports_dir)
    index_file = reports_dir / "index.json"

    if not index_file.exists():
        logger.error(f"–§–∞–π–ª index.json –Ω–µ –Ω–∞–π–¥–µ–Ω: {index_file}")
        sys.exit(1)

    logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏:")
    logger.info(f"  - –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–æ–≤: {reports_dir}")
    logger.info(f"  - –§–∞–π–ª index.json: {index_file}")
    logger.info(f"  - –†–µ–∂–∏–º dry-run: {args.dry_run}")

    try:
        # 1. –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = reports_dir / f"index.json.backup_{timestamp}"

        if args.dry_run:
            logger.info(f"[DRY-RUN] –ë—ç–∫–∞–ø –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω: {backup_file}")
        else:
            shutil.copy2(index_file, backup_file)
            logger.info(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_file}")

        # 2. –ß–∏—Ç–∞–µ–º index.json
        with open(index_file, 'r', encoding='utf-8') as f:
            reports = json.load(f)

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: {len(reports)}")

        # 3. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        users_reports: Dict[int, List[dict]] = {}
        for report in reports:
            user_id = report.get('user_id')
            if user_id not in users_reports:
                users_reports[user_id] = []
            users_reports[user_id].append(report)

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_reports)}")

        # 4. –î–æ–±–∞–≤–ª—è–µ–º report_number –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        total_migrated = 0

        for user_id, user_reports in users_reports.items():
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ timestamp (—Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–µ)
            user_reports.sort(key=lambda x: x.get('timestamp', ''))

            # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä–∞
            migrated_count = 0
            for idx, report in enumerate(user_reports, start=1):
                if 'report_number' not in report:
                    report['report_number'] = idx
                    migrated_count += 1

            logger.info(f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {len(user_reports)} –æ—Ç—á–µ—Ç–æ–≤, {migrated_count} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ")
            total_migrated += migrated_count

        logger.info(f"–í—Å–µ–≥–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: {total_migrated}")

        # 5. –í–∞–ª–∏–¥–∞—Ü–∏—è
        logger.info("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        validation_errors = []

        for user_id, user_reports in users_reports.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ report_number
            missing = [i for i, r in enumerate(user_reports, 1) if 'report_number' not in r]
            if missing:
                validation_errors.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –æ—Ç—á–µ—Ç—ã –±–µ–∑ report_number: {missing}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            numbers = [r.get('report_number') for r in user_reports if 'report_number' in r]
            if len(numbers) != len(set(numbers)):
                duplicates = [n for n in numbers if numbers.count(n) > 1]
                validation_errors.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –¥—É–±–ª–∏–∫–∞—Ç—ã: {set(duplicates)}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            sorted_numbers = sorted(numbers)
            expected = list(range(1, len(numbers) + 1))
            if sorted_numbers != expected:
                validation_errors.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –Ω–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {sorted_numbers}")

        if validation_errors:
            logger.error("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å:")
            for error in validation_errors:
                logger.error(f"  - {error}")

            if not args.dry_run:
                logger.info("–û—Ç–∫–∞—Ç –∏–∑ –±—ç–∫–∞–ø–∞...")
                shutil.copy2(backup_file, index_file)
                logger.info("‚úÖ –û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω")

            sys.exit(1)

        logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

        # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π index.json
        if args.dry_run:
            logger.info("[DRY-RUN] –ò–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        else:
            with open(index_file, 'w', encoding='utf-8') as f:
                json.dump(reports, f, ensure_ascii=False, indent=2)
            logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π index.json —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

        logger.info("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        if users_reports:
            user_id = list(users_reports.keys())[0]
            sample_reports = users_reports[user_id][:3]
            logger.info(f"\n–ü—Ä–∏–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}):")
            for report in sample_reports:
                logger.info(f"  - [{report.get('report_number')}] {report.get('timestamp')} - {report.get('file_path')}")

        sys.exit(0)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}", exc_info=True)
        sys.exit(1)


if __name__ == '__main__':
    main()
