#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ MD —Ñ–∞–π–ª–æ–≤ –≤ index.json

–î–∞—Ç–∞: 2025-10-14
–ü—Ä–∏—á–∏–Ω–∞: –í—Å–µ 24 –æ—Ç—á–µ—Ç–∞ –∏–º–µ—é—Ç question="# –û—Ç—á–µ—Ç VoxPersona" –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
"""

import json
import re
from pathlib import Path

REPORTS_DIR = Path("/home/voxpersona_user/VoxPersona/md_reports")
INDEX_FILE = REPORTS_DIR / "index.json"
BACKUP_FILE = REPORTS_DIR / "index.json.backup_before_question_fix"

def extract_question_from_md(md_file_path: Path) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ MD —Ñ–∞–π–ª–∞.

    MD —Ñ–∞–π–ª—ã –∏–º–µ—é—Ç —Ñ–æ—Ä–º–∞—Ç:
    # –û—Ç—á–µ—Ç VoxPersona
    **–î–∞—Ç–∞:** 14.10.2025 12:00
    **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** @username (ID: 12345)
    **–ó–∞–ø—Ä–æ—Å:** –†–ï–ê–õ–¨–ù–´–ô –í–û–ü–†–û–° –ó–î–ï–°–¨  ‚Üê –≠–¢–û –ù–£–ñ–ù–û
    **–¢–∏–ø –ø–æ–∏—Å–∫–∞:** fast

    Returns:
        –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ "# –û—Ç—á–µ—Ç VoxPersona" –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    try:
        with open(md_file_path, 'r', encoding='utf-8') as f:
            content = f.read()

        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É **–ó–∞–ø—Ä–æ—Å:**
        match = re.search(r'\*\*–ó–∞–ø—Ä–æ—Å:\*\*\s*(.+?)(?:\n|\r\n)', content)
        if match:
            question = match.group(1).strip()
            return question if question else "# –û—Ç—á–µ—Ç VoxPersona"

        return "# –û—Ç—á–µ—Ç VoxPersona"

    except Exception as e:
        print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {md_file_path}: {e}")
        return "# –û—Ç—á–µ—Ç VoxPersona"

def main():
    print("üîÑ –ú–ò–ì–†–ê–¶–ò–Ø: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è question –≤ index.json")
    print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {REPORTS_DIR}")
    print()

    # 1. –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø
    print("1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞...")
    with open(INDEX_FILE, 'r', encoding='utf-8') as f:
        data = json.load(f)

    with open(BACKUP_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    print(f"   ‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {BACKUP_FILE}")
    print()

    # 2. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π –æ—Ç—á–µ—Ç
    print("2Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤...")
    updated_count = 0
    failed_count = 0

    for report in data:
        report_number = report.get("report_number", "?")
        file_path = report.get("file_path")
        old_question = report.get("question", "")

        if not file_path:
            print(f"  ‚ö†Ô∏è –û—Ç—á–µ—Ç #{report_number}: –Ω–µ—Ç file_path")
            failed_count += 1
            continue

        # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ MD —Ñ–∞–π–ª—É
        md_file = REPORTS_DIR / file_path

        if not md_file.exists():
            print(f"  ‚ö†Ô∏è –û—Ç—á–µ—Ç #{report_number}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - {file_path}")
            failed_count += 1
            continue

        # –ò–∑–≤–ª–µ—á—å –≤–æ–ø—Ä–æ—Å
        new_question = extract_question_from_md(md_file)

        # –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
        if new_question != old_question:
            report["question"] = new_question
            updated_count += 1
            print(f"  ‚úÖ –û—Ç—á–µ—Ç #{report_number}: –æ–±–Ω–æ–≤–ª–µ–Ω")
            print(f"     –ë—ã–ª–æ: {old_question[:60]}...")
            print(f"     –°—Ç–∞–ª–æ: {new_question[:60]}...")
        else:
            print(f"  ‚ûñ –û—Ç—á–µ—Ç #{report_number}: –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")

    print()
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
    print(f"   –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {len(data) - updated_count - failed_count}")
    print(f"   –û—à–∏–±–æ–∫: {failed_count}")
    print()

    # 3. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π index.json
    if updated_count > 0:
        print("3Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
        with open(INDEX_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"   ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {INDEX_FILE}")
    else:
        print("3Ô∏è‚É£ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

    print()
    print("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")

if __name__ == "__main__":
    main()
