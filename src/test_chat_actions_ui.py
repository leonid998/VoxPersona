"""
–Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ chat_actions UI.

–¢–µ—Å—Ç–∏—Ä—É—é—Ç—Å—è:
- –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–Ω–æ–ø–æ–∫ —á–∞—Ç–∞ (–æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤–º–µ—Å—Ç–æ —Ç—Ä–µ—Ö)
- –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å —á–∞—Ç–æ–º (–ü–µ—Ä–µ–π—Ç–∏/–ù–µ—Ç/–ò–∑–º–µ–Ω–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å)
- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ handle_chat_actions
- Callback routing –¥–ª—è chat_actions||
"""

import pytest
from unittest.mock import MagicMock, patch
from datetime import datetime

from conversations import ConversationMetadata, Conversation
from markups import create_chat_button_row, chat_actions_menu_markup


class TestChatActionsUI:
    """–¢–µ—Å—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π UI –ª–æ–≥–∏–∫–∏ —Å chat_actions –º–µ–Ω—é."""

    @pytest.fixture
    def mock_app(self):
        """Mock –æ–±—ä–µ–∫—Ç Pyrogram Client."""
        app = MagicMock()
        app.send_message = MagicMock()
        return app

    def test_create_chat_button_row_single_button(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ create_chat_button_row –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –û–î–ù–£ –∫–Ω–æ–ø–∫—É."""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –º–µ—Ç–∞–¥–∞—Ç—É
        conv = ConversationMetadata(
            conversation_id="test-uuid",
            user_id=12345,
            username="test_user",
            title="–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç —Å –¥–ª–∏–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ –æ–±—Ä–µ–∑–∞—Ç—å—Å—è",
            created_at=datetime.now().isoformat(),
            updated_at=datetime.now().isoformat(),
            is_active=True,
            message_count=5,
            total_tokens=100,
            chat_number=1
        )

        # –ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫—É
        button_row = create_chat_button_row(conv, is_active=True, chat_number=1)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∏–∑ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        assert isinstance(button_row, list)
        assert len(button_row) == 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback_data
        button = button_row[0]
        assert button.callback_data == f"chat_actions||{conv.conversation_id}"
        assert "üìù" in button.text  # –ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
        assert "1." in button.text  # –ù–æ–º–µ—Ä —á–∞—Ç–∞
        assert "–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç" in button.text

    def test_create_chat_button_row_inactive(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞."""
        conv = ConversationMetadata(
            conversation_id="test-uuid-2",
            user_id=12345,
            username="test_user",
            title="–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç",
            created_at=datetime.now().isoformat(),
            updated_at=datetime.now().isoformat(),
            is_active=False,
            message_count=0,
            total_tokens=0,
            chat_number=2
        )

        button_row = create_chat_button_row(conv, is_active=False, chat_number=2)

        assert len(button_row) == 1
        button = button_row[0]
        assert "üí¨" in button.text  # –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
        assert button.callback_data == f"chat_actions||{conv.conversation_id}"

    def test_create_chat_button_row_no_number(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ –±–µ–∑ –Ω–æ–º–µ—Ä–∞ —á–∞—Ç–∞ (—Å—Ç–∞—Ä—ã–µ —á–∞—Ç—ã)."""
        conv = ConversationMetadata(
            conversation_id="test-uuid-old",
            user_id=12345,
            username="test_user",
            title="–°—Ç–∞—Ä—ã–π —á–∞—Ç",
            created_at=datetime.now().isoformat(),
            updated_at=datetime.now().isoformat(),
            is_active=False,
            message_count=0,
            total_tokens=0,
            chat_number=0  # –°—Ç–∞—Ä—ã–π —á–∞—Ç –±–µ–∑ –Ω–æ–º–µ—Ä–∞
        )

        button_row = create_chat_button_row(conv, is_active=False, chat_number=0)

        assert len(button_row) == 1
        button = button_row[0]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
        assert button.text.startswith("üí¨ –°—Ç–∞—Ä—ã–π —á–∞—Ç")
        assert not any(char.isdigit() for char in button.text.split("üí¨")[1].split("–°—Ç–∞—Ä—ã–π")[0])

    def test_create_chat_button_row_truncates_long_names(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–µ–∑–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —á–∞—Ç–æ–≤."""
        long_title = "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ç–æ—á–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω–æ –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ –≤–ª–µ–∑–∞–µ—Ç –≤ –∫–Ω–æ–ø–∫—É"
        conv = ConversationMetadata(
            conversation_id="test-uuid-long",
            user_id=12345,
            username="test_user",
            title=long_title,
            created_at=datetime.now().isoformat(),
            updated_at=datetime.now().isoformat(),
            is_active=True,
            message_count=0,
            total_tokens=0,
            chat_number=5
        )

        button_row = create_chat_button_row(conv, is_active=True, chat_number=5)

        button = button_row[0]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ
        assert "..." in button.text
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É (40 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ + —ç–º–æ–¥–∑–∏ + –Ω–æ–º–µ—Ä)
        assert len(button.text) <= 50

    def test_chat_actions_menu_markup_structure(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ–Ω—é chat_actions."""
        markup = chat_actions_menu_markup("test-uuid", "–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ - —Ç–µ–ø–µ—Ä—å 3 —Å—Ç—Ä–æ–∫–∏
        assert len(markup.inline_keyboard) == 3

        # –°—Ç—Ä–æ–∫–∞ 1: [–ü–µ—Ä–µ–π—Ç–∏]
        row1 = markup.inline_keyboard[0]
        assert len(row1) == 1
        assert row1[0].callback_data == "confirm_switch||test-uuid"
        assert "–ü–µ—Ä–µ–π—Ç–∏" in row1[0].text

        # –°—Ç—Ä–æ–∫–∞ 2: [–ò–∑–º–µ–Ω–∏—Ç—å] [–£–¥–∞–ª–∏—Ç—å]
        row2 = markup.inline_keyboard[1]
        assert len(row2) == 2
        assert row2[0].callback_data == "rename_chat||test-uuid"
        assert row2[1].callback_data == "delete_chat||test-uuid"
        assert "–ò–∑–º–µ–Ω–∏—Ç—å" in row2[0].text
        assert "–£–¥–∞–ª–∏—Ç—å" in row2[1].text

        # –°—Ç—Ä–æ–∫–∞ 3: [–ù–∞–∑–∞–¥]
        row3 = markup.inline_keyboard[2]
        assert len(row3) == 1
        assert row3[0].callback_data == "menu_chats"
        assert "–ù–∞–∑–∞–¥" in row3[0].text

    @patch('conversation_handlers.conversation_manager')
    @patch('conversation_handlers.send_menu')
    async def test_handle_chat_actions(self, mock_send_menu, mock_manager, mock_app):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ handle_chat_actions."""
        from conversation_handlers import handle_chat_actions

        # –°–æ–∑–¥–∞–µ–º mock conversation
        metadata = ConversationMetadata(
            conversation_id="test-uuid",
            user_id=12345,
            username="test_user",
            title="–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç",
            created_at=datetime.now().isoformat(),
            updated_at=datetime.now().isoformat(),
            is_active=True,
            message_count=0,
            total_tokens=0,
            chat_number=1
        )
        conversation = Conversation(metadata=metadata, messages=[])
        mock_manager.load_conversation.return_value = conversation

        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await handle_chat_actions(12345, "test-uuid", mock_app)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ send_menu –±—ã–ª –≤—ã–∑–≤–∞–Ω
        assert mock_send_menu.called
        call_args = mock_send_menu.call_args

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        assert "–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç" in call_args[1]["text"]
        assert "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ" in call_args[1]["text"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞
        assert call_args[1]["reply_markup"] is not None

    @patch('conversation_handlers.conversation_manager')
    async def test_handle_chat_actions_nonexistent_chat(self, mock_manager, mock_app):
        """–¢–µ—Å—Ç handle_chat_actions –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞."""
        from conversation_handlers import handle_chat_actions

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mock - —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        mock_manager.load_conversation.return_value = None

        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await handle_chat_actions(12345, "fake-uuid", mock_app)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        assert mock_app.send_message.called
        call_args = mock_app.send_message.call_args
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω" in call_args[1]["text"].lower()

    def test_chat_actions_callback_data_format(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ callback_data –¥–ª—è chat_actions."""
        conv = ConversationMetadata(
            conversation_id="abc-123-def-456",
            user_id=12345,
            username="test_user",
            title="–ß–∞—Ç",
            created_at=datetime.now().isoformat(),
            updated_at=datetime.now().isoformat(),
            is_active=True,
            message_count=0,
            total_tokens=0,
            chat_number=1
        )

        button_row = create_chat_button_row(conv, is_active=True, chat_number=1)
        button = button_row[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç: "chat_actions||{uuid}"
        assert button.callback_data.startswith("chat_actions||")
        conversation_id = button.callback_data.split("||")[1]
        assert conversation_id == "abc-123-def-456"

    @patch('conversation_handlers.conversation_manager')
    @patch('conversation_handlers.send_menu')
    async def test_handle_chat_actions_exception_handling(self, mock_send_menu, mock_manager, mock_app):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ handle_chat_actions."""
        from conversation_handlers import handle_chat_actions

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mock –¥–ª—è –≤—ã–±—Ä–æ—Å–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        mock_manager.load_conversation.side_effect = Exception("Database error")

        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await handle_chat_actions(12345, "test-uuid", mock_app)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        assert mock_app.send_message.called
        call_args = mock_app.send_message.call_args
        assert "–æ—à–∏–±–∫–∞" in call_args[1]["text"].lower()


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
