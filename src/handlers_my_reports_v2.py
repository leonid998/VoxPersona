"""
–ù–æ–≤—ã–µ async handlers –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ "–ú–æ–∏ –æ—Ç—á–µ—Ç—ã" v2.

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: 100% async —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è FSM workflow –æ–ø–µ—Ä–∞—Ü–∏–π View/Rename/Delete.

–°–æ–∑–¥–∞–Ω–æ: 2025-10-10
–ê–≥–µ–Ω—Ç: python-pro
Task ID: 00001_20251010_144500

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: backend-developer (2025-10-10)
- MessageTracker integration ‚úÖ
- BytesIO file sending ‚úÖ
- Input validation ‚úÖ
- Edge cases handling ‚úÖ
- Logging ‚úÖ
- Async compatibility ‚úÖ

–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: fullstack-developer (2025-10-14)
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ TXT –∏–∑ —á–∞—Ç–∞ ‚úÖ
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ message_id –≤ user_states ‚úÖ
- Graceful degradation ‚úÖ
"""

import logging
import asyncio
from io import BytesIO
from typing import Optional
from datetime import datetime, timedelta
from pyrogram import Client
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message

from config import user_states, get_user_lock
from md_storage import md_storage_manager
from message_tracker import track_and_send  # ‚úÖ –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê (backend-developer)
from markups import chats_menu_markup_dynamic

logger = logging.getLogger(__name__)

# üÜï –§–ê–ó–ê 1.5: –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_FILE_SIZE = 10 * 1024 * 1024  # 10MB –ª–∏–º–∏—Ç –¥–ª—è TXT —Ñ–∞–π–ª–∞
SNAPSHOT_TIMEOUT_MINUTES = 5  # Timeout –¥–ª—è snapshot


# ============================================================================
#                    Helper Functions
# ============================================================================

def _read_file_sync(path: str) -> bytes:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å asyncio.to_thread().

    Args:
        path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É

    Returns:
        bytes: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    """
    with open(path, 'rb') as f:
        return f.read()


def validate_report_index(user_input: str, total_reports: int) -> Optional[int]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –æ—Ç—á–µ—Ç–∞.

    Args:
        user_input: –°—Ç—Ä–æ–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        total_reports: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤

    Returns:
        –í–∞–ª–∏–¥–Ω—ã–π –∏–Ω–¥–µ–∫—Å (1-based) –∏–ª–∏ None
    """
    try:
        # –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–æ
        index = int(user_input.strip())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
        if 1 <= index <= total_reports:
            return index

        return None
    except (ValueError, AttributeError):
        # –ù–µ —á–∏—Å–ª–æ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        return None


def _check_snapshot_timeout(chat_id: int) -> tuple[bool, str]:
    """
    üÜï –§–ê–ó–ê 1.5: –ü—Ä–æ–≤–µ—Ä–∫–∞ timeout snapshot (5 –º–∏–Ω—É—Ç).

    –ï—Å–ª–∏ snapshot —É—Å—Ç–∞—Ä–µ–ª, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç –µ–≥–æ –∏–∑ user_states.

    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        tuple[bool, str]: (is_valid, error_message)
            - is_valid: True –µ—Å–ª–∏ snapshot –≤–∞–ª–∏–¥–µ–Ω, False –µ—Å–ª–∏ —É—Å—Ç–∞—Ä–µ–ª
            - error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –µ—Å–ª–∏ –≤–∞–ª–∏–¥–µ–Ω)
    """
    timestamp = user_states.get(chat_id, {}).get("reports_timestamp")

    if not timestamp:
        return False, "‚ùå Snapshot –Ω–µ –Ω–∞–π–¥–µ–Ω"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ timeout (5 –º–∏–Ω—É—Ç)
    if (datetime.now() - timestamp) > timedelta(minutes=SNAPSHOT_TIMEOUT_MINUTES):
        # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ snapshot
        user_states[chat_id].pop("reports_snapshot", None)
        user_states[chat_id].pop("reports_timestamp", None)
        user_states[chat_id].pop("step", None)

        logger.warning(f"[SnapshotTimeout] User {chat_id} snapshot expired (>{SNAPSHOT_TIMEOUT_MINUTES} min)")

        return False, (
            f"‚ùå **–°–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ —É—Å—Ç–∞—Ä–µ–ª** (–ø—Ä–æ—à–ª–æ >{SNAPSHOT_TIMEOUT_MINUTES} –º–∏–Ω—É—Ç).\n\n"
            "–ó–∞–ø—Ä–æ—Å–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É 'üìÑ –ú–æ–∏ –æ—Ç—á–µ—Ç—ã'."
        )

    return True, ""


# ============================================================================
#                    –ü–û–î–ó–ê–î–ê–ß–ê 2: –ì–ª–∞–≤–Ω—ã–π handler handle_my_reports_v2()
# ============================================================================

async def handle_my_reports_v2(chat_id: int, app: Client) -> None:
    """
    –ù–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ '–ú–æ–∏ –æ—Ç—á–µ—Ç—ã' (v2).

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç TXT —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –æ—Ç—á–µ—Ç–æ–≤ + –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–µ—Ä–∞—Ü–∏–π.

    üî¥ –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª–Ω–æ—Å—Ç—å—é async, –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å await.

    üÜï –û–ë–ù–û–í–õ–ï–ù–ò–ï (2025-10-14): –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö TXT –∏–∑ —á–∞—Ç–∞.

    Workflow:
    1. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ –≤ TXT —Ñ–∞–π–ª
    2. –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π TXT –∏–∑ —á–∞—Ç–∞ (–ø–æ message_id)
    3. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    4. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç message_id –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ user_states
    5. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏: –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å/–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å/–£–¥–∞–ª–∏—Ç—å

    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        app: Pyrogram –∫–ª–∏–µ–Ω—Ç

    Returns:
        None
    """
    try:
        # ‚úÖ Async —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ asyncio.to_thread()
        reports = await asyncio.to_thread(
            md_storage_manager.get_user_reports, chat_id, None
        )

        if not reports:
            # –ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é —á–∞—Ç–æ–≤
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="üìÅ **–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã:**\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.",
                reply_markup=chats_menu_markup_dynamic(chat_id),
                message_type="menu"
            )
            logger.warning(f"[MyReportsV2] No reports found for user {chat_id}")
            return

        # ‚úÖ BytesIO –æ—Ç–ø—Ä–∞–≤–∫–∞ TXT —Ñ–∞–π–ª–∞ (backend-developer)
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ TXT —Ñ–∞–π–ª (async)
        txt_path = await asyncio.to_thread(
            md_storage_manager.export_reports_list_to_txt, chat_id
        )

        if not txt_path:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤.",
                reply_markup=chats_menu_markup_dynamic(chat_id),
                message_type="menu"
            )
            logger.error(f"[MyReportsV2] Failed to export reports list for user {chat_id}")
            return

        # üÜï –£–î–ê–õ–ò–¢–¨ –ü–†–ï–î–´–î–£–©–ò–ô TXT –ò–ó –ß–ê–¢–ê (Phase 1)
        old_message_id = user_states.get(chat_id, {}).get("last_reports_list_message_id")
        if old_message_id:
            try:
                await app.delete_messages(chat_id, old_message_id)
                logger.info(f"[MyReportsV2] Deleted old reports list message: {old_message_id}")
            except Exception as e:
                logger.warning(f"[MyReportsV2] Failed to delete old reports list: {e}")

        file_obj = None
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            content = await asyncio.to_thread(_read_file_sync, txt_path)

            # üÜï –§–ê–ó–ê 1.5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (10MB –ª–∏–º–∏—Ç)
            file_size_bytes = len(content)
            file_size_mb = file_size_bytes / (1024 * 1024)

            if file_size_bytes > MAX_FILE_SIZE:
                logger.warning(
                    f"[MyReportsV2] Reports list too large for user {chat_id}: "
                    f"{file_size_mb:.2f} MB ({len(reports)} reports)"
                )
                await track_and_send(
                    chat_id=chat_id,
                    app=app,
                    text=(
                        f"‚ùå **–°–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π** ({file_size_mb:.1f} MB).\n\n"
                        "**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
                        "‚Ä¢ –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –æ—Ç—á–µ—Ç—ã\n"
                        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã\n"
                        "‚Ä¢ –ê—Ä—Ö–∏–≤–∏—Ä—É–π—Ç–µ –æ—Ç—á–µ—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ"
                    ),
                    reply_markup=chats_menu_markup_dynamic(chat_id),
                    message_type="status_message"
                )
                return

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            logger.info(
                f"[MyReportsV2] Reports list size for user {chat_id}: "
                f"{file_size_mb:.2f} MB ({len(reports)} reports)"
            )

            # –°–æ–∑–¥–∞–µ–º BytesIO
            file_obj = BytesIO(content)
            file_obj.name = f"reports_{chat_id}.txt"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ë–ï–ó –º–µ–Ω—é
            new_message = await app.send_document(
                chat_id=chat_id,
                document=file_obj,
                caption="üìã **–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –æ—Ç—á–µ—Ç–æ–≤**"
            )

            # üÜï –°–û–•–†–ê–ù–ò–¢–¨ message_id –ù–û–í–û–ì–û TXT (Phase 1)
            if chat_id not in user_states:
                user_states[chat_id] = {}
            user_states[chat_id]["last_reports_list_message_id"] = new_message.id
            logger.info(f"[MyReportsV2] Saved new reports list message_id: {new_message.id}")

            logger.info(f"[MyReportsV2] TXT file sent to user {chat_id} ({len(reports)} reports)")

        finally:
            # ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∑–∞–∫—Ä—ã—Ç—å BytesIO
            if file_obj:
                file_obj.close()

        # üÜï –§–ê–ó–ê 1.5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ snapshot —Å timestamp
        user_states[chat_id]["reports_snapshot"] = reports
        user_states[chat_id]["reports_timestamp"] = datetime.now()
        logger.info(f"[MyReportsV2] Snapshot saved for user {chat_id} ({len(reports)} reports)")

        # –ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="report_view")],
            [InlineKeyboardButton("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data="report_rename")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="report_delete")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="menu_chats")]
        ])

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é —á–µ—Ä–µ–∑ track_and_send
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –æ—Ç—á–µ—Ç–∞–º–∏:",
            reply_markup=keyboard,
            message_type="menu"
        )

        logger.info(f"[MyReportsV2] User {chat_id} opened reports menu v2")

    except Exception as e:
        logger.error(f"[MyReportsV2] Error for user {chat_id}: {e}", exc_info=True)
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–æ–≤.",
            reply_markup=chats_menu_markup_dynamic(chat_id),
            message_type="menu"
        )


# ============================================================================
#             –ü–û–î–ó–ê–î–ê–ß–ê 3: FSM –ª–æ–≥–∏–∫–∞ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å" (View workflow)
# ============================================================================

async def handle_report_view_request(chat_id: int, app: Client) -> None:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.

    üî¥ –ö–†–ò–¢–ò–ß–ù–û: Async handler, –≤—Å–µ Pyrogram –º–µ—Ç–æ–¥—ã —Å await.

    Workflow:
    1. –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤
    2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ "report_view_ask_number"
    3. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –æ—Ç—á–µ—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        app: Pyrogram –∫–ª–∏–µ–Ω—Ç

    Returns:
        None
    """
    try:
        # ‚úÖ Async —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        reports = await asyncio.to_thread(
            md_storage_manager.get_user_reports, chat_id, None
        )
        total_reports = len(reports)

        if total_reports == 0:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤.",
                reply_markup=chats_menu_markup_dynamic(chat_id),
                message_type="menu"
            )
            logger.warning(f"[ReportView] User {chat_id} has no reports")
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if chat_id not in user_states:
            user_states[chat_id] = {}
        user_states[chat_id].update({
            "step": "report_view_ask_number",
            "total_reports": total_reports
        })

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        cancel_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="show_my_reports")]
        ])

        # ‚úÖ MessageTracker –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (backend-developer)
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=f"üëÅÔ∏è **–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç—á–µ—Ç–∞ (1-{total_reports}):",
            reply_markup=cancel_markup,
            message_type="input_request"  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤–≤–æ–¥–∞
        )

        logger.info(f"[ReportView] User {chat_id} requested view, total reports: {total_reports}")

    except Exception as e:
        logger.error(f"[ReportView] Error for user {chat_id}: {e}", exc_info=True)
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
            reply_markup=chats_menu_markup_dynamic(chat_id),
            message_type="menu"
        )


async def handle_report_view_input(chat_id: int, user_input: str, app: Client) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.

    üî¥ –ö–†–ò–¢–ò–ß–ù–û: Async —Ñ—É–Ω–∫—Ü–∏—è, –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å await.

    Workflow:
    1. –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    2. –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É
    3. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞
    4. –û—á–∏—â–∞–µ—Ç FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    5. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —á–∞—Ç–æ–≤

    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_input: –í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–µ–∫—Å—Ç
        app: Pyrogram –∫–ª–∏–µ–Ω—Ç

    Returns:
        None
    """
    # üÜï –§–ê–ó–ê 1.5: Concurrent control - –ø–æ–ª—É—á–∞–µ–º Lock
    async with get_user_lock(chat_id):
        # üÜï –§–ê–ó–ê 1.5: –ü—Ä–æ–≤–µ—Ä–∫–∞ timeout snapshot
        is_valid, error_msg = _check_snapshot_timeout(chat_id)
        if not is_valid:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text=error_msg,
                reply_markup=chats_menu_markup_dynamic(chat_id),
                message_type="status_message"
            )
            return

        state = user_states.get(chat_id, {})
        total_reports = state.get("total_reports", 0)

        # ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ validate_report_index() (backend-developer)
        index = validate_report_index(user_input, total_reports)
        if index is None:
            # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            retry_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="report_view")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="show_my_reports")]
            ])

            await track_and_send(
                chat_id=chat_id,
                app=app,
                text=f"‚ùå **–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä**\n\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {total_reports}.",
                reply_markup=retry_markup,
                message_type="input_request"
            )
            logger.warning(f"[ReportView] User {chat_id} entered invalid number: {user_input}")
            return

        # ‚úÖ Async —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å + edge cases
        report = await asyncio.to_thread(
            md_storage_manager.get_report_by_index, chat_id, index
        )

        if not report:
            # ‚úÖ Edge case: –û—Ç—á–µ—Ç —É–¥–∞–ª–µ–Ω –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–æ–º –∏ –¥–µ–π—Å—Ç–≤–∏–µ–º
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ùå **–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.**\n\n–í–æ–∑–º–æ–∂–Ω–æ –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
                reply_markup=chats_menu_markup_dynamic(chat_id),
                message_type="menu"
            )
            logger.warning(f"[ReportView] Report index {index} not found for user {chat_id}")
            user_states[chat_id] = {}  # –û—á–∏—Å—Ç–∏—Ç—å FSM
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        file_path = md_storage_manager.get_report_file_path(report.file_path)
        if not file_path or not file_path.exists():
            # ‚úÖ Edge case: –§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ùå **–§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.**\n\n–í–æ–∑–º–æ–∂–Ω–æ –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
                reply_markup=chats_menu_markup_dynamic(chat_id),
                message_type="menu"
            )
            logger.error(f"[ReportView] Report file not found: {report.file_path}")
            user_states[chat_id] = {}
            return

        # ‚úÖ BytesIO –æ—Ç–ø—Ä–∞–≤–∫–∞ MD —Ñ–∞–π–ª–∞ (backend-developer)
        file_obj = None
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            content = await asyncio.to_thread(_read_file_sync, str(file_path))

            # –°–æ–∑–¥–∞–µ–º BytesIO
            file_obj = BytesIO(content)
            file_obj.name = f"report_{index}.txt"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            await app.send_document(
                chat_id=chat_id,
                document=file_obj,
                caption=f"üìÑ –û—Ç—á–µ—Ç #{index}: {report.question[:50]}..."
            )

            logger.info(f"[ReportView] User {chat_id} viewed report #{index}")

        except Exception as e:
            logger.error(f"[ReportView] Error sending report #{index} to {chat_id}: {e}", exc_info=True)
            await app.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.")

        finally:
            # ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∑–∞–∫—Ä—ã—Ç—å BytesIO
            if file_obj:
                file_obj.close()

        # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        user_states[chat_id].pop("step", None)
        user_states[chat_id].pop("total_reports", None)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
            message_type="status_message"
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é "–ú–æ–∏ –æ—Ç—á–µ—Ç—ã"
        await handle_my_reports_v2(chat_id, app)


# ============================================================================
#        –ü–û–î–ó–ê–î–ê–ß–ê 4: FSM –ª–æ–≥–∏–∫–∞ "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å" (Rename workflow)
# ============================================================================

async def handle_report_rename_request(chat_id: int, app: Client) -> None:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.

    üî¥ –ö–†–ò–¢–ò–ß–ù–û: Async handler, –≤—Å–µ Pyrogram –º–µ—Ç–æ–¥—ã —Å await.

    Workflow:
    1. –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤
    2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ "report_rename_ask_number"
    3. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –æ—Ç—á–µ—Ç–∞

    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        app: Pyrogram –∫–ª–∏–µ–Ω—Ç

    Returns:
        None
    """
    try:
        # ‚úÖ Async —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        reports = await asyncio.to_thread(
            md_storage_manager.get_user_reports, chat_id, None
        )
        total_reports = len(reports)

        if total_reports == 0:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤.",
                reply_markup=chats_menu_markup_dynamic(chat_id),
                message_type="menu"
            )
            logger.warning(f"[ReportRename] User {chat_id} has no reports")
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if chat_id not in user_states:
            user_states[chat_id] = {}
        user_states[chat_id].update({
            "step": "report_rename_ask_number",
            "total_reports": total_reports
        })

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        cancel_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="show_my_reports")]
        ])

        # ‚úÖ MessageTracker –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (backend-developer)
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=f"‚úèÔ∏è **–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç—á–µ—Ç–∞ (1-{total_reports}):",
            reply_markup=cancel_markup,
            message_type="input_request"  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤–≤–æ–¥–∞
        )

        logger.info(f"[ReportRename] User {chat_id} requested rename, total reports: {total_reports}")

    except Exception as e:
        logger.error(f"[ReportRename] Error for user {chat_id}: {e}", exc_info=True)
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
            reply_markup=chats_menu_markup_dynamic(chat_id),
            message_type="menu"
        )


async def handle_report_rename_number_input(chat_id: int, user_input: str, app: Client) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è (—à–∞–≥ 1).

    üî¥ –ö–†–ò–¢–ò–ß–ù–û: Async —Ñ—É–Ω–∫—Ü–∏—è, –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å await.

    Workflow:
    1. –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä
    2. –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É
    3. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ FSM: report_index, old_name
    4. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —à–∞–≥—É "report_rename_ask_new_name"
    5. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∏–º—è

    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_input: –í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–µ–∫—Å—Ç
        app: Pyrogram –∫–ª–∏–µ–Ω—Ç

    Returns:
        None
    """
    state = user_states.get(chat_id, {})
    total_reports = state.get("total_reports", 0)

    # ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ validate_report_index()
    index = validate_report_index(user_input, total_reports)
    if index is None:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        retry_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="report_rename")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="show_my_reports")]
        ])

        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=f"‚ùå **–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä**\n\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {total_reports}.",
            reply_markup=retry_markup,
            message_type="input_request"
        )
        logger.warning(f"[ReportRename] User {chat_id} entered invalid number: {user_input}")
        return

    # ‚úÖ Async —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å + edge cases
    report = await asyncio.to_thread(
        md_storage_manager.get_report_by_index, chat_id, index
    )

    if not report:
        # ‚úÖ Edge case: –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå **–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.**\n\n–í–æ–∑–º–æ–∂–Ω–æ –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=chats_menu_markup_dynamic(chat_id),
            message_type="menu"
        )
        logger.warning(f"[ReportRename] Report index {index} not found for user {chat_id}")
        user_states[chat_id] = {}
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if chat_id not in user_states:
        user_states[chat_id] = {}
    user_states[chat_id].update({
        "step": "report_rename_ask_new_name",
        "report_index": index,
        "old_name": report.question
    })

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    cancel_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="show_my_reports")]
    ])

    # ‚úÖ MessageTracker –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (backend-developer)
    await track_and_send(
        chat_id=chat_id,
        app=app,
        text=f"‚úèÔ∏è **–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç #{index}**\n\n"
             f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:\n`{report.question}`\n\n"
             f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
        reply_markup=cancel_markup,
        message_type="input_request"  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤–≤–æ–¥–∞
    )

    logger.info(f"[ReportRename] User {chat_id} selected report #{index} for rename")


async def handle_report_rename_name_input(chat_id: int, user_input: str, app: Client) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –æ—Ç—á–µ—Ç–∞ (—à–∞–≥ 2).

    üî¥ –ö–†–ò–¢–ò–ß–ù–û: Async —Ñ—É–Ω–∫—Ü–∏—è, –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å await.

    Workflow:
    1. –ü–æ–ª—É—á–∞–µ—Ç report_index –∏–∑ FSM
    2. –í—ã–∑—ã–≤–∞–µ—Ç md_storage_manager.rename_report()
    3. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—É—Å–ø–µ—Ö/–æ—à–∏–±–∫–∞)
    4. –û—á–∏—â–∞–µ—Ç FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    5. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —á–∞—Ç–æ–≤

    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_input: –í–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–æ–≤–æ–µ –∏–º—è
        app: Pyrogram –∫–ª–∏–µ–Ω—Ç

    Returns:
        None
    """
    # üÜï –§–ê–ó–ê 1.5: Concurrent control - –ø–æ–ª—É—á–∞–µ–º Lock
    async with get_user_lock(chat_id):
        # üÜï –§–ê–ó–ê 1.5: –ü—Ä–æ–≤–µ—Ä–∫–∞ timeout snapshot
        is_valid, error_msg = _check_snapshot_timeout(chat_id)
        if not is_valid:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text=error_msg,
                reply_markup=chats_menu_markup_dynamic(chat_id),
                message_type="status_message"
            )
            return

        state = user_states.get(chat_id, {})
        index = state.get("report_index")
        old_name = state.get("old_name", "")

        if not index:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ùå –û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=chats_menu_markup_dynamic(chat_id),
                message_type="menu"
            )
            logger.error(f"[ReportRename] Missing report_index in state for user {chat_id}")
            return

        new_name = user_input.strip()

        # ‚úÖ Async —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å + edge cases
        success = await asyncio.to_thread(
            md_storage_manager.rename_report, chat_id, index, new_name
        )

        if success:
            result_text = (
                f"‚úÖ **–û—Ç—á–µ—Ç #{index} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω!**\n\n"
                f"–°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:\n`{old_name}`\n\n"
                f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:\n`{new_name}`"
            )
            logger.info(f"[ReportRename] User {chat_id} renamed report #{index}: '{old_name}' -> '{new_name}'")
        else:
            # ‚úÖ Edge case: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏
            result_text = "‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç.**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            logger.error(f"[ReportRename] Failed to rename report #{index} for user {chat_id}")

        # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        user_states[chat_id].pop("step", None)
        user_states[chat_id].pop("report_index", None)
        user_states[chat_id].pop("old_name", None)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=result_text,
            message_type="status_message"
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é "–ú–æ–∏ –æ—Ç—á–µ—Ç—ã" —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
        await handle_my_reports_v2(chat_id, app)


# ============================================================================
#           –ü–û–î–ó–ê–î–ê–ß–ê 5: FSM –ª–æ–≥–∏–∫–∞ "–£–¥–∞–ª–∏—Ç—å" (Delete workflow)
# ============================================================================

async def handle_report_delete_request(chat_id: int, app: Client) -> None:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –æ—Ç—á–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.

    üî¥ –ö–†–ò–¢–ò–ß–ù–û: Async handler, –≤—Å–µ Pyrogram –º–µ—Ç–æ–¥—ã —Å await.

    Workflow:
    1. –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤
    2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ "report_delete_ask_number"
    3. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –æ—Ç—á–µ—Ç–∞

    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        app: Pyrogram –∫–ª–∏–µ–Ω—Ç

    Returns:
        None
    """
    try:
        # ‚úÖ Async —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        reports = await asyncio.to_thread(
            md_storage_manager.get_user_reports, chat_id, None
        )
        total_reports = len(reports)

        if total_reports == 0:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤.",
                reply_markup=chats_menu_markup_dynamic(chat_id),
                message_type="menu"
            )
            logger.warning(f"[ReportDelete] User {chat_id} has no reports")
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if chat_id not in user_states:
            user_states[chat_id] = {}
        user_states[chat_id].update({
            "step": "report_delete_ask_number",
            "total_reports": total_reports
        })

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        cancel_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="show_my_reports")]
        ])

        # ‚úÖ MessageTracker –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (backend-developer)
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=f"üóëÔ∏è **–£–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç—á–µ—Ç–∞ (1-{total_reports}):",
            reply_markup=cancel_markup,
            message_type="input_request"  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤–≤–æ–¥–∞
        )

        logger.info(f"[ReportDelete] User {chat_id} requested delete, total reports: {total_reports}")

    except Exception as e:
        logger.error(f"[ReportDelete] Error for user {chat_id}: {e}", exc_info=True)
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
            reply_markup=chats_menu_markup_dynamic(chat_id),
            message_type="menu"
        )


async def handle_report_delete_input(chat_id: int, user_input: str, app: Client) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.

    üî¥ –ö–†–ò–¢–ò–ß–ù–û: Async —Ñ—É–Ω–∫—Ü–∏—è, –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å await.

    Workflow:
    1. –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä
    2. –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É
    3. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ FSM: report_index, report_name
    4. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞, —É–¥–∞–ª–∏—Ç—å" / "–û—Ç–º–µ–Ω–∞"

    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_input: –í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–µ–∫—Å—Ç
        app: Pyrogram –∫–ª–∏–µ–Ω—Ç

    Returns:
        None
    """
    state = user_states.get(chat_id, {})
    total_reports = state.get("total_reports", 0)

    # ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ validate_report_index()
    index = validate_report_index(user_input, total_reports)
    if index is None:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        retry_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="report_delete")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="show_my_reports")]
        ])

        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=f"‚ùå **–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä**\n\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {total_reports}.",
            reply_markup=retry_markup,
            message_type="input_request"
        )
        logger.warning(f"[ReportDelete] User {chat_id} entered invalid number: {user_input}")
        return

    # ‚úÖ Async —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å + edge cases
    report = await asyncio.to_thread(
        md_storage_manager.get_report_by_index, chat_id, index
    )

    if not report:
        # ‚úÖ Edge case: –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå **–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.**\n\n–í–æ–∑–º–æ–∂–Ω–æ –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=chats_menu_markup_dynamic(chat_id),
            message_type="menu"
        )
        logger.warning(f"[ReportDelete] Report index {index} not found for user {chat_id}")
        user_states[chat_id] = {}
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if chat_id not in user_states:
        user_states[chat_id] = {}
    user_states[chat_id].update({
        "step": "report_delete_confirm",
        "report_index": index,
        "report_name": report.question
    })

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"report_delete_confirm||{index}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="show_my_reports")]
    ])

    # ‚úÖ MessageTracker –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (backend-developer)
    await track_and_send(
        chat_id=chat_id,
        app=app,
        text=f"üóëÔ∏è **–£–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç #{index}?**\n\n"
             f"`{report.question}`\n\n"
             f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=confirm_markup,
        message_type="confirmation"  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    )

    logger.info(f"[ReportDelete] User {chat_id} selected report #{index} for deletion")


async def handle_report_delete_confirm(chat_id: int, app: Client) -> None:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.

    üî¥ –ö–†–ò–¢–ò–ß–ù–û: Async handler, –≤—Å–µ Pyrogram –º–µ—Ç–æ–¥—ã —Å await.

    Workflow:
    1. –ü–æ–ª—É—á–∞–µ—Ç report_index –∏–∑ FSM
    2. –í—ã–∑—ã–≤–∞–µ—Ç md_storage_manager.delete_report()
    3. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—É—Å–ø–µ—Ö/–æ—à–∏–±–∫–∞)
    4. –û—á–∏—â–∞–µ—Ç FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    5. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —á–∞—Ç–æ–≤

    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        app: Pyrogram –∫–ª–∏–µ–Ω—Ç

    Returns:
        None
    """
    # üÜï –§–ê–ó–ê 1.5: Concurrent control - –ø–æ–ª—É—á–∞–µ–º Lock
    async with get_user_lock(chat_id):
        # üÜï –§–ê–ó–ê 1.5: –ü—Ä–æ–≤–µ—Ä–∫–∞ timeout snapshot
        is_valid, error_msg = _check_snapshot_timeout(chat_id)
        if not is_valid:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text=error_msg,
                reply_markup=chats_menu_markup_dynamic(chat_id),
                message_type="status_message"
            )
            return

        state = user_states.get(chat_id, {})
        index = state.get("report_index")
        report_name = state.get("report_name", "")

        if not index:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ùå –û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=chats_menu_markup_dynamic(chat_id),
                message_type="menu"
            )
            logger.error(f"[ReportDelete] Missing report_index in state for user {chat_id}")
            return

        # ‚úÖ Async —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å + edge cases
        success = await asyncio.to_thread(
            md_storage_manager.delete_report, chat_id, index
        )

        if success:
            result_text = f"‚úÖ **–û—Ç—á–µ—Ç #{index} —É–¥–∞–ª–µ–Ω!**\n\n`{report_name}`"
            logger.info(f"[ReportDelete] User {chat_id} deleted report #{index}: '{report_name}'")
        else:
            # ‚úÖ Edge case: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
            result_text = "‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç.**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            logger.error(f"[ReportDelete] Failed to delete report #{index} for user {chat_id}")

        # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        user_states[chat_id].pop("step", None)
        user_states[chat_id].pop("report_index", None)
        user_states[chat_id].pop("report_name", None)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=result_text,
            message_type="status_message"
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é "–ú–æ–∏ –æ—Ç—á–µ—Ç—ã" —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
        await handle_my_reports_v2(chat_id, app)
