import time
import threading
import os
import asyncio
from pyrogram import Client
from pyrogram.types import Message
from pyrogram.enums import ParseMode
from io import StringIO
from typing import Optional
from langchain.embeddings.base import Embeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter
import logging
from .datamodels import spinner_chars, OPENAI_AUDIO_EXTS
from .config import ENC, TELEGRAM_MESSAGE_THRESHOLD, PREVIEW_TEXT_LENGTH, EMBEDDING_MODEL
from .constants import ERROR_FILE_SEND_FAILED

# –£—Å–ª–æ–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è sentence_transformers
try:
    from sentence_transformers import SentenceTransformer
    _sentence_transformers_available = True
except ImportError:
    _sentence_transformers_available = False
    SentenceTransformer = None
    if not os.getenv('CI'):
        logging.warning("sentence_transformers –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

def has_sentence_transformers() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ sentence_transformers."""
    return _sentence_transformers_available


def get_embedding_model():
    global EMBEDDING_MODEL
    if EMBEDDING_MODEL is None:
        if not has_sentence_transformers():
            logging.error("sentence_transformers –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –º–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return None
        logging.info("–ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ BAAI/bge-m3...")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ SentenceTransformer –¥–æ—Å—Ç—É–ø–µ–Ω –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        if SentenceTransformer is not None:
            EMBEDDING_MODEL = SentenceTransformer('all-MiniLM-L6-v2', device='cpu')  # pyright: ignore[reportConstantRedefinition]  
    return EMBEDDING_MODEL

class CustomSentenceTransformerEmbeddings(Embeddings):
    def __init__(self, model):
        super().__init__()
        self.model = model

    def embed_documents(self, texts: list[str]) -> list[list[float]]:
        embeddings = self.model.encode(texts, normalize_embeddings=True, convert_to_numpy=True)
        return embeddings.tolist()

    def embed_query(self, text: str) -> list[float]:
        embedding = self.model.encode([text], normalize_embeddings=True, convert_to_numpy=True)[0]
        return embedding.tolist()

def openai_audio_filter(_, __, m: Message) -> bool:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
    –ª–∏–±–æ –¥–æ–∫—É–º–µ–Ω—Ç —Å –∏–º–µ–Ω–µ–º, –æ–∫–∞–Ω—á–∏–≤–∞—é—â–∏–º—Å—è –Ω–∞ –æ–¥–∏–Ω –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö Whisper —Ñ–æ—Ä–º–∞—Ç–æ–≤.
    """
    # 1) –ï—Å–ª–∏ —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ (voice) –∏–ª–∏ "–æ–±—ã—á–Ω–æ–µ" –∞—É–¥–∏–æ (audio) ‚Äî —Å—Ä–∞–∑—É True
    if m.voice or m.audio:
        return True

    # 2) –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ñ–∞–π–ª–æ–º, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    if m.document and m.document.file_name:
        file_name = m.document.file_name.lower()
        return any(file_name.endswith(ext) for ext in OPENAI_AUDIO_EXTS)

    return False

def run_loading_animation(chat_id: int, msg_id: int, stop_event: threading.Event, app: Client):
    """
    –§–æ–Ω–æ–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è "—Å–ø–∏–Ω–Ω–µ—Ä–∞", –ø–æ–∫–∞ stop_event –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.
    """
    idx = 0
    while not stop_event.is_set():
        sp = spinner_chars[idx % len(spinner_chars)]
        try:
            app.send_chat_action(chat_id, msg_id, f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞... {sp}")
        except:
            pass
        idx += 1
        _ = time.sleep(0.5)

def sort_tuples_by_second_item(tuple_list):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ sorted() —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º key
    return sorted(tuple_list, key=lambda x: x[1])

def count_tokens(text: str) -> int:
    return len(ENC.encode(text)) + 10

def split_markdown_text(markdown_text, chunk_size=800, chunk_overlap=100): 
    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size=chunk_size,
        chunk_overlap=chunk_overlap,
        separators=[
            "\n\n", 
            "\n", 
            " ", 
            ""
        ]
    )
    return text_splitter.split_text(markdown_text)

def split_and_send_long_text(text: str, chat_id: int, app: Client, chunk_size: int = 4096, parse_mode: str | None = None):
    """
    –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —Ä–∞–∑–±–∏—Ç—ã—Ö –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤.
    """
    for i in range(0, len(text), chunk_size):
        app.send_message(chat_id, text[i:i+chunk_size], parse_mode=parse_mode)

def clean_text(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç –≤–µ–¥—É—â–∏–µ # –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é —á–∞–Ω–∫–æ–≤."""
    cleaned_lines = []
    for line in text.splitlines():
        if line.strip().startswith('#'):
            cleaned_lines.append(line.lstrip('#').strip())
        else:
            cleaned_lines.append(line)
    return '\n'.join(cleaned_lines)

def grouped_reports_to_string(grouped_reports):
    output = StringIO()
    
    for transcription_id, texts in grouped_reports.items():
        output.write(f"# –ß–∞–Ω–∫ transcription_id {transcription_id}\n\n")
        output.write("\n\n".join(texts))
        output.write("\n\n" + "="*100 + "\n\n")
    
    result = output.getvalue()
    output.close()
    
    return result


def get_username_from_chat(chat_id: int, app: Optional[Client] = None) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞."""
    try:
        if app:
            chat = app.get_chat(chat_id)
            return chat.username or f"user_{chat_id}"
        return f"user_{chat_id}"
    except Exception as e:
        logging.error(f"Failed to get username for chat_id {chat_id}: {e}")
        return f"user_{chat_id}"


def create_preview_text(text: str, length: int = PREVIEW_TEXT_LENGTH) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã."""
    if len(text) <= length:
        return text
    
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–ª –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–ª–∏–Ω—ã
    preview = text[:length]
    last_space = preview.rfind(' ')
    
    if last_space > length * 0.8:  # –ï—Å–ª–∏ –ø—Ä–æ–±–µ–ª –Ω–µ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –Ω–∞—á–∞–ª—É
        preview = preview[:last_space]
    
    return preview + "..."


async def smart_send_text(
    text: str,
    chat_id: int,
    app: Client,
    username: Optional[str] = None,
    question: str = "",
    search_type: str = "fast",
    parse_mode: Optional[ParseMode] = None
) -> bool:
    """
    –£–º–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ —Ñ–∞–π–ª–æ–º.
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        chat_id: ID —á–∞—Ç–∞
        app: Pyrogram –∫–ª–∏–µ–Ω—Ç
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ None, –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        question: –ò—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        search_type: –¢–∏–ø –ø–æ–∏—Å–∫–∞ ("fast" –∏–ª–∏ "deep")
        parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    
    Returns:
        bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º username –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        if username is None:
            username = get_username_from_chat(chat_id, app)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å @ –µ—Å–ª–∏ –µ—Å—Ç—å
        username = username.lstrip('@')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏
        if len(text) <= TELEGRAM_MESSAGE_THRESHOLD:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                sent_message = app.send_message(chat_id, text, parse_mode=parse_mode)
                
                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                asyncio.create_task(_save_to_history_async(
                    chat_id, username, sent_message.id, "bot_answer", text,
                    sent_as="message", search_type=search_type
                ))
                
                logging.info(f"Message sent to {chat_id}, length: {len(text)} chars")
                return True
                
            except Exception as e:
                logging.error(f"Failed to send message: {e}")
                return False
        
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
            return await _send_as_file(
                text, chat_id, app, username, question, search_type, parse_mode
            )
            
    except Exception as e:
        logging.error(f"Smart send failed: {e}")
        return False


async def _send_as_file(
    text: str,
    chat_id: int,
    app: Client,
    username: str,
    question: str,
    search_type: str,
    parse_mode: Optional[ParseMode] = None
) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∫–∞–∫ MD —Ñ–∞–π–ª —Å –ø—Ä–µ–≤—å—é."""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é
        preview = create_preview_text(text)
        preview_message = f"üìÑ **–í–∞—à –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!**\n\n{preview}\n\nüìé –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª–æ–º."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
        try:
            preview_msg = app.send_message(chat_id, preview_message, parse_mode=parse_mode)
        except Exception as e:
            logging.error(f"Failed to send preview: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–µ–≤—å—é
            preview_msg = None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º MD —Ñ–∞–π–ª
        from .md_storage import md_storage_manager
        file_path = md_storage_manager.save_md_report(
            content=text,
            user_id=chat_id,
            username=username,
            question=question,
            search_type=search_type
        )
        
        if not file_path:
            logging.error("Failed to save MD report")
            # Fallback –∫ –æ–±—ã—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
            return await _fallback_to_split_send(text, chat_id, app, parse_mode)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        try:
            sent_file_msg = app.send_document(
                chat_id,
                file_path,
                caption=f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç {search_type} –ø–æ–∏—Å–∫–∞\nüìù –¢–æ–∫–µ–Ω–æ–≤: {count_tokens(text):,}"
            )
            
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            asyncio.create_task(_save_to_history_async(
                chat_id, username, sent_file_msg.id, "bot_answer", text,
                sent_as="file", file_path=file_path, search_type=search_type
            ))
            
            logging.info(f"File sent to {chat_id}, path: {file_path}")
            return True
            
        except Exception as e:
            logging.error(f"Failed to send file: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            try:
                app.send_message(chat_id, ERROR_FILE_SEND_FAILED)
            except:
                pass
            
            # Fallback –∫ –æ–±—ã—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
            return await _fallback_to_split_send(text, chat_id, app, parse_mode)
            
    except Exception as e:
        logging.error(f"Failed to send as file: {e}")
        return await _fallback_to_split_send(text, chat_id, app, parse_mode)


async def _fallback_to_split_send(
    text: str, 
    chat_id: int, 
    app: Client, 
    parse_mode: Optional[ParseMode] = None
) -> bool:
    """Fallback –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ —á–∞—Å—Ç—è–º."""
    try:
        split_and_send_long_text(text, chat_id, app, parse_mode=parse_mode)
        logging.info(f"Fallback split send completed for {chat_id}")
        return True
    except Exception as e:
        logging.error(f"Fallback split send failed: {e}")
        return False


async def _save_to_history_async(
    user_id: int,
    username: str,
    message_id: int,
    message_type: str,
    text: str,
    sent_as: Optional[str] = None,
    file_path: Optional[str] = None,
    search_type: Optional[str] = None
) -> None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é."""
    try:
        from .chat_history import chat_history_manager
        success = chat_history_manager.save_message_to_history(
            user_id=user_id,
            username=username,
            message_id=message_id,
            message_type=message_type,
            text=text,
            sent_as=sent_as,
            file_path=file_path,
            search_type=search_type
        )
        
        if not success:
            logging.error(f"Failed to save message to history: user_id={user_id}")
            
    except Exception as e:
        logging.error(f"Error saving to history: {e}")


def smart_send_text_sync(
    text: str,
    chat_id: int,
    app: Client,
    username: Optional[str] = None,
    question: str = "",
    search_type: str = "fast",
    parse_mode: Optional[ParseMode] = None
) -> bool:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è smart_send_text.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π event loop –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π.
    """
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π loop
        loop = asyncio.get_event_loop()
        if loop.is_running():
            # –ï—Å–ª–∏ loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º run_in_executor
            future = asyncio.ensure_future(
                smart_send_text(text, chat_id, app, username, question, search_type, parse_mode)
            )
            # –ù–µ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            return True
        else:
            # –ï—Å–ª–∏ loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            return loop.run_until_complete(
                smart_send_text(text, chat_id, app, username, question, search_type, parse_mode)
            )
    except RuntimeError:
        # –ï—Å–ª–∏ –Ω–µ—Ç event loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        return asyncio.run(
            smart_send_text(text, chat_id, app, username, question, search_type, parse_mode)
        )
    except Exception as e:
        logging.error(f"Smart send sync failed: {e}")
        # Fallback –∫ –æ–±—ã—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        try:
            split_and_send_long_text(text, chat_id, app, parse_mode=parse_mode)
            return True
        except:
            return False