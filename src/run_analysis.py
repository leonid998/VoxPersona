import logging
import threading
from openai import PermissionDeniedError as OpenAIPermissionError
from pyrogram import Client
from pyrogram.enums import ParseMode
import re
import asyncio
import aiohttp

from config import ANTHROPIC_API_KEY, ANTHROPIC_API_KEY_2, ANTHROPIC_API_KEY_3, ANTHROPIC_API_KEY_4, ANTHROPIC_API_KEY_5, ANTHROPIC_API_KEY_6, ANTHROPIC_API_KEY_7
from utils import run_loading_animation, smart_send_text_unified, grouped_reports_to_string, get_username_from_chat
from db_handler.db import fetch_prompts_for_scenario_reporttype_building, fetch_prompt_by_name
from datamodels import mapping_report_type_names, mapping_building_names, REPORT_MAPPING, CLASSIFY_DESIGN, CLASSIFY_INTERVIEW
from menus import send_main_menu
from markups import interview_menu_markup, design_menu_markup, main_menu_markup, make_dialog_markup
from analysis import analyze_methodology, classify_query, extract_from_chunk_parallel, aggregate_citations, classify_report_type, generate_db_answer, extract_from_chunk_parallel_async
from storage import save_user_input_to_db, build_reports_grouped, create_db_in_memory


def init_rags(existing_rags: dict | None = None) -> dict:
    rags = existing_rags.copy() if existing_rags else {}

    # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∫–∏–µ –∏–Ω–¥–µ–∫—Å—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if rags:
        logging.info(f"üì¶ –ü–æ–ª—É—á–µ–Ω—ã pre-loaded RAG –∏–Ω–¥–µ–∫—Å—ã: {list(rags.keys())}")
    else:
        logging.info("üì¶ Pre-loaded RAG –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –≤—Å–µ —Å –Ω—É–ª—è")

    rag_configs = [
        ("–ò–Ω—Ç–µ—Ä–≤—å—é", None, None),
        ("–î–∏–∑–∞–π–Ω", None, None),
        ("–ò–Ω—Ç–µ—Ä–≤—å—é", "–û—Ü–µ–Ω–∫–∞ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é", None),
        ("–ò–Ω—Ç–µ—Ä–≤—å—é", "–û—Ç—á–µ—Ç –æ —Å–≤—è–∑–∫–∞—Ö", None),
        ("–ò–Ω—Ç–µ—Ä–≤—å—é", "–û–±—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã", None),
        ("–ò–Ω—Ç–µ—Ä–≤—å—é", "–§–∞–∫—Ç–æ—Ä—ã –≤ —ç—Ç–æ–º –∑–∞–≤–µ–¥–µ–Ω–∏–∏", None),
        ("–î–∏–∑–∞–π–Ω", "–û—Ü–µ–Ω–∫–∞ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –∞—É–¥–∏—Ç–∞", None),
        ("–î–∏–∑–∞–π–Ω", "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–µ –∞—É–¥–∏—Ç–∞", None),
        ("–î–∏–∑–∞–π–Ω", "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –∞—É–¥–∏—Ç–∞", None),
    ]

    for config in rag_configs:
        scenario_name, report_type, _ = config
        try:
            rag_name = report_type if report_type else scenario_name
            if rag_name in rags:
                logging.info(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ {rag_name}: —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω —Å –¥–∏—Å–∫–∞")
                continue
            logging.info(f"üèóÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ {rag_name}...")
            content = build_reports_grouped(scenario_name=scenario_name, report_type=report_type)
            content_str = grouped_reports_to_string(content)

            if rag_name == "–ò–Ω—Ç–µ—Ä–≤—å—é" or rag_name == "–î–∏–∑–∞–π–Ω":
                rag_db = create_db_in_memory(content_str)
                rags[rag_name] = rag_db
                logging.info(f"‚úÖ FAISS –∏–Ω–¥–µ–∫—Å –¥–ª—è {rag_name} —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                rags[rag_name] = content_str
                logging.info(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è {rag_name} —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞–≥–∞ –¥–ª—è {config}: {e}")
            continue  # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –∏–Ω–¥–µ–∫—Å–æ–º –≤–º–µ—Å—Ç–æ return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–∏ –ª–∏ —Å–æ–∑–¥–∞–Ω—ã —Ö–æ—Ç—è –±—ã –∫–∞–∫–∏–µ-—Ç–æ –∏–Ω–¥–µ–∫—Å—ã
    if not rags:
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ RAG –∏–Ω–¥–µ–∫—Å–∞!")

    return rags

def run_fast_search(text: str, rag) -> str:
    logging.info("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞")
    answer = generate_db_answer(text, rag)
    return answer

def run_deep_search(content: str, text: str, chat_id: int, app: Client, category: str) -> str:
    api_keys = [ANTHROPIC_API_KEY, ANTHROPIC_API_KEY_2, ANTHROPIC_API_KEY_3, ANTHROPIC_API_KEY_4, ANTHROPIC_API_KEY_5, ANTHROPIC_API_KEY_6, ANTHROPIC_API_KEY_7]

    chunks = re.split(r'^# –ß–∞–Ω–∫ transcription_id \d+', content, flags=re.MULTILINE)
    chunks = [chunk.strip() for chunk in chunks if chunk.strip()]

    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è {category}")

    if not chunks:
        app.send_message(chat_id, f"–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –æ—Ç—á–µ—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")
        return

    extract_prompt = fetch_prompt_by_name(prompt_name="prompt_extract")
    aggregation_prompt = fetch_prompt_by_name(prompt_name="prompt_agg")

    # === –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ extract_from_chunk_parallel_async ===
    async def main():
        async with aiohttp.ClientSession() as session:
            return await extract_from_chunk_parallel_async(
                text=text,
                chunks=chunks,
                extract_prompt=extract_prompt,
                api_keys=api_keys,
                session=session
            )

    try:
        loop = asyncio.get_event_loop()
        results = loop.run_until_complete(main())
    except RuntimeError as e:
        results = asyncio.run(main())

    citations = [r for r in results if r != "##not_found##" and not r.startswith("[ERROR]")]

    if citations:
        aggregated_answer = aggregate_citations(
            text=text,
            citations=citations,
            aggregation_prompt=aggregation_prompt
        )
    else:
        aggregated_answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞—Ö."

    return aggregated_answer

def run_dialog_mode(text: str, chat_id: int, app: Client, rags: dict, deep_search: bool = False, conversation_id: str = None):
    try:
        category = classify_query(text)
        logging.info(f"–°—Ü–µ–Ω–∞—Ä–∏–π: {category}")

        if category.lower() == "–¥–∏–∑–∞–π–Ω":
            prompt_name="prompt_classify_design"
            scenario_name="–î–∏–∑–∞–π–Ω"
        elif category.lower() == "–∏–Ω—Ç–µ—Ä–≤—å—é":
            prompt_name="prompt_classify_interview"
            scenario_name="–ò–Ω—Ç–µ—Ä–≤—å—é"
        else:
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—á–µ—Ç–æ–≤")

        content = build_reports_grouped(scenario_name=scenario_name, report_type=None)
        content = grouped_reports_to_string(content)
        rag = rags[scenario_name]

        # –ü–æ–ª—É—á–∞–µ–º username
        username = get_username_from_chat(chat_id, app)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –ü–ï–†–ï–î –ø–æ–∏—Å–∫–æ–º
        from chat_history import chat_history_manager
        chat_history_manager.save_message_to_history(
            user_id=chat_id,
            username=username,
            message_id=0,  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_type="user_question",
            text=text
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ conversations (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω conversation_id)
        if conversation_id:
            from conversation_manager import conversation_manager
            from conversations import ConversationMessage
            from datetime import datetime

            user_message = ConversationMessage(
                timestamp=datetime.now().isoformat(),
                message_id=0,  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                type="user_question",
                text=text,
                tokens=0,  # –¢–æ–∫–µ–Ω—ã –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ —Å—á–∏—Ç–∞–µ–º
                sent_as=None,
                file_path=None,
                search_type="deep" if deep_search else "fast"
            )

            conversation_manager.add_message(
                user_id=chat_id,
                conversation_id=conversation_id,
                message=user_message
            )

        if deep_search:
            app.send_message(chat_id, "–ó–∞–ø—É—â–µ–Ω–æ –ì–ª—É–±–æ–∫–æ–µ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")
            logging.info("–ó–∞–ø—É—â–µ–Ω–æ –ì–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")

            # report_type_code = classify_report_type(text, prompt_name=prompt_name)
            # report_type = CLASSIFY_INTERVIEW[report_type_code] if scenario_name == "–ò–Ω—Ç–µ—Ä–≤—å—é" else CLASSIFY_DESIGN[report_type_code]
            # content = rags[report_type]
            # logging.info(f"–¢–∏–ø –æ—Ç—á–µ—Ç–∞: {report_type}")
            answer = run_deep_search(content, text=text, chat_id=chat_id, app=app, category=category)
        else:
            app.send_message(chat_id, "–ó–∞–ø—É—â–µ–Ω –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫")
            logging.info("–ó–∞–ø—É—â–µ–Ω –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫")

            # content = build_reports_grouped(scenario_name=scenario_name, report_type=None)
            # content = grouped_reports_to_string(content)
            # rag = rags[scenario_name]
            answer = run_fast_search(text=text, rag=rag)

        formatted_response = f"*–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–∞:* {category}\n\n{answer}"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ MD —Ñ–∞–π–ª–æ–º
        smart_send_text_unified(
            text=formatted_response,
            chat_id=chat_id,
            app=app,
            username=username,
            question=text,
            search_type="deep" if deep_search else "fast",
            parse_mode=ParseMode.MARKDOWN,
            conversation_id=conversation_id
        )

        max_log_length = 3000
        answer_to_log = answer if len(answer) <= max_log_length else answer[:max_log_length] + "... [–æ–±—Ä–µ–∑–∞–Ω–æ]"
        logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω | –û—Ç–≤–µ—Ç: {answer_to_log}")

    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        app.send_message(chat_id, error_message) #TODO: –Ω–µ –∑–∞–±—ã—Ç—å —É–¥–∞–ª–∏—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    finally:
        # –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
        app.send_message(
            chat_id,
            "–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å?",
            reply_markup=make_dialog_markup()
        )

def run_analysis_pass(
    chat_id: int,
    source_text: str,
    label: str,
    scenario_name: str,
    data: dict,
    prompts: list[tuple[str, int]],
    app: Client,
    transcription_text: str,
    is_show_analysis: bool=True,
    conversation_id: str = None
) -> str:
    """
    –û–¥–∏–Ω ¬´–ø—Ä–æ—Ö–æ–¥¬ª –∞–Ω–∞–ª–∏–∑–∞: –∫—Ä—É—Ç–∏—Ç —Å–ø–∏–Ω–Ω–µ—Ä, –≤—ã–∑—ã–≤–∞–µ—Ç analyze_methodology,
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç) —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    msg_ = app.send_message(chat_id, f"‚è≥ –ê–Ω–∞–ª–∏–∑: {label}...")
    st_ev = threading.Event()
    sp_th = threading.Thread(target=run_loading_animation, args=(chat_id, msg_.id, st_ev, app))
    sp_th.start()

    try:
        audit_text = analyze_methodology(source_text, prompts)

        if is_show_analysis:
            # –ü–æ–ª—É—á–∞–µ–º username
            username = get_username_from_chat(chat_id, app)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ MD —Ñ–∞–π–ª–æ–º
            smart_send_text_unified(
                text=audit_text,
                chat_id=chat_id,
                app=app,
                username=username,
                question="",  # –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                search_type="analysis",
                parse_mode=None,
                conversation_id=conversation_id
            )

            app.edit_message_text(chat_id, msg_.id, f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {label}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (—Ç–µ–ø–µ—Ä—å –≤—Å—ë ‚Äî —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, place_name, city(–µ—Å–ª–∏ –¥–∏–∑–∞–π–Ω), building).
        save_user_input_to_db(transcript=transcription_text, scenario_name=scenario_name, data=data, label=label, audit_text=audit_text)
        logging.info("–û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
    except OpenAIPermissionError:
        logging.exception("–ù–µ–≤–µ—Ä–Ω—ã–π API_KEY?")
        app.edit_message_text(chat_id, msg_.id, "üö´ –û—à–∏–±–∫–∞: LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–∫–ª—é—á/—Ä–µ–≥–∏–æ–Ω).")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")
        app.edit_message_text(chat_id, msg_.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        audit_text = ""
    finally:
        st_ev.set()
        sp_th.join()
        try:
            app.delete_messages(chat_id, msg_.id)
        except:
            pass

    return audit_text

def run_analysis_with_spinner(chat_id: int, processed_texts: dict[int, str], data: dict, app: Client, callback_data: str, transcription_text: str):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç ¬´—Å–ø–∏–Ω–Ω–µ—Ä¬ª –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞.
    –ü–æ–¥–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –∏–∑ –ë–î (scenario, report_type, building).
    """
    label = REPORT_MAPPING[callback_data]
    building_name = data.get("type_of_location", "")
    txt = processed_texts.get(chat_id, "")

    if not txt:
        app.send_message(chat_id, "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ/–æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∞—É–¥–∏–æ/—Ç–µ–∫—Å—Ç.")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º scenario_name –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    if "int_" in callback_data:
        scenario_name = "–ò–Ω—Ç–µ—Ä–≤—å—é"
    elif "design" in callback_data:
        scenario_name = "–î–∏–∑–∞–π–Ω"
    else:
        scenario_name = ""

    report_type_desc = mapping_report_type_names.get(callback_data, label)

    prompts_list = []
    if not building_name:
        building_name = mapping_building_names[building_name]

    if scenario_name and building_name and report_type_desc:
        try:
            prompts_list = fetch_prompts_for_scenario_reporttype_building(
                scenario_name=scenario_name,
                report_type_desc=report_type_desc,
                building_type=building_name
            )
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ –ø—Ä–æ–º–ø—Ç–æ–≤")

    json_prompts = [(p, rp) for (p, rp, is_json_prompt) in prompts_list if is_json_prompt]
    ordinary_prompts = [(p, rp) for (p, rp, is_json_prompt) in prompts_list if not is_json_prompt]

    if scenario_name == "–ò–Ω—Ç–µ—Ä–≤—å—é" and report_type_desc == "–û–±—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã":
        logging.info("–ì–æ—Ç–æ–≤–ª—é –¥–≤–∞ –æ—Ç—á—ë—Ç–∞")
        # prompts_list -> [(prompt_text, run_part, is_json_prompts), ...]

        # –°–≥—Ä—É–ø–ø–∏—Ä—É–µ–º. –ù–∞–ø—Ä–∏–º–µ—Ä, part1 = –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã, –≥–¥–µ run_part=1
        #               part2 = –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã, –≥–¥–µ run_part=2
        part1 = [(p, rp) for (p, rp) in ordinary_prompts if rp == 1]
        part2 = [(p, rp) for (p, rp) in ordinary_prompts if rp == 2]

        # –ï—Å–ª–∏ run_part –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω ‚Äî part1 –∏–ª–∏ part2 –±—É–¥—É—Ç –ø—É—Å—Ç—ã,
        # –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ–≤–µ—Ä–∫–æ–π. –í –ø—Ä–æ—Å—Ç–æ–º —Å–ª—É—á–∞–µ:
        if part1:
            # –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥
            result1 = run_analysis_pass(
                chat_id=chat_id,
                source_text=txt,
                label=label,
                scenario_name=scenario_name,
                data=data,
                app=app,
                prompts=part1,
                is_show_analysis=False,
                transcription_text=transcription_text
            )

            logging.info("–û—Ç—á–µ—Ç —Å –æ–±—â–∏–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
            # –í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—É–∂–µ –≤–Ω—É—Ç—Ä–∏ run_analysis_pass)
        if part2:
            # –í—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥
            result2 = run_analysis_pass(
                chat_id=chat_id,
                source_text=txt,
                label=label,
                scenario_name=scenario_name,
                data=data,
                app=app,
                prompts=part2,
                is_show_analysis=False,
                transcription_text=transcription_text
            )

            logging.info("–û—Ç—á–µ—Ç —Å –Ω–µ–∏–∑—É—á–µ–Ω–Ω—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
            # –í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—É–∂–µ –≤–Ω—É—Ç—Ä–∏ run_analysis_pass)
        json_result = run_analysis_pass(
            chat_id=chat_id,
            source_text=result1 + "\n" + result2,
            label=label,
            scenario_name=scenario_name,
            data=data,
            app=app,
            prompts=json_prompts,
            is_show_analysis=True,
            transcription_text=transcription_text
        )

        logging.info("–ü—Ä–æ–≤–µ–¥—ë–Ω –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    else:
        # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π –æ—Ç—á—ë—Ç ‚Äî –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º run_part
        # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ prompts_list —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–¥–∏–Ω –Ω–∞–±–æ—Ä (–∏–ª–∏ –º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–æ–≤),
        # –Ω–æ –≤—Å–µ –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ –æ–¥–∏–Ω –≤—ã–∑–æ–≤ analyze_methodology.
        result = run_analysis_pass(
            chat_id=chat_id,
            source_text=txt,
            label=label,
            scenario_name=scenario_name,
            data=data,
            app=app,
            prompts=ordinary_prompts,
            is_show_analysis=False,
            transcription_text=transcription_text
        )

        logging.info("–û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")

        json_result = run_analysis_pass(
            chat_id=chat_id,
            source_text=result,
            label=label,
            scenario_name=scenario_name,
            data=data,
            app=app,
            prompts=json_prompts,
            is_show_analysis=True,
            transcription_text=transcription_text
        )

        logging.info("–ü—Ä–æ–≤–µ–¥—ë–Ω –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")

    if scenario_name == "–ò–Ω—Ç–µ—Ä–≤—å—é":
        app.send_message(chat_id, "–ö–∞–∫–æ–π –æ—Ç—á—ë—Ç —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=interview_menu_markup())
    elif scenario_name == "–î–∏–∑–∞–π–Ω":
        app.send_message(chat_id, "–ö–∞–∫–æ–π –æ—Ç—á—ë—Ç —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=design_menu_markup())

    send_main_menu(chat_id, app)
