"""
Handlers –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º (Authorization System).

–ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç 38 —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (14 handlers)
- –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏ (7 handlers)
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é (2 handlers)
- FSM —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è (4 handlers)
- –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã (6 handlers)
- –ü–∞–≥–∏–Ω–∞—Ü–∏—è (2 handlers)
- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ (3 handlers)

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:
- AuthManager —á–µ—Ä–µ–∑ config.get_auth_manager()
- MessageTracker –¥–ª—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
- auth_filters.require_role("super_admin") –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞
- access_markups –¥–ª—è UI —Ä–∞–∑–º–µ—Ç–∫–∏

–ê–≤—Ç–æ—Ä: backend-developer
–î–∞—Ç–∞: 17 –æ–∫—Ç—è–±—Ä—è 2025
–ó–∞–¥–∞—á–∞: T13 (#00005_20251014_HRYHG)
"""

import logging
import asyncio
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
from pyrogram import Client
from pyrogram.types import CallbackQuery, Message

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
from config import get_auth_manager, user_states
from message_tracker import track_and_send
from access_markups import (
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    access_main_menu_markup,
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    access_users_menu_markup,
    access_user_list_markup,
    access_user_details_markup,
    access_edit_user_markup,
    access_role_selection_markup,
    access_filter_roles_markup,
    access_search_result_markup,
    # –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    access_invitations_menu_markup,
    access_invite_list_markup,
    access_invite_details_markup,
    access_invite_type_markup,
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    access_security_menu_markup,
    access_audit_log_markup,
    access_cleanup_settings_markup,
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ
    access_confirm_action_markup,
    access_back_markup,
    access_cancel_markup,
    access_pagination_markup,
)

logger = logging.getLogger(__name__)

# ========================================
# –ö–û–ù–°–¢–ê–ù–¢–´
# ========================================

# –ü–∞–≥–∏–Ω–∞—Ü–∏—è
USERS_PER_PAGE = 10
INVITES_PER_PAGE = 10
AUDIT_LOG_PER_PAGE = 20

# –í—Ä–µ–º–µ–Ω–∞ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)
NOTIFICATION_DELETE_TIME = 15
ERROR_DELETE_TIME = 10
STATUS_DELETE_TIME = 10

# ========================================
# 1. –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –î–û–°–¢–£–ü–û–ú
# ========================================

async def handle_access_menu(chat_id: int, app: Client):
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º (–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞).

    –î–æ—Å—Ç—É–ø: —Ç–æ–ª—å–∫–æ super_admin
    –ü—É—Ç—å: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Üí –°–∏—Å—Ç–µ–º–Ω–∞—è ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    callback_data: "menu_access"

    Args:
        chat_id: Telegram chat_id
        app: Pyrogram Client
    """
    try:
        auth = get_auth_manager()
        if not auth:
            logger.error("AuthManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ùå –û—à–∏–±–∫–∞: —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                message_type="menu"
            )
            return

        # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = auth.storage.get_user_by_telegram_id(chat_id)
        if not user:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                message_type="menu"
            )
            return

        text = (
            "üîê **–ù–ê–°–¢–†–û–ô–ö–ò –î–û–°–¢–£–ü–ê**\n\n"
            f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {user.username}\n"
            f"üé≠ –†–æ–ª—å: {user.role}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        )

        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=text,
            reply_markup=access_main_menu_markup(),
            message_type="menu"
        )

        logger.info(f"Access menu shown to chat_id={chat_id}, user_id={user.user_id}")

    except Exception as e:
        logger.error(f"Error in handle_access_menu: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é.",
            message_type="menu"
        )


# ========================================
# 2. –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò (14 —Ñ—É–Ω–∫—Ü–∏–π)
# ========================================

async def handle_users_menu(chat_id: int, app: Client):
    """
    –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.

    callback_data: "access_users_menu"

    Args:
        chat_id: Telegram chat_id
        app: Pyrogram Client
    """
    try:
        text = (
            "üë• **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=text,
            reply_markup=access_users_menu_markup(),
            message_type="menu"
        )

        logger.info(f"Users menu shown to chat_id={chat_id}")

    except Exception as e:
        logger.error(f"Error in handle_users_menu: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            message_type="menu"
        )


async def handle_list_users(chat_id: int, page: int = 1, app: Client = None, role_filter: Optional[str] = None):
    """
    –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (10 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É).

    callback_data: "access_list_users" –∏–ª–∏ "access_list_users||page||{num}"
    –ò—Å—Ç–æ—á–Ω–∏–∫: 01_menu_structure.md:336-357, 02_menu_navigation.md:186-242

    Args:
        chat_id: Telegram chat_id
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (1-based)
        app: Pyrogram Client
        role_filter: –§–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏ (super_admin/admin/user/guest/all)
    """
    try:
        auth = get_auth_manager()
        if not auth:
            logger.error("AuthManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return

        # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = auth.storage.list_users()

        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
        if role_filter and role_filter != "all":
            all_users = [u for u in all_users if u.role == role_filter]

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        total_users = len(all_users)
        total_pages = max(1, (total_users + USERS_PER_PAGE - 1) // USERS_PER_PAGE)
        page = max(1, min(page, total_pages))

        start_idx = (page - 1) * USERS_PER_PAGE
        end_idx = start_idx + USERS_PER_PAGE
        users_page = all_users[start_idx:end_idx]

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏
        users_dict = []
        for user in users_page:
            users_dict.append({
                "user_id": user.user_id,
                "username": user.username,
                "role": user.role,
                "is_active": user.is_active,
                "is_blocked": user.is_blocked
            })

        # –§–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞
        filter_text = f" (—Ñ–∏–ª—å—Ç—Ä: {role_filter})" if role_filter and role_filter != "all" else ""
        text = (
            f"üìã **–°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô**{filter_text}\n\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:"
        )

        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=text,
            reply_markup=access_user_list_markup(users_dict, page, total_pages),
            message_type="menu"
        )

        logger.info(f"User list shown to chat_id={chat_id}, page={page}/{total_pages}, filter={role_filter}")

    except Exception as e:
        logger.error(f"Error in handle_list_users: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            message_type="menu"
        )


async def handle_user_details(chat_id: int, user_id: str, app: Client):
    """
    –î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏.

    callback_data: "access_user_details||{user_id}"
    –ò—Å—Ç–æ—á–Ω–∏–∫: 02_menu_navigation.md:188-228

    Args:
        chat_id: Telegram chat_id
        user_id: user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        app: Pyrogram Client
    """
    try:
        auth = get_auth_manager()
        if not auth:
            logger.error("AuthManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return

        # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = auth.storage.get_user(user_id)
        if not user:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                message_type="menu"
            )
            return

        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        status_emoji = "‚úÖ" if user.is_active else "üö´"
        status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if user.is_active else "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"

        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–æ–ª–∏
        role_emojis = {
            "super_admin": "üëë",
            "admin": "‚öôÔ∏è",
            "user": "üë§",
            "guest": "üé≠"
        }
        role_emoji = role_emojis.get(user.role, "üë§")

        # –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
        last_login_text = "–ù–∏–∫–æ–≥–¥–∞"
        if user.last_login_at:
            try:
                last_login = datetime.fromisoformat(user.last_login_at)
                last_login_text = last_login.strftime("%d.%m.%Y %H:%M")
            except:
                last_login_text = user.last_login_at

        # –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
        password_change_text = "üîí –¢—Ä–µ–±—É–µ—Ç—Å—è" if user.must_change_password else "‚úÖ –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"

        text = (
            f"üë§ **–î–ï–¢–ê–õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø**\n\n"
            f"**–ò–º—è:** {user.username}\n"
            f"**User ID:** `{user.user_id}`\n"
            f"**Telegram ID:** `{user.telegram_id}`\n"
            f"**–†–æ–ª—å:** {role_emoji} {user.role}\n"
            f"**–°—Ç–∞—Ç—É—Å:** {status_emoji} {status_text}\n"
            f"**–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:** {last_login_text}\n"
            f"**–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è:** {password_change_text}\n"
            f"**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {user.created_at[:10]}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=text,
            reply_markup=access_user_details_markup(user_id),
            message_type="menu"
        )

        logger.info(f"User details shown: chat_id={chat_id}, user_id={user_id}")

    except Exception as e:
        logger.error(f"Error in handle_user_details: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            message_type="menu"
        )


async def handle_edit_user(chat_id: int, user_id: str, app: Client):
    """
    –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    callback_data: "access_edit_user||{user_id}"
    –ò—Å—Ç–æ—á–Ω–∏–∫: 01_menu_structure.md:360-377

    Args:
        chat_id: Telegram chat_id
        user_id: user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        app: Pyrogram Client
    """
    try:
        auth = get_auth_manager()
        if not auth:
            logger.error("AuthManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return

        # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = auth.storage.get_user(user_id)
        if not user:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                message_type="menu"
            )
            return

        text = (
            f"‚úèÔ∏è **–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø**\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}\n"
            f"–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: {user.role}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=text,
            reply_markup=access_edit_user_markup(user_id),
            message_type="menu"
        )

        logger.info(f"Edit user menu shown: chat_id={chat_id}, user_id={user_id}")

    except Exception as e:
        logger.error(f"Error in handle_edit_user: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
            message_type="menu"
        )


async def handle_change_role(chat_id: int, user_id: str, app: Client):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å FSM —Å–º–µ–Ω—ã —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–®–∞–≥ 1: –≤—ã–±–æ—Ä —Ä–æ–ª–∏).

    callback_data: "access_change_role||{user_id}"
    –ò—Å—Ç–æ—á–Ω–∏–∫: 02_menu_navigation.md:194-200

    Args:
        chat_id: Telegram chat_id
        user_id: user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–º–µ–Ω—ã —Ä–æ–ª–∏
        app: Pyrogram Client
    """
    try:
        auth = get_auth_manager()
        if not auth:
            logger.error("AuthManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return

        # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = auth.storage.get_user(user_id)
        if not user:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                message_type="menu"
            )
            return

        text = (
            f"üé≠ **–ò–ó–ú–ï–ù–ï–ù–ò–ï –†–û–õ–ò**\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}\n"
            f"–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: {user.role}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:"
        )

        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=text,
            reply_markup=access_role_selection_markup(user_id),
            message_type="menu"
        )

        logger.info(f"Role selection shown: chat_id={chat_id}, user_id={user_id}")

    except Exception as e:
        logger.error(f"Error in handle_change_role: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —Å–º–µ–Ω—ã —Ä–æ–ª–∏.",
            message_type="menu"
        )


async def handle_confirm_role_change(chat_id: int, user_id: str, role: str, app: Client):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–®–∞–≥ 2: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ).

    callback_data: "access_set_role||{user_id}||{role}"

    Args:
        chat_id: Telegram chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_id: user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–º–µ–Ω—ã —Ä–æ–ª–∏
        role: –ù–æ–≤–∞—è —Ä–æ–ª—å (super_admin/admin/user/guest)
        app: Pyrogram Client
    """
    try:
        auth = get_auth_manager()
        if not auth:
            logger.error("AuthManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return

        # –ü–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        admin_user = auth.storage.get_user_by_telegram_id(chat_id)
        target_user = auth.storage.get_user(user_id)

        if not admin_user or not target_user:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                message_type="status_message"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if admin_user.user_id == user_id:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–æ–ª—å.",
                message_type="status_message"
            )
            await asyncio.sleep(ERROR_DELETE_TIME)
            await handle_edit_user(chat_id, user_id, app)
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–æ–ª–∏
        valid_roles = ["super_admin", "admin", "user", "guest"]
        if role not in valid_roles:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text=f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å: {role}",
                message_type="status_message"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ä—É—é —Ä–æ–ª—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        old_role = target_user.role

        # –û–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å —á–µ—Ä–µ–∑ AuthManager
        success = auth.storage.update_user(
            user_id=user_id,
            role=role
        )

        if not success:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                message_type="status_message"
            )
            return

        # Audit logging
        auth.storage.log_auth_event(
            event_type="ROLE_CHANGED",
            user_id=user_id,
            metadata={
                "admin_id": admin_user.user_id,
                "old_role": old_role,
                "new_role": role,
                "timestamp": datetime.now().isoformat()
            }
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—Ö–µ (–∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 15 —Å–µ–∫)
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=(
                f"‚úÖ **–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞**\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_user.username}\n"
                f"–°—Ç–∞—Ä–∞—è —Ä–æ–ª—å: {old_role}\n"
                f"–ù–æ–≤–∞—è —Ä–æ–ª—å: {role}"
            ),
            message_type="status_message"
        )

        # –ü–æ–¥–æ–∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∫ –º–µ–Ω—é
        await asyncio.sleep(NOTIFICATION_DELETE_TIME)
        await handle_user_details(chat_id, user_id, app)

        logger.info(
            f"Role changed: admin_id={admin_user.user_id}, "
            f"target_user_id={user_id}, old_role={old_role}, new_role={role}"
        )

    except Exception as e:
        logger.error(f"Error in handle_confirm_role_change: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–æ–ª–∏.",
            message_type="status_message"
        )


async def handle_reset_password(chat_id: int, user_id: str, app: Client):
    """
    –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è (–®–∞–≥ 1: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ).

    callback_data: "access_reset_password||{user_id}"
    –ò—Å—Ç–æ—á–Ω–∏–∫: 02_menu_navigation.md:208-212

    Args:
        chat_id: Telegram chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_id: user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
        app: Pyrogram Client
    """
    try:
        auth = get_auth_manager()
        if not auth:
            logger.error("AuthManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return

        # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = auth.storage.get_user(user_id)
        if not user:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                message_type="menu"
            )
            return

        text = (
            f"üîë **–°–ë–†–û–° –ü–ê–†–û–õ–Ø**\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}\n"
            f"Telegram ID: `{user.telegram_id}`\n\n"
            "‚ö†Ô∏è –ë—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å (16 —Å–∏–º–≤–æ–ª–æ–≤).\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–º–µ–Ω–∏—Ç—å –µ–≥–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—Ö–æ–¥–µ.\n\n"
            "**–í—ã —É–≤–µ—Ä–µ–Ω—ã?**"
        )

        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=text,
            reply_markup=access_confirm_action_markup(
                confirm_callback=f"access_confirm_reset||{user_id}",
                cancel_callback=f"access_edit_user||{user_id}"
            ),
            message_type="confirmation"
        )

        logger.info(f"Reset password confirmation shown: chat_id={chat_id}, user_id={user_id}")

    except Exception as e:
        logger.error(f"Error in handle_reset_password: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è.",
            message_type="menu"
        )


async def handle_confirm_reset_password(chat_id: int, user_id: str, app: Client):
    """
    –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–®–∞–≥ 2: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ).

    callback_data: "access_confirm_reset||{user_id}"

    Args:
        chat_id: Telegram chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_id: user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
        app: Pyrogram Client
    """
    try:
        auth = get_auth_manager()
        if not auth:
            logger.error("AuthManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return

        # –ü–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        admin_user = auth.storage.get_user_by_telegram_id(chat_id)
        target_user = auth.storage.get_user(user_id)

        if not admin_user or not target_user:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                message_type="status_message"
            )
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å (16 —Å–∏–º–≤–æ–ª–æ–≤)
        import secrets
        import string
        alphabet = string.ascii_letters + string.digits
        new_password = ''.join(secrets.choice(alphabet) for _ in range(16))

        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è (3 –¥–Ω—è)
        expires_at = datetime.now() + timedelta(days=3)

        # –û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ AuthManager
        success = auth.storage.update_user_password(
            user_id=user_id,
            new_password=new_password,
            must_change_password=True,
            temp_password_expires_at=expires_at.isoformat()
        )

        if not success:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                message_type="status_message"
            )
            return

        # Audit logging
        auth.storage.log_auth_event(
            event_type="PASSWORD_RESET",
            user_id=user_id,
            metadata={
                "admin_id": admin_user.user_id,
                "reset_by_admin": True,
                "expires_at": expires_at.isoformat(),
                "timestamp": datetime.now().isoformat()
            }
        )

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram
        try:
            await app.send_message(
                chat_id=target_user.telegram_id,
                text=(
                    "üîë **–í–∞—à –ø–∞—Ä–æ–ª—å –±—ã–ª —Å–±—Ä–æ—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º**\n\n"
                    f"–ù–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: `{new_password}`\n\n"
                    "‚ö†Ô∏è **–í–ê–ñ–ù–û:**\n"
                    "- –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–∞—Ä–æ–ª—å —Å–µ–π—á–∞—Å (–æ–Ω –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω)\n"
                    "- –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 3 –¥–Ω—è\n"
                    "- –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—Ö–æ–¥–µ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å\n"
                    "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /change_password –¥–ª—è —Å–º–µ–Ω—ã"
                )
            )
            logger.info(f"Temporary password sent to user telegram_id={target_user.telegram_id}")
        except Exception as e:
            logger.error(f"Failed to send password to user: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=(
                f"‚úÖ **–ü–∞—Ä–æ–ª—å —Å–±—Ä–æ—à–µ–Ω**\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_user.username}\n"
                f"–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: `{new_password}`\n\n"
                f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expires_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"–ü–∞—Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
            ),
            message_type="status_message"
        )

        # –ü–æ–¥–æ–∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∫ –º–µ–Ω—é
        await asyncio.sleep(NOTIFICATION_DELETE_TIME)
        await handle_user_details(chat_id, user_id, app)

        logger.info(
            f"Password reset: admin_id={admin_user.user_id}, "
            f"target_user_id={user_id}, expires_at={expires_at.isoformat()}"
        )

    except Exception as e:
        logger.error(f"Error in handle_confirm_reset_password: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è.",
            message_type="status_message"
        )


async def handle_toggle_block_user(chat_id: int, user_id: str, app: Client):
    """
    –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–®–∞–≥ 1: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ).

    callback_data: "access_toggle_block||{user_id}"
    –ò—Å—Ç–æ—á–Ω–∏–∫: 02_menu_navigation.md:216-220

    Args:
        chat_id: Telegram chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_id: user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        app: Pyrogram Client
    """
    try:
        auth = get_auth_manager()
        if not auth:
            logger.error("AuthManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return

        # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = auth.storage.get_user(user_id)
        if not user:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                message_type="menu"
            )
            return

        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ (–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å)
        action = "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if user.is_blocked else "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
        emoji = "‚úÖ" if user.is_blocked else "üö´"

        text = (
            f"{emoji} **{'–†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê' if user.is_blocked else '–ë–õ–û–ö–ò–†–û–í–ö–ê'} –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø**\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if user.is_blocked else '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}\n\n"
            f"‚ö†Ô∏è –í—ã —Ö–æ—Ç–∏—Ç–µ {action} —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n\n"
            "**–í—ã —É–≤–µ—Ä–µ–Ω—ã?**"
        )

        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=text,
            reply_markup=access_confirm_action_markup(
                confirm_callback=f"access_confirm_block||{user_id}",
                cancel_callback=f"access_user_details||{user_id}"
            ),
            message_type="confirmation"
        )

        logger.info(f"Toggle block confirmation shown: chat_id={chat_id}, user_id={user_id}")

    except Exception as e:
        logger.error(f"Error in handle_toggle_block_user: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.",
            message_type="menu"
        )


async def handle_confirm_block(chat_id: int, user_id: str, app: Client):
    """
    –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–®–∞–≥ 2: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞).

    callback_data: "access_confirm_block||{user_id}"

    Args:
        chat_id: Telegram chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_id: user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        app: Pyrogram Client
    """
    try:
        auth = get_auth_manager()
        if not auth:
            logger.error("AuthManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return

        # –ü–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        admin_user = auth.storage.get_user_by_telegram_id(chat_id)
        target_user = auth.storage.get_user(user_id)

        if not admin_user or not target_user:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                message_type="status_message"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if admin_user.user_id == user_id:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è.",
                message_type="status_message"
            )
            await asyncio.sleep(ERROR_DELETE_TIME)
            await handle_user_details(chat_id, user_id, app)
            return

        # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        new_blocked_status = not target_user.is_blocked
        new_active_status = not new_blocked_status  # is_active –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–µ–Ω is_blocked

        # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ AuthManager
        success = auth.storage.update_user(
            user_id=user_id,
            is_blocked=new_blocked_status,
            is_active=new_active_status
        )

        if not success:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                message_type="status_message"
            )
            return

        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        event_type = "USER_BLOCKED" if new_blocked_status else "USER_UNBLOCKED"
        action_text = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if new_blocked_status else "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        emoji = "üö´" if new_blocked_status else "‚úÖ"

        # Audit logging
        auth.storage.log_auth_event(
            event_type=event_type,
            user_id=user_id,
            metadata={
                "admin_id": admin_user.user_id,
                "new_status": "blocked" if new_blocked_status else "active",
                "timestamp": datetime.now().isoformat()
            }
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—Ö–µ
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=(
                f"{emoji} **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {action_text}**\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_user.username}\n"
                f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if new_blocked_status else '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}"
            ),
            message_type="status_message"
        )

        # –ü–æ–¥–æ–∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∫ –º–µ–Ω—é
        await asyncio.sleep(NOTIFICATION_DELETE_TIME)
        await handle_user_details(chat_id, user_id, app)

        logger.info(
            f"User block toggled: admin_id={admin_user.user_id}, "
            f"target_user_id={user_id}, new_blocked={new_blocked_status}"
        )

    except Exception as e:
        logger.error(f"Error in handle_confirm_block: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            message_type="status_message"
        )


async def handle_delete_user(chat_id: int, user_id: str, app: Client):
    """
    –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è (–®–∞–≥ 1: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ).

    callback_data: "access_delete_user_confirm||{user_id}"
    –ò—Å—Ç–æ—á–Ω–∏–∫: 02_menu_navigation.md:222-226

    Args:
        chat_id: Telegram chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_id: user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        app: Pyrogram Client
    """
    try:
        auth = get_auth_manager()
        if not auth:
            logger.error("AuthManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return

        # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = auth.storage.get_user(user_id)
        if not user:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                message_type="menu"
            )
            return

        text = (
            f"üóë **–£–î–ê–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø**\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}\n"
            f"User ID: `{user.user_id}`\n"
            f"–†–æ–ª—å: {user.role}\n\n"
            "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï:**\n"
            "- –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –í–°–ï –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "- –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –í–°–ï —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "- –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ **–ù–ï–û–ë–†–ê–¢–ò–ú–û**\n\n"
            "**–í—ã –ê–ë–°–û–õ–Æ–¢–ù–û —É–≤–µ—Ä–µ–Ω—ã?**"
        )

        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=text,
            reply_markup=access_confirm_action_markup(
                confirm_callback=f"access_confirm_delete||{user_id}",
                cancel_callback=f"access_user_details||{user_id}"
            ),
            message_type="confirmation"
        )

        logger.info(f"Delete user confirmation shown: chat_id={chat_id}, user_id={user_id}")

    except Exception as e:
        logger.error(f"Error in handle_delete_user: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —É–¥–∞–ª–µ–Ω–∏—è.",
            message_type="menu"
        )


async def handle_confirm_delete(chat_id: int, user_id: str, app: Client):
    """
    –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–®–∞–≥ 2: —É–¥–∞–ª–µ–Ω–∏–µ).

    callback_data: "access_confirm_delete||{user_id}"

    Args:
        chat_id: Telegram chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_id: user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        app: Pyrogram Client
    """
    try:
        auth = get_auth_manager()
        if not auth:
            logger.error("AuthManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return

        # –ü–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        admin_user = auth.storage.get_user_by_telegram_id(chat_id)
        target_user = auth.storage.get_user(user_id)

        if not admin_user or not target_user:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                message_type="status_message"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if admin_user.user_id == user_id:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è.",
                message_type="status_message"
            )
            await asyncio.sleep(ERROR_DELETE_TIME)
            await handle_user_details(chat_id, user_id, app)
            return

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        deleted_username = target_user.username
        deleted_role = target_user.role

        # –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            auth.storage.delete_all_sessions(user_id)
            logger.info(f"All sessions deleted for user_id={user_id}")
        except Exception as e:
            logger.error(f"Failed to delete sessions for user_id={user_id}: {e}")

        # –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ AuthManager
        success = auth.storage.delete_user(user_id)

        if not success:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                message_type="status_message"
            )
            return

        # Audit logging
        auth.storage.log_auth_event(
            event_type="USER_DELETED",
            user_id=user_id,
            metadata={
                "admin_id": admin_user.user_id,
                "deleted_username": deleted_username,
                "deleted_role": deleted_role,
                "timestamp": datetime.now().isoformat()
            }
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—Ö–µ
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=(
                f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω**\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {deleted_username}\n"
                f"–†–æ–ª—å: {deleted_role}\n"
                f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–µ—Å—Å–∏–∏ —É–¥–∞–ª–µ–Ω—ã."
            ),
            message_type="status_message"
        )

        # –ü–æ–¥–æ–∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await asyncio.sleep(NOTIFICATION_DELETE_TIME)
        await handle_list_users(chat_id, 1, app)

        logger.info(
            f"User deleted: admin_id={admin_user.user_id}, "
            f"deleted_user_id={user_id}, username={deleted_username}"
        )

    except Exception as e:
        logger.error(f"Error in handle_confirm_delete: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            message_type="status_message"
        )


async def handle_filter_users_by_role(chat_id: int, app: Client):
    """
    –§–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª—è–º –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    callback_data: "access_filter_roles"
    –ò—Å—Ç–æ—á–Ω–∏–∫: 02_menu_navigation.md:231-238

    Args:
        chat_id: Telegram chat_id
        app: Pyrogram Client
    """
    try:
        text = (
            "üé≠ **–§–ò–õ–¨–¢–† –ü–û –†–û–õ–Ø–ú**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:"
        )

        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=text,
            reply_markup=access_filter_roles_markup(),
            message_type="menu"
        )

        logger.info(f"Role filter menu shown to chat_id={chat_id}")

    except Exception as e:
        logger.error(f"Error in handle_filter_users_by_role: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–ª—å—Ç—Ä–∞.",
            message_type="menu"
        )


async def handle_search_user(chat_id: int, app: Client):
    """
    FSM: –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–®–∞–≥ 1: –∑–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏/ID).

    callback_data: "access_search_user"
    –ò—Å—Ç–æ—á–Ω–∏–∫: 02_menu_navigation.md:230, 712-713

    Args:
        chat_id: Telegram chat_id
        app: Pyrogram Client
    """
    try:
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[chat_id] = {
            "step": "access_search_user_input",
            "previous_menu": "access_users_menu"
        }

        text = (
            "üîç **–ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ:\n"
            "- –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username)\n"
            "- Telegram ID\n"
            "- User ID\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        )

        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=text,
            reply_markup=access_cancel_markup("access_users_menu"),
            message_type="input_request"
        )

        logger.info(f"Search user input request sent to chat_id={chat_id}")

    except Exception as e:
        logger.error(f"Error in handle_search_user: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–∏—Å–∫–∞.",
            message_type="menu"
        )


async def handle_search_user_input(chat_id: int, query: str, app: Client):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–®–∞–≥ 2: –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤).

    FSM step: "access_search_user_input"

    Args:
        chat_id: Telegram chat_id
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (username, telegram_id, user_id)
        app: Pyrogram Client
    """
    try:
        auth = get_auth_manager()
        if not auth:
            logger.error("AuthManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return

        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = auth.storage.list_users()
        found_users = []

        query_lower = query.lower().strip()

        for user in all_users:
            # –ü–æ–∏—Å–∫ –ø–æ username
            if user.username and query_lower in user.username.lower():
                found_users.append(user)
                continue

            # –ü–æ–∏—Å–∫ –ø–æ telegram_id
            if str(user.telegram_id) == query_lower:
                found_users.append(user)
                continue

            # –ü–æ–∏—Å–∫ –ø–æ user_id
            if user.user_id.lower() == query_lower:
                found_users.append(user)
                continue

        # –û—á–∏—Å—Ç–∏—Ç—å FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if chat_id in user_states:
            user_states.pop(chat_id)

        # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if not found_users:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text=(
                    f"üîç **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê**\n\n"
                    f"–ü–æ –∑–∞–ø—Ä–æ—Å—É \"{query}\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
                    "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—á–Ω—ã–π Telegram ID\n"
                    "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å User ID"
                ),
                reply_markup=access_back_markup("access_users_menu"),
                message_type="menu"
            )
            logger.info(f"Search completed: chat_id={chat_id}, query={query}, found=0")
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏
        users_dict = []
        for user in found_users[:10]:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            users_dict.append({
                "user_id": user.user_id,
                "username": user.username,
                "role": user.role,
                "is_active": user.is_active,
                "is_blocked": user.is_blocked
            })

        text = (
            f"üîç **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê**\n\n"
            f"–ü–æ –∑–∞–ø—Ä–æ—Å—É \"{query}\" –Ω–∞–π–¥–µ–Ω–æ: {len(found_users)}\n"
            f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {min(len(found_users), 10)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        )

        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=text,
            reply_markup=access_search_result_markup(users_dict),
            message_type="menu"
        )

        logger.info(f"Search completed: chat_id={chat_id}, query={query}, found={len(found_users)}")

    except Exception as e:
        logger.error(f"Error in handle_search_user_input: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            message_type="menu"
        )


# ========================================
# 3. –ü–†–ò–ì–õ–ê–®–ï–ù–ò–Ø (7 —Ñ—É–Ω–∫—Ü–∏–π)
# ========================================

async def handle_invitations_menu(chat_id: int, app: Client):
    """
    –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏.

    callback_data: "access_invitations_menu"
    –ò—Å—Ç–æ—á–Ω–∏–∫: 01_menu_structure.md:380-397

    Args:
        chat_id: Telegram chat_id
        app: Pyrogram Client
    """
    try:
        text = (
            "üì® **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ò–ì–õ–ê–®–ï–ù–ò–Ø–ú–ò**\n\n"
            "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=text,
            reply_markup=access_invitations_menu_markup(),
            message_type="menu"
        )

        logger.info(f"Invitations menu shown to chat_id={chat_id}")

    except Exception as e:
        logger.error(f"Error in handle_invitations_menu: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π.",
            message_type="menu"
        )


async def handle_create_invitation(chat_id: int, role: str, app: Client):
    """
    –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.

    callback_data: "access_create_invite_admin" –∏–ª–∏ "access_create_invite_user"
    –ò—Å—Ç–æ—á–Ω–∏–∫: 02_menu_navigation.md:251-259

    Args:
        chat_id: Telegram chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        role: –†–æ–ª—å –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (admin –∏–ª–∏ user)
        app: Pyrogram Client
    """
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–æ–ª–∏
        if role not in ["admin", "user"]:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text=f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {role}",
                message_type="status_message"
            )
            return

        role_emoji = "‚öôÔ∏è" if role == "admin" else "üë§"
        role_name = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" if role == "admin" else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[chat_id] = {
            "step": "creating_invitation",
            "role": role,
            "expires_hours": 720  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –¥–Ω–µ–π
        }

        text = (
            f"{role_emoji} **–°–û–ó–î–ê–ù–ò–ï –ü–†–ò–ì–õ–ê–®–ï–ù–ò–Ø –î–õ–Ø {role_name.upper()}**\n\n"
            f"–†–æ–ª—å: {role_name}\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 30 –¥–Ω–µ–π (720 —á–∞—Å–æ–≤)\n\n"
            "–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –∏ QR-–∫–æ–¥–æ–º.\n\n"
            "**–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?**"
        )

        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=text,
            reply_markup=access_confirm_action_markup(
                confirm_callback=f"access_confirm_create_invite||{role}",
                cancel_callback="access_invitations_menu"
            ),
            message_type="confirmation"
        )

        logger.info(f"Create invitation confirmation shown: chat_id={chat_id}, role={role}")

    except Exception as e:
        logger.error(f"Error in handle_create_invitation: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.",
            message_type="menu"
        )


async def handle_confirm_create_invite(chat_id: int, role: str, app: Client):
    """
    –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–®–∞–≥ 2: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è).

    callback_data: "access_confirm_create_invite||{role}"

    Args:
        chat_id: Telegram chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        role: –†–æ–ª—å –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (admin –∏–ª–∏ user)
        app: Pyrogram Client
    """
    try:
        auth = get_auth_manager()
        if not auth:
            logger.error("AuthManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return

        # –ü–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_user = auth.storage.get_user_by_telegram_id(chat_id)
        if not admin_user:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                message_type="status_message"
            )
            return

        # –ü–æ–ª—É—á–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ FSM –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        state = user_states.get(chat_id, {})
        expires_hours = state.get("expires_hours", 720)
        expires_at = datetime.now() + timedelta(hours=expires_hours)

        # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å invite_code —á–µ—Ä–µ–∑ AuthSecurityManager
        import secrets
        import string
        alphabet = string.ascii_letters + string.digits
        invite_code = ''.join(secrets.choice(alphabet) for _ in range(32))

        # –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AuthManager
        success = auth.storage.create_invitation(
            invite_code=invite_code,
            role=role,
            created_by=admin_user.user_id,
            expires_at=expires_at.isoformat()
        )

        if not success:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.",
                message_type="status_message"
            )
            return

        # –û—á–∏—Å—Ç–∏—Ç—å FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if chat_id in user_states:
            user_states.pop(chat_id)

        # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        bot_username = (await app.get_me()).username
        invite_link = f"https://t.me/{bot_username}?start={invite_code}"

        # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ qrcode)
        qr_code_sent = False
        try:
            import qrcode
            from io import BytesIO

            qr = qrcode.QRCode(version=1, box_size=10, border=5)
            qr.add_data(invite_link)
            qr.make(fit=True)

            img = qr.make_image(fill_color="black", back_color="white")
            buf = BytesIO()
            img.save(buf, format='PNG')
            buf.seek(0)

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å QR-–∫–æ–¥
            await app.send_photo(
                chat_id=chat_id,
                photo=buf,
                caption=f"QR-–∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è ({role})"
            )
            qr_code_sent = True

        except ImportError:
            logger.warning("qrcode library not available, skipping QR generation")
        except Exception as e:
            logger.error(f"Failed to generate QR code: {e}")

        # Audit logging
        auth.storage.log_auth_event(
            event_type="INVITE_CREATED",
            user_id=admin_user.user_id,
            metadata={
                "invite_code": invite_code,
                "role": role,
                "expires_at": expires_at.isoformat(),
                "timestamp": datetime.now().isoformat()
            }
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—Ö–µ
        qr_text = "\n‚úÖ QR-–∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ" if qr_code_sent else ""

        text = (
            f"‚úÖ **–ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï –°–û–ó–î–ê–ù–û**\n\n"
            f"–†–æ–ª—å: {role}\n"
            f"–ö–æ–¥: `{invite_code}`\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expires_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"**–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:**\n"
            f"{invite_link}\n{qr_text}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
        )

        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=text,
            reply_markup=access_back_markup("access_invitations_menu"),
            message_type="menu"
        )

        logger.info(
            f"Invitation created: admin_id={admin_user.user_id}, "
            f"invite_code={invite_code}, role={role}"
        )

    except Exception as e:
        logger.error(f"Error in handle_confirm_create_invite: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.",
            message_type="status_message"
        )


async def handle_list_invitations(chat_id: int, page: int = 1, app: Client = None):
    """
    –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

    callback_data: "access_list_invites" –∏–ª–∏ "access_list_invites||page||{num}"
    –ò—Å—Ç–æ—á–Ω–∏–∫: 02_menu_navigation.md:265-279

    Args:
        chat_id: Telegram chat_id
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (1-based)
        app: Pyrogram Client
    """
    try:
        auth = get_auth_manager()
        if not auth:
            logger.error("AuthManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return

        # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
        all_invites = auth.storage.list_invitations(active_only=True)

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        total_invites = len(all_invites)
        total_pages = max(1, (total_invites + INVITES_PER_PAGE - 1) // INVITES_PER_PAGE)
        page = max(1, min(page, total_pages))

        start_idx = (page - 1) * INVITES_PER_PAGE
        end_idx = start_idx + INVITES_PER_PAGE
        invites_page = all_invites[start_idx:end_idx]

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏
        invites_dict = []
        for invite in invites_page:
            invites_dict.append({
                "invite_code": invite.invite_code,
                "role": invite.role,
                "expires_at": invite.expires_at,
                "created_by": invite.created_by
            })

        # –§–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞
        text = (
            f"üìã **–°–ü–ò–°–û–ö –ê–ö–¢–ò–í–ù–´–• –ü–†–ò–ì–õ–ê–®–ï–ù–ò–ô**\n\n"
            f"–í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: {total_invites}\n"
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:"
        )

        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=text,
            reply_markup=access_invite_list_markup(invites_dict, page, total_pages),
            message_type="menu"
        )

        logger.info(f"Invitation list shown to chat_id={chat_id}, page={page}/{total_pages}")

    except Exception as e:
        logger.error(f"Error in handle_list_invitations: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π.",
            message_type="menu"
        )


async def handle_invitation_details(chat_id: int, invite_code: str, app: Client):
    """
    –î–µ—Ç–∞–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏.

    callback_data: "access_invite_details||{invite_code}"
    –ò—Å—Ç–æ—á–Ω–∏–∫: 02_menu_navigation.md:267-276

    Args:
        chat_id: Telegram chat_id
        invite_code: –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        app: Pyrogram Client
    """
    try:
        auth = get_auth_manager()
        if not auth:
            logger.error("AuthManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return

        # –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        invite = auth.storage.get_invitation(invite_code)
        if not invite:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text=f"‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º {invite_code[:8]}... –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                message_type="menu"
            )
            return

        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–æ–ª–∏
        role_emoji = "‚öôÔ∏è" if invite.role == "admin" else "üë§"

        # –°—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        status_emoji = "‚úÖ"
        status_text = "–ê–∫—Ç–∏–≤–Ω–æ"

        if invite.used:
            status_emoji = "üîí"
            status_text = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ"
        elif not invite.is_active:
            status_emoji = "üö´"
            status_text = "–ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–æ"

        # –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        expires_text = "–ò—Å—Ç–µ–∫"
        if invite.expires_at:
            try:
                expires = datetime.fromisoformat(invite.expires_at)
                if expires > datetime.now():
                    expires_text = expires.strftime("%d.%m.%Y %H:%M")
                else:
                    status_emoji = "‚è∞"
                    status_text = "–ò—Å—Ç–µ–∫"
            except:
                expires_text = invite.expires_at

        # –°–æ–∑–¥–∞—Ç–µ–ª—å
        creator = auth.storage.get_user(invite.created_by)
        creator_name = creator.username if creator else invite.created_by

        # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
        bot_username = (await app.get_me()).username
        invite_link = f"https://t.me/{bot_username}?start={invite_code}"

        text = (
            f"üì® **–î–ï–¢–ê–õ–ò –ü–†–ò–ì–õ–ê–®–ï–ù–ò–Ø**\n\n"
            f"**–†–æ–ª—å:** {role_emoji} {invite.role}\n"
            f"**–ö–æ–¥:** `{invite_code}`\n"
            f"**–°—Ç–∞—Ç—É—Å:** {status_emoji} {status_text}\n"
            f"**–°–æ–∑–¥–∞—Ç–µ–ª—å:** {creator_name}\n"
            f"**–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ:** {expires_text}\n"
            f"**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {invite.created_at[:10]}\n\n"
            f"**–°—Å—ã–ª–∫–∞:**\n{invite_link}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=text,
            reply_markup=access_invite_details_markup(invite_code),
            message_type="menu"
        )

        logger.info(f"Invitation details shown: chat_id={chat_id}, invite_code={invite_code}")

    except Exception as e:
        logger.error(f"Error in handle_invitation_details: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.",
            message_type="menu"
        )


async def handle_revoke_invitation(chat_id: int, invite_code: str, app: Client):
    """
    –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–®–∞–≥ 1: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ).

    callback_data: "access_revoke_invite||{invite_code}"
    –ò—Å—Ç–æ—á–Ω–∏–∫: 02_menu_navigation.md:270-274

    Args:
        chat_id: Telegram chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        invite_code: –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        app: Pyrogram Client
    """
    try:
        auth = get_auth_manager()
        if not auth:
            logger.error("AuthManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return

        # –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        invite = auth.storage.get_invitation(invite_code)
        if not invite:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text=f"‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º {invite_code[:8]}... –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                message_type="menu"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–æ
        if not invite.is_active:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ö†Ô∏è –≠—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–æ.",
                message_type="status_message"
            )
            await asyncio.sleep(ERROR_DELETE_TIME)
            await handle_invitation_details(chat_id, invite_code, app)
            return

        text = (
            f"üóë **–ê–ù–ù–£–õ–ò–†–û–í–ê–ù–ò–ï –ü–†–ò–ì–õ–ê–®–ï–ù–ò–Ø**\n\n"
            f"–†–æ–ª—å: {invite.role}\n"
            f"–ö–æ–¥: `{invite_code[:16]}...`\n\n"
            "‚ö†Ô∏è –ü–æ—Å–ª–µ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ **–ù–ï–û–ë–†–ê–¢–ò–ú–û**.\n\n"
            "**–í—ã —É–≤–µ—Ä–µ–Ω—ã?**"
        )

        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=text,
            reply_markup=access_confirm_action_markup(
                confirm_callback=f"access_confirm_revoke||{invite_code}",
                cancel_callback=f"access_invite_details||{invite_code}"
            ),
            message_type="confirmation"
        )

        logger.info(f"Revoke invitation confirmation shown: chat_id={chat_id}, invite_code={invite_code}")

    except Exception as e:
        logger.error(f"Error in handle_revoke_invitation: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è.",
            message_type="menu"
        )


async def handle_confirm_revoke(chat_id: int, invite_code: str, app: Client):
    """
    –ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–®–∞–≥ 2: –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ).

    callback_data: "access_confirm_revoke||{invite_code}"

    Args:
        chat_id: Telegram chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        invite_code: –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        app: Pyrogram Client
    """
    try:
        auth = get_auth_manager()
        if not auth:
            logger.error("AuthManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return

        # –ü–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_user = auth.storage.get_user_by_telegram_id(chat_id)
        if not admin_user:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                message_type="status_message"
            )
            return

        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AuthManager
        success = auth.storage.revoke_invitation(invite_code)

        if not success:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.",
                message_type="status_message"
            )
            return

        # Audit logging
        auth.storage.log_auth_event(
            event_type="INVITE_REVOKED",
            user_id=admin_user.user_id,
            metadata={
                "invite_code": invite_code,
                "timestamp": datetime.now().isoformat()
            }
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—Ö–µ
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=(
                f"‚úÖ **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–æ**\n\n"
                f"–ö–æ–¥: `{invite_code[:16]}...`\n"
                f"–°—Å—ã–ª–∫–∞ –±–æ–ª—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç."
            ),
            message_type="status_message"
        )

        # –ü–æ–¥–æ–∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∫ —Å–ø–∏—Å–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
        await asyncio.sleep(NOTIFICATION_DELETE_TIME)
        await handle_list_invitations(chat_id, 1, app)

        logger.info(
            f"Invitation revoked: admin_id={admin_user.user_id}, "
            f"invite_code={invite_code}"
        )

    except Exception as e:
        logger.error(f"Error in handle_confirm_revoke: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.",
            message_type="status_message"
        )


# ========================================
# 4. –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ (2 —Ñ—É–Ω–∫—Ü–∏–∏)
# ========================================

async def handle_security_menu(chat_id: int, app: Client):
    """
    –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

    callback_data: "access_security_menu"
    –ò—Å—Ç–æ—á–Ω–∏–∫: 01_menu_structure.md:400-417

    Args:
        chat_id: Telegram chat_id
        app: Pyrogram Client
    """
    try:
        text = (
            "üîê **–ù–ê–°–¢–†–û–ô–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò**\n\n"
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é —Å–∏—Å—Ç–µ–º—ã:\n"
            "- –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n"
            "- –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "- –ü–æ–ª–∏—Ç–∏–∫–∞ –ø–∞—Ä–æ–ª–µ–π\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
        )

        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=text,
            reply_markup=access_security_menu_markup(),
            message_type="menu"
        )

        logger.info(f"Security menu shown to chat_id={chat_id}")

    except Exception as e:
        logger.error(f"Error in handle_security_menu: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
            message_type="menu"
        )


async def handle_audit_log(chat_id: int, page: int = 1, app: Client = None):
    """
    –ú–µ–Ω—é –∂—É—Ä–Ω–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏–π (audit log).

    callback_data: "access_audit_log" –∏–ª–∏ "access_audit_log||page||{num}"
    –ò—Å—Ç–æ—á–Ω–∏–∫: 02_menu_navigation.md:317-323

    Args:
        chat_id: Telegram chat_id
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (1-based)
        app: Pyrogram Client
    """
    try:
        auth = get_auth_manager()
        if not auth:
            logger.error("AuthManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return

        # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –∏–∑ audit log
        all_events = auth.storage.get_audit_log(limit=1000)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–æ–±—ã—Ç–∏–π

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        total_events = len(all_events)
        total_pages = max(1, (total_events + AUDIT_LOG_PER_PAGE - 1) // AUDIT_LOG_PER_PAGE)
        page = max(1, min(page, total_pages))

        start_idx = (page - 1) * AUDIT_LOG_PER_PAGE
        end_idx = start_idx + AUDIT_LOG_PER_PAGE
        events_page = all_events[start_idx:end_idx]

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è
        events_text = ""
        for event in events_page:
            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
            event_emojis = {
                "LOGIN": "üîë",
                "LOGOUT": "üö™",
                "PASSWORD_CHANGED": "üîê",
                "PASSWORD_RESET": "üîÑ",
                "ROLE_CHANGED": "üé≠",
                "USER_BLOCKED": "üö´",
                "USER_UNBLOCKED": "‚úÖ",
                "USER_DELETED": "üóë",
                "INVITE_CREATED": "üì®",
                "INVITE_REVOKED": "üîí",
                "ACCESS_DENIED": "‚õî"
            }
            emoji = event_emojis.get(event.get("event_type", ""), "üìù")

            # –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
            timestamp = event.get("timestamp", "")
            try:
                ts = datetime.fromisoformat(timestamp)
                time_str = ts.strftime("%d.%m %H:%M")
            except:
                time_str = timestamp[:16]

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_id = event.get("user_id", "Unknown")
            user = auth.storage.get_user(user_id)
            username = user.username if user else user_id[:8]

            # –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            event_type = event.get("event_type", "UNKNOWN")

            events_text += f"{emoji} `{time_str}` **{username}**: {event_type}\n"

        # –§–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞
        text = (
            f"üìú **–ñ–£–†–ù–ê–õ –î–ï–ô–°–¢–í–ò–ô**\n\n"
            f"–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {total_events}\n"
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}\n\n"
            f"{events_text}\n"
        )

        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=text,
            reply_markup=access_audit_log_markup(page, total_pages),
            message_type="menu"
        )

        logger.info(f"Audit log shown to chat_id={chat_id}, page={page}/{total_pages}")

    except Exception as e:
        logger.error(f"Error in handle_audit_log: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∂—É—Ä–Ω–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏–π.",
            message_type="menu"
        )


# ========================================
# 5. FSM –°–ú–ï–ù–´ –ü–ê–†–û–õ–Ø (4 —Ñ—É–Ω–∫—Ü–∏–∏)
# ========================================

async def handle_change_password_start(chat_id: int, app: Client):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å FSM —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è (–®–∞–≥ 1: –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä–æ–ª—è –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫).

    –ö–æ–º–∞–Ω–¥–∞: /change_password
    –ò—Å—Ç–æ—á–Ω–∏–∫: 02_menu_navigation.md:370-415, architecture_review_report.md:403-434

    Args:
        chat_id: Telegram chat_id
        app: Pyrogram Client
    """
    try:
        auth = get_auth_manager()
        if not auth:
            logger.error("AuthManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return

        # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = auth.storage.get_user_by_telegram_id(chat_id)
        if not user:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                message_type="menu"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: –µ—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏ must_change_password=True ‚Üí –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –®–∞–≥ 1
        if user.must_change_password and user.temp_password_expires_at:
            # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä–æ–ª—è
            user_states[chat_id] = {
                "step": "password_change_new",
                "user_id": user.user_id,
                "skip_current": True
            }

            text = (
                "üîê **–°–ú–ï–ù–ê –ü–ê–†–û–õ–Ø**\n\n"
                "–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å.\n\n"
                "**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:**\n"
                "- –î–ª–∏–Ω–∞: 5-8 —Å–∏–º–≤–æ–ª–æ–≤\n"
                "- –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã\n"
                "- –ù–µ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:"
            )

            await track_and_send(
                chat_id=chat_id,
                app=app,
                text=text,
                reply_markup=access_cancel_markup("menu_main"),
                message_type="input_request"
            )

            logger.info(f"Password change started (skip current): chat_id={chat_id}, user_id={user.user_id}")
        else:
            # –û–±—ã—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å: –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
            user_states[chat_id] = {
                "step": "password_change_current",
                "user_id": user.user_id,
                "attempts": 0
            }

            text = (
                "üîê **–°–ú–ï–ù–ê –ü–ê–†–û–õ–Ø**\n\n"
                "–î–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à **—Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å**:"
            )

            await track_and_send(
                chat_id=chat_id,
                app=app,
                text=text,
                reply_markup=access_cancel_markup("menu_main"),
                message_type="input_request"
            )

            logger.info(f"Password change started: chat_id={chat_id}, user_id={user.user_id}")

    except Exception as e:
        logger.error(f"Error in handle_change_password_start: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è.",
            message_type="menu"
        )


async def handle_password_change_current_input(chat_id: int, password: str, app: Client):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä–æ–ª—è (–®–∞–≥ 2: –≤–∞–ª–∏–¥–∞—Ü–∏—è).

    FSM step: "password_change_current"
    –ò—Å—Ç–æ—á–Ω–∏–∫: architecture_review_report.md:415-433, 02_menu_navigation.md:386-390

    Args:
        chat_id: Telegram chat_id
        password: –í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
        app: Pyrogram Client
    """
    try:
        auth = get_auth_manager()
        if not auth:
            logger.error("AuthManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return

        state = user_states.get(chat_id, {})
        user_id = state.get("user_id")
        attempts = state.get("attempts", 0)

        if not user_id:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /change_password",
                message_type="status_message"
            )
            user_states.pop(chat_id, None)
            return

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è
        user = auth.storage.get_user(user_id)
        if not user:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                message_type="status_message"
            )
            user_states.pop(chat_id, None)
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ AuthManager
        is_valid = auth.storage.verify_password(user_id, password)

        if is_valid:
            # –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π ‚Üí –ø–µ—Ä–µ–π—Ç–∏ –∫ –®–∞–≥—É 3 (–Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å)
            user_states[chat_id] = {
                "step": "password_change_new",
                "user_id": user_id,
                "old_password": password
            }

            text = (
                "‚úÖ –¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n\n"
                "**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –Ω–æ–≤–æ–º—É –ø–∞—Ä–æ–ª—é:**\n"
                "- –î–ª–∏–Ω–∞: 5-8 —Å–∏–º–≤–æ–ª–æ–≤\n"
                "- –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã\n"
                "- –ù–µ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º\n\n"
                "–í–≤–µ–¥–∏—Ç–µ **–Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å**:"
            )

            await track_and_send(
                chat_id=chat_id,
                app=app,
                text=text,
                reply_markup=access_cancel_markup("menu_main"),
                message_type="input_request"
            )

            logger.info(f"Current password verified: chat_id={chat_id}, user_id={user_id}")
        else:
            # –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π
            attempts += 1

            if attempts >= 3:
                # –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
                await track_and_send(
                    chat_id=chat_id,
                    app=app,
                    text=(
                        "‚ùå **–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫**\n\n"
                        "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å 3 —Ä–∞–∑–∞.\n"
                        "–î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ: /change_password"
                    ),
                    message_type="status_message"
                )
                user_states.pop(chat_id, None)

                # Audit logging
                auth.storage.log_auth_event(
                    event_type="PASSWORD_CHANGE_FAILED",
                    user_id=user_id,
                    metadata={
                        "reason": "Too many attempts",
                        "timestamp": datetime.now().isoformat()
                    }
                )

                logger.warning(f"Password change failed (too many attempts): chat_id={chat_id}, user_id={user_id}")
            else:
                # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å (max 3 –ø–æ–ø—ã—Ç–∫–∏)
                user_states[chat_id]["attempts"] = attempts

                await track_and_send(
                    chat_id=chat_id,
                    app=app,
                    text=(
                        f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.\n\n"
                        f"–ü–æ–ø—ã—Ç–∫–∞ {attempts}/3\n\n"
                        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à **—Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å**:"
                    ),
                    reply_markup=access_cancel_markup("menu_main"),
                    message_type="input_request"
                )

                logger.info(f"Wrong current password attempt {attempts}: chat_id={chat_id}, user_id={user_id}")

    except Exception as e:
        logger.error(f"Error in handle_password_change_current_input: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è.",
            message_type="status_message"
        )


async def handle_password_change_new_input(chat_id: int, password: str, app: Client):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è (–®–∞–≥ 3: –≤–∞–ª–∏–¥–∞—Ü–∏—è).

    FSM step: "password_change_new"
    –ò—Å—Ç–æ—á–Ω–∏–∫: architecture_review_report.md:792-830, 02_menu_navigation.md:394-414

    Args:
        chat_id: Telegram chat_id
        password: –í–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
        app: Pyrogram Client
    """
    try:
        auth = get_auth_manager()
        if not auth:
            logger.error("AuthManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return

        state = user_states.get(chat_id, {})
        user_id = state.get("user_id")
        old_password = state.get("old_password")
        skip_current = state.get("skip_current", False)

        if not user_id:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /change_password",
                message_type="status_message"
            )
            user_states.pop(chat_id, None)
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
        import re

        # –î–ª–∏–Ω–∞ 5-8 —Å–∏–º–≤–æ–ª–æ–≤
        if len(password) < 5 or len(password) > 8:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text=(
                    "‚ùå **–ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è**\n\n"
                    "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 5-8 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –í–≤–µ–¥–∏—Ç–µ **–Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å**:"
                ),
                reply_markup=access_cancel_markup("menu_main"),
                message_type="input_request"
            )
            logger.info(f"New password invalid (length): chat_id={chat_id}, length={len(password)}")
            return

        # –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
        if not re.match(r'^[a-zA-Z0-9]+$', password):
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text=(
                    "‚ùå **–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã**\n\n"
                    "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –í–≤–µ–¥–∏—Ç–µ **–Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å**:"
                ),
                reply_markup=access_cancel_markup("menu_main"),
                message_type="input_request"
            )
            logger.info(f"New password invalid (chars): chat_id={chat_id}")
            return

        # –ù–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å–æ —Å—Ç–∞—Ä—ã–º
        if not skip_current and old_password and password == old_password:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text=(
                    "‚ùå **–ü–∞—Ä–æ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å–æ —Å—Ç–∞—Ä—ã–º**\n\n"
                    "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –í–≤–µ–¥–∏—Ç–µ **–Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å**:"
                ),
                reply_markup=access_cancel_markup("menu_main"),
                message_type="input_request"
            )
            logger.info(f"New password same as old: chat_id={chat_id}, user_id={user_id}")
            return

        # –ü–∞—Ä–æ–ª—å –≤–∞–ª–∏–¥–µ–Ω ‚Üí –ø–µ—Ä–µ–π—Ç–∏ –∫ –®–∞–≥—É 4 (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
        user_states[chat_id] = {
            "step": "password_change_confirm",
            "user_id": user_id,
            "new_password": password
        }

        text = (
            "‚úÖ –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç.\n\n"
            "**–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑:**"
        )

        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=text,
            reply_markup=access_cancel_markup("menu_main"),
            message_type="input_request"
        )

        logger.info(f"New password validated: chat_id={chat_id}, user_id={user_id}")

    except Exception as e:
        logger.error(f"Error in handle_password_change_new_input: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è.",
            message_type="status_message"
        )


async def handle_password_change_confirm_input(chat_id: int, password: str, app: Client):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è (–®–∞–≥ 4: —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è).

    FSM step: "password_change_confirm"
    –ò—Å—Ç–æ—á–Ω–∏–∫: 02_menu_navigation.md:402-410

    Args:
        chat_id: Telegram chat_id
        password: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
        app: Pyrogram Client
    """
    try:
        auth = get_auth_manager()
        if not auth:
            logger.error("AuthManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return

        state = user_states.get(chat_id, {})
        user_id = state.get("user_id")
        new_password = state.get("new_password")

        if not user_id or not new_password:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /change_password",
                message_type="status_message"
            )
            user_states.pop(chat_id, None)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if password != new_password:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text=(
                    "‚ùå **–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç**\n\n"
                    "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º.\n\n"
                    "–ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /change_password"
                ),
                message_type="status_message"
            )
            user_states.pop(chat_id, None)
            logger.info(f"Password confirmation mismatch: chat_id={chat_id}, user_id={user_id}")
            return

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ AuthManager
        success = auth.storage.update_user_password(
            user_id=user_id,
            new_password=new_password,
            must_change_password=False,  # –°–Ω—è—Ç—å —Ñ–ª–∞–≥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π —Å–º–µ–Ω—ã
            temp_password_expires_at=None  # –û—á–∏—Å—Ç–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
        )

        if not success:
            await track_and_send(
                chat_id=chat_id,
                app=app,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å.",
                message_type="status_message"
            )
            user_states.pop(chat_id, None)
            return

        # Audit logging
        auth.storage.log_auth_event(
            event_type="PASSWORD_CHANGED",
            user_id=user_id,
            metadata={
                "self_changed": True,
                "timestamp": datetime.now().isoformat()
            }
        )

        # –û—á–∏—Å—Ç–∏—Ç—å FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states.pop(chat_id, None)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—Ö–µ
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=(
                "‚úÖ **–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω**\n\n"
                "–í–∞—à –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ö–æ–¥–∞.\n\n"
                "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é..."
            ),
            message_type="status_message"
        )

        # –ü–æ–¥–æ–∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        await asyncio.sleep(NOTIFICATION_DELETE_TIME)

        # –ò–º–ø–æ—Ä—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        from menus import send_main_menu
        await send_main_menu(chat_id, app)

        logger.info(f"Password changed successfully: chat_id={chat_id}, user_id={user_id}")

    except Exception as e:
        logger.error(f"Error in handle_password_change_confirm_input: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è.",
            message_type="status_message"
        )


# ========================================
# 6. –ü–û–ò–°–ö –ò –§–ò–õ–¨–¢–†–´ (4 —Ñ—É–Ω–∫—Ü–∏–∏)
# ========================================

async def handle_filter_apply(chat_id: int, role_filter: str, app: Client):
    """
    –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    callback_data: "access_filter||{role}"

    Args:
        chat_id: Telegram chat_id
        role_filter: –§–∏–ª—å—Ç—Ä —Ä–æ–ª–∏ (all/super_admin/admin/user/guest)
        app: Pyrogram Client
    """
    try:
        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await handle_list_users(chat_id, page=1, app=app, role_filter=role_filter)

        logger.info(f"Filter applied: chat_id={chat_id}, role_filter={role_filter}")

    except Exception as e:
        logger.error(f"Error in handle_filter_apply: {e}")
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞.",
            message_type="menu"
        )


async def handle_filter_reset(chat_id: int, app: Client):
    """
    –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä (–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π).

    Args:
        chat_id: Telegram chat_id
        app: Pyrogram Client
    """
    try:
        await handle_list_users(chat_id, page=1, app=app, role_filter="all")
        logger.info(f"Filter reset: chat_id={chat_id}")
    except Exception as e:
        logger.error(f"Error in handle_filter_reset: {e}")


# ========================================
# 7. –ü–ê–ì–ò–ù–ê–¶–ò–Ø (2 —Ñ—É–Ω–∫—Ü–∏–∏)
# ========================================

async def handle_users_pagination(chat_id: int, page: int, app: Client):
    """
    –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    callback_data: "access_list_users||page||{num}"

    Args:
        chat_id: Telegram chat_id
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        app: Pyrogram Client
    """
    try:
        await handle_list_users(chat_id, page=page, app=app)
    except Exception as e:
        logger.error(f"Error in handle_users_pagination: {e}")


async def handle_invitations_pagination(chat_id: int, page: int, app: Client):
    """
    –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π.

    callback_data: "access_list_invites||page||{num}"

    Args:
        chat_id: Telegram chat_id
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        app: Pyrogram Client
    """
    try:
        await handle_list_invitations(chat_id, page=page, app=app)
    except Exception as e:
        logger.error(f"Error in handle_invitations_pagination: {e}")


# ========================================
# 8. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (4 —Ñ—É–Ω–∫—Ü–∏–∏)
# ========================================

def get_user_role_emoji(role: str) -> str:
    """
    –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (super_admin/admin/user/guest)

    Returns:
        str: –≠–º–æ–¥–∑–∏ —Ä–æ–ª–∏
    """
    role_emojis = {
        "super_admin": "üëë",
        "admin": "‚öôÔ∏è",
        "user": "üë§",
        "guest": "üé≠"
    }
    return role_emojis.get(role, "üë§")


def get_user_status_emoji(is_active: bool, is_blocked: bool) -> str:
    """
    –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        is_active: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω
        is_blocked: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω

    Returns:
        str: –≠–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
    """
    if is_blocked:
        return "üö´"
    elif is_active:
        return "‚úÖ"
    else:
        return "‚è∏"


def format_user_card(user: Any) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (User)

    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
    """
    status_emoji = get_user_status_emoji(user.is_active, user.is_blocked)
    role_emoji = get_user_role_emoji(user.role)

    return f"{status_emoji} {role_emoji} {user.username}"


async def send_temp_message(
    chat_id: int,
    app: Client,
    text: str,
    delete_after: int = NOTIFICATION_DELETE_TIME
):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º.

    Args:
        chat_id: Telegram chat_id
        app: Pyrogram Client
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        delete_after: –í—Ä–µ–º—è –¥–æ —É–¥–∞–ª–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)
    """
    try:
        await track_and_send(
            chat_id=chat_id,
            app=app,
            text=text,
            message_type="status_message"
        )

        await asyncio.sleep(delete_after)

    except Exception as e:
        logger.error(f"Error in send_temp_message: {e}")


# ========================================
# –≠–ö–°–ü–û–†–¢
# ========================================

__all__ = [
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    "handle_access_menu",

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (14)
    "handle_users_menu",
    "handle_list_users",
    "handle_user_details",
    "handle_edit_user",
    "handle_change_role",
    "handle_confirm_role_change",
    "handle_reset_password",
    "handle_confirm_reset_password",
    "handle_toggle_block_user",
    "handle_confirm_block",
    "handle_delete_user",
    "handle_confirm_delete",
    "handle_filter_users_by_role",
    "handle_search_user",
    "handle_search_user_input",

    # –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (7)
    "handle_invitations_menu",
    "handle_create_invitation",
    "handle_confirm_create_invite",
    "handle_list_invitations",
    "handle_invitation_details",
    "handle_revoke_invitation",
    "handle_confirm_revoke",

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (2)
    "handle_security_menu",
    "handle_audit_log",

    # FSM —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è (4)
    "handle_change_password_start",
    "handle_password_change_current_input",
    "handle_password_change_new_input",
    "handle_password_change_confirm_input",

    # –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã (4)
    "handle_filter_apply",
    "handle_filter_reset",

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è (2)
    "handle_users_pagination",
    "handle_invitations_pagination",

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ (4)
    "get_user_role_emoji",
    "get_user_status_emoji",
    "format_user_card",
    "send_temp_message",
]
