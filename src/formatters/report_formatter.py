"""
–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ VoxPersona
"""
from typing import Dict, List, Any
from formatters.base_formatter import BaseFormatter


class ReportFormatter(BaseFormatter):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –≤ Markdown –¥–ª—è .txt —Ñ–∞–π–ª–æ–≤"""

    def format(self, report_data: Dict[str, Any]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Markdown –æ—Ç—á–µ—Ç–∞.

        Args:
            report_data: –î–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞)

        Returns:
            Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
        """
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = report_data.get('title', '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç')
        md = f"# üìä {self.escape_markdown(title)}\n\n"

        # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        created_at = report_data.get('created_at')
        if created_at:
            timestamp = self.format_timestamp(created_at)
            md += f"**–°–æ–∑–¥–∞–Ω:** {timestamp}\n\n"

        md += f"{self.heavy_separator}\n\n"

        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if 'metrics' in report_data:
            md += "## üìà –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏\n\n"
            metrics = report_data['metrics']

            for key, value in metrics.items():
                label = key.replace('_', ' ').title()
                md += f"- **{label}:** {value}\n"

            md += f"\n{self.line_separator}\n\n"

        # –°–µ–∫—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
        if 'sections' in report_data:
            for section in report_data['sections']:
                section_title = section.get('title', '–†–∞–∑–¥–µ–ª')
                md += f"## {self.escape_markdown(section_title)}\n\n"

                content = section.get('content', '')
                md += f"{content}\n\n"

                # –ü–æ–¥—Ä–∞–∑–¥–µ–ª—ã
                if 'subsections' in section:
                    for subsection in section['subsections']:
                        sub_title = subsection.get('title', '')
                        md += f"### {self.escape_markdown(sub_title)}\n\n"

                        sub_content = subsection.get('content', '')
                        md += f"{sub_content}\n\n"

                md += f"{self.line_separator}\n\n"

        # –í—ã–≤–æ–¥—ã
        if 'conclusion' in report_data:
            md += "## üéØ –í—ã–≤–æ–¥—ã\n\n"
            md += f"{report_data['conclusion']}\n\n"

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if 'recommendations' in report_data:
            md += "## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"

            for idx, rec in enumerate(report_data['recommendations'], 1):
                md += f"{idx}. {rec}\n"

            md += "\n"

        return md

    def format_summary(self, report_data: Dict[str, Any]) -> str:
        """
        –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è Telegram.

        Args:
            report_data: –î–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞

        Returns:
            Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ
        """
        title = report_data.get('title', '–û—Ç—á–µ—Ç')
        summary = f"**üìä {self.escape_markdown(title)}**\n\n"

        # –ú–µ—Ç—Ä–∏–∫–∏ (—Ç–æ–ø-3)
        if 'metrics' in report_data:
            metrics = report_data['metrics']
            summary += "**–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**\n"

            for idx, (key, value) in enumerate(list(metrics.items())[:3], 1):
                label = key.replace('_', ' ').title()
                summary += f"{idx}. {label}: {value}\n"

            summary += "\n"

        # –ö—Ä–∞—Ç–∫–∏–µ –≤—ã–≤–æ–¥—ã
        if 'conclusion' in report_data:
            conclusion_preview = self.truncate_text(report_data['conclusion'], 150)
            summary += f"**–í—ã–≤–æ–¥—ã:** {conclusion_preview}\n\n"

        summary += "üìÑ **–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª–æ–º**"
        return summary
