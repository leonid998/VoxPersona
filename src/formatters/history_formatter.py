"""
–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ VoxPersona
"""
from typing import List, Dict, Any
from formatters.base_formatter import BaseFormatter


class HistoryFormatter(BaseFormatter):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ –≤ Markdown –¥–ª—è .txt —Ñ–∞–π–ª–æ–≤"""

    def format(self, messages: List[Dict[str, Any]], conversation: Any) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Markdown —Ñ–∞–π–ª–∞ —Å –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞.

        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î
            conversation: –û–±—ä–µ–∫—Ç Conversation —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏

        Returns:
            Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ .txt
        """
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = conversation.metadata.title if hasattr(conversation, 'metadata') else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        md = f"# üìú –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞: {self.escape_markdown(title)}\n\n"

        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if hasattr(conversation, 'metadata'):
            created_at = self.format_timestamp(conversation.metadata.created_at)
            md += f"**–°–æ–∑–¥–∞–Ω:** {created_at}\n"
            md += f"**–°–æ–æ–±—â–µ–Ω–∏–π:** {conversation.metadata.message_count}\n"

            if hasattr(conversation.metadata, 'total_tokens'):
                md += f"**–¢–æ–∫–µ–Ω–æ–≤:** {conversation.metadata.total_tokens:,}\n"

        md += f"\n{self.heavy_separator}\n\n"

        # –°–æ–æ–±—â–µ–Ω–∏—è
        for idx, msg in enumerate(messages, 1):
            timestamp = self.format_timestamp(msg.timestamp) if hasattr(msg, 'timestamp') else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å
            if hasattr(msg, 'type'):
                role = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg.type == "user_question" else "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
            else:
                role = "üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"

            # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text = msg.text if hasattr(msg, 'text') else ""

            md += f"## {idx}. {role}\n\n"
            md += f"**–í—Ä–µ–º—è:** {timestamp}\n\n"
            md += f"{text}\n\n"
            md += f"{self.line_separator}\n\n"

        return md

    def format_inline_preview(self, messages: List[Dict[str, Any]], conversation: Any,
                             preview_count: int = 5) -> str:
        """
        –ö—Ä–∞—Ç–∫–æ–µ –ø—Ä–µ–≤—å—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –ø–µ—Ä–µ–¥ —Ñ–∞–π–ª–æ–º.

        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            conversation: –û–±—ä–µ–∫—Ç Conversation
            preview_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–≤—å—é (default: 5)

        Returns:
            Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–≤—å—é
        """
        title = conversation.metadata.title if hasattr(conversation, 'metadata') else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        preview = f"**üìú –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:** {self.escape_markdown(title)}\n\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ N —Å–æ–æ–±—â–µ–Ω–∏–π
        for msg in messages[:preview_count]:
            timestamp = self.format_timestamp(msg.timestamp, "short") if hasattr(msg, 'timestamp') else ""

            if hasattr(msg, 'type'):
                role = "üë§ –í—ã" if msg.type == "user_question" else "ü§ñ –ë–æ—Ç"
            else:
                role = "üë§"

            text = msg.text if hasattr(msg, 'text') else ""
            text_preview = self.truncate_text(text, 80)

            preview += f"**{role}** ‚Ä¢ {timestamp}\n{text_preview}\n\n"

        # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(messages) > preview_count:
            remaining = len(messages) - preview_count
            preview += f"_... –∏ –µ—â–µ {remaining} —Å–æ–æ–±—â–µ–Ω–∏–π_\n\n"

        preview += "üíæ **–ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ–∞–π–ª–æ–º**"
        return preview
