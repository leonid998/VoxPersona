"""
–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π —É–º–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ utils.py

–ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –¢–µ—Å—Ç—ã –¥–ª—è —Å—Ç–∞—Ä—ã—Ö async —Ñ—É–Ω–∫—Ü–∏–π (smart_send_text, smart_send_text_sync)
—è–≤–ª—è—é—Ç—Å—è DEPRECATED —Ç–∞–∫ –∫–∞–∫ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –±—ã–ª–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ smart_send_text_unified.
–ù–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫–ª–∞—Å—Å–µ TestSmartSendTextUnified –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞.
"""

import pytest
import asyncio
from unittest.mock import Mock, AsyncMock, patch, MagicMock
from pyrogram.enums import ParseMode

from src.utils import (
    smart_send_text_unified,
    create_preview_text,
    get_username_from_chat
)

# DEPRECATED: –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã, –∏–º–ø–æ—Ä—Ç—ã –Ω–∏–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
# from src.utils import smart_send_text, smart_send_text_sync


@pytest.fixture
def mock_app():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ Pyrogram –∫–ª–∏–µ–Ω—Ç–∞."""
    app = Mock()
    app.send_message = Mock()
    app.send_document = Mock()
    app.get_chat = Mock()
    return app


@pytest.fixture
def mock_message():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    message = Mock()
    message.id = 123
    return message


class TestCreatePreviewText:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ create_preview_text."""

    def test_short_text(self):
        """–¢–µ—Å—Ç —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º."""
        text = "–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç"
        preview = create_preview_text(text, length=100)
        assert preview == text

    def test_long_text_with_space(self):
        """–¢–µ—Å—Ç —Å –¥–ª–∏–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –ø—Ä–æ–±–µ–ª—ã."""
        text = "–≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω –ø–æ –±–ª–∏–∂–∞–π—à–µ–º—É –ø—Ä–æ–±–µ–ª—É"
        preview = create_preview_text(text, length=50)
        
        assert len(preview) <= 53  # 50 + "..."
        assert preview.endswith("...")
        assert " " in preview[:-3]  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–±–µ–ª –¥–æ "..."

    def test_long_text_without_spaces(self):
        """–¢–µ—Å—Ç —Å –¥–ª–∏–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤."""
        text = "–û—á–µ–Ω—å_–¥–ª–∏–Ω–Ω—ã–π_—Ç–µ–∫—Å—Ç_–±–µ–∑_–ø—Ä–æ–±–µ–ª–æ–≤_–∫–æ—Ç–æ—Ä—ã–π_–Ω—É–∂–Ω–æ_–æ–±—Ä–µ–∑–∞—Ç—å"
        preview = create_preview_text(text, length=30)
        
        assert len(preview) == 33  # 30 + "..."
        assert preview.endswith("...")
        assert preview[:-3] == text[:30]

    def test_exactly_max_length(self):
        """–¢–µ—Å—Ç —Å —Ç–µ–∫—Å—Ç–æ–º —Ç–æ—á–Ω–æ —Ä–∞–≤–Ω—ã–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ."""
        text = "X" * 100
        preview = create_preview_text(text, length=100)
        assert preview == text


class TestGetUsernameFromChat:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ get_username_from_chat."""

    def test_get_username_with_app(self, mock_app):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è username —Å –∫–ª–∏–µ–Ω—Ç–æ–º."""
        mock_chat = Mock()
        mock_chat.username = "test_user"
        mock_app.get_chat.return_value = mock_chat
        
        username = get_username_from_chat(123456, mock_app)
        assert username == "test_user"
        mock_app.get_chat.assert_called_once_with(123456)

    def test_get_username_no_username(self, mock_app):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è username –∫–æ–≥–¥–∞ —É —á–∞—Ç–∞ –Ω–µ—Ç username."""
        mock_chat = Mock()
        mock_chat.username = None
        mock_app.get_chat.return_value = mock_chat
        
        username = get_username_from_chat(123456, mock_app)
        assert username == "user_123456"

    def test_get_username_without_app(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è username –±–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞."""
        username = get_username_from_chat(123456)
        assert username == "user_123456"

    def test_get_username_exception(self, mock_app):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ username."""
        mock_app.get_chat.side_effect = Exception("Test error")
        
        username = get_username_from_chat(123456, mock_app)
        assert username == "user_123456"


# ============================================================================
# DEPRECATED TESTS - –°—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç—ã —É–¥–∞–ª–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –±—ã–ª–∏ –∑–∞–º–µ–Ω–µ–Ω—ã
# ============================================================================
# class TestSmartSendText - –£–î–ê–õ–ï–ù–û (smart_send_text —É–¥–∞–ª–µ–Ω–∞)
# class TestSmartSendTextSync - –£–î–ê–õ–ï–ù–û (smart_send_text_sync —É–¥–∞–ª–µ–Ω–∞)
# class TestIntegration - –£–î–ê–õ–ï–ù–û (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
# ============================================================================


class TestSmartSendTextUnified:
    """–¢–µ—Å—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π unified —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ smart_send_text_unified."""

    def test_send_short_message(self, mock_app, mock_message):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ unified —Ñ—É–Ω–∫—Ü–∏—é."""
        text = "–ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        chat_id = 123456
        username = "test_user"

        mock_app.send_message.return_value = mock_message

        with patch('src.utils.TELEGRAM_MESSAGE_THRESHOLD', 1200), \
             patch('src.utils._save_to_history_sync') as mock_save:

            result = smart_send_text_unified(
                text=text,
                chat_id=chat_id,
                app=mock_app,
                username=username,
                question="–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å",
                search_type="fast",
                parse_mode=ParseMode.MARKDOWN
            )

        assert result is True
        mock_app.send_message.assert_called_once_with(
            chat_id, text, parse_mode=ParseMode.MARKDOWN
        )
        mock_save.assert_called_once()

    def test_send_long_message_as_file(self, mock_app, mock_message):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ MD —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ unified —Ñ—É–Ω–∫—Ü–∏—é."""
        text = "X" * 1500  # –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        chat_id = 123456
        username = "test_user"
        question = "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"

        mock_app.send_message.return_value = mock_message
        mock_app.send_document.return_value = mock_message

        with patch('src.utils.TELEGRAM_MESSAGE_THRESHOLD', 1200), \
             patch('src.utils.md_storage_manager') as mock_storage, \
             patch('src.utils._save_to_history_sync') as mock_save:

            mock_storage.save_md_report.return_value = "/path/to/report.md"

            result = smart_send_text_unified(
                text=text,
                chat_id=chat_id,
                app=mock_app,
                username=username,
                question=question,
                search_type="deep"
            )

        assert result is True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–≤—å—é
        preview_calls = [call for call in mock_app.send_message.call_args_list
                        if len(call[0]) > 1 and "üìÑ **–í–∞—à –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!**" in call[0][1]]
        assert len(preview_calls) == 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω MD —Ñ–∞–π–ª
        mock_storage.save_md_report.assert_called_once_with(
            content=text,
            user_id=chat_id,
            username=username,
            question=question,
            search_type="deep"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç
        mock_app.send_document.assert_called_once()

    def test_auto_username_detection(self, mock_app, mock_message):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è username –≤ unified —Ñ—É–Ω–∫—Ü–∏–∏."""
        text = "–¢–µ—Å—Ç"
        chat_id = 123456

        mock_app.send_message.return_value = mock_message

        with patch('src.utils.get_username_from_chat') as mock_get_username, \
             patch('src.utils._save_to_history_sync'):

            mock_get_username.return_value = "auto_user"

            smart_send_text_unified(
                text=text,
                chat_id=chat_id,
                app=mock_app,
                username=None,  # –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º username
                question="–¢–µ—Å—Ç",
                search_type="fast"
            )

        mock_get_username.assert_called_once_with(chat_id, mock_app)