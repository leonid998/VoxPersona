"""
–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è chat_history.py
"""

import pytest
import tempfile
import shutil
from datetime import date, datetime
from pathlib import Path

from src.chat_history import ChatHistoryManager, Message, DayStats, DayHistory


@pytest.fixture
def temp_history_dir():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    temp_dir = tempfile.mkdtemp()
    yield temp_dir
    shutil.rmtree(temp_dir)


@pytest.fixture
def history_manager(temp_history_dir, monkeypatch):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π."""
    monkeypatch.setattr('src.chat_history.CHAT_HISTORY_DIR', temp_history_dir)
    return ChatHistoryManager()


class TestChatHistoryManager:
    """–¢–µ—Å—Ç—ã –¥–ª—è ChatHistoryManager."""

    def test_ensure_history_directory(self, history_manager):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏."""
        assert history_manager.history_dir.exists()

    def test_ensure_user_directory(self, history_manager):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_id = 123456
        user_dir = history_manager.ensure_user_directory(user_id)
        
        assert user_dir.exists()
        assert user_dir.name == f"user_{user_id}"

    def test_get_filename_methods(self, history_manager):
        """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤."""
        today_filename = history_manager.get_today_filename()
        assert today_filename.endswith('.json')
        assert date.today().isoformat() in today_filename
        
        test_date = date(2025, 1, 15)
        date_filename = history_manager.get_date_filename(test_date)
        assert date_filename == "2025-01-15.json"

    def test_save_and_load_day_history(self, history_manager):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–Ω—è."""
        user_id = 123456
        username = "test_user"
        test_date = date(2025, 1, 15)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é
        messages = [
            Message(
                timestamp=datetime.now().isoformat(),
                message_id=1,
                type="user_question",
                text="–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å",
                tokens=10
            ),
            Message(
                timestamp=datetime.now().isoformat(),
                message_id=2,
                type="bot_answer",
                text="–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç",
                tokens=20,
                sent_as="message",
                search_type="fast"
            )
        ]
        
        stats = DayStats(
            total_questions=1,
            total_answers=1,
            fast_searches=1,
            deep_searches=0,
            total_tokens=30,
            files_sent=0
        )
        
        day_history = DayHistory(
            user_id=user_id,
            username=username,
            date=test_date.isoformat(),
            messages=messages,
            stats=stats
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        success = history_manager.save_day_history(day_history)
        assert success
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º
        loaded_history = history_manager.load_day_history(user_id, test_date)
        assert loaded_history is not None
        assert loaded_history.user_id == user_id
        assert loaded_history.username == username
        assert len(loaded_history.messages) == 2
        assert loaded_history.stats.total_questions == 1
        assert loaded_history.stats.total_answers == 1

    def test_save_message_to_history(self, history_manager):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é."""
        user_id = 123456
        username = "test_user"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = history_manager.save_message_to_history(
            user_id=user_id,
            username=username,
            message_id=1,
            message_type="user_question",
            text="–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"
        )
        assert success
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        success = history_manager.save_message_to_history(
            user_id=user_id,
            username=username,
            message_id=2,
            message_type="bot_answer",
            text="–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç",
            sent_as="file",
            file_path="/path/to/file.md",
            search_type="deep"
        )
        assert success
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å
        today = date.today()
        day_history = history_manager.load_day_history(user_id, today)
        assert day_history is not None
        assert len(day_history.messages) == 2
        assert day_history.stats.total_questions == 1
        assert day_history.stats.total_answers == 1
        assert day_history.stats.deep_searches == 1
        assert day_history.stats.files_sent == 1

    def test_get_user_stats(self, history_manager):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_id = 123456
        username = "test_user"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        for i in range(3):
            history_manager.save_message_to_history(
                user_id=user_id,
                username=username,
                message_id=i * 2 + 1,
                message_type="user_question",
                text=f"–í–æ–ø—Ä–æ—Å {i}"
            )
            
            history_manager.save_message_to_history(
                user_id=user_id,
                username=username,
                message_id=i * 2 + 2,
                message_type="bot_answer",
                text=f"–û—Ç–≤–µ—Ç {i}",
                sent_as="message" if i % 2 == 0 else "file",
                search_type="fast" if i % 2 == 0 else "deep"
            )
        
        stats = history_manager.get_user_stats(user_id)
        assert stats["total_questions"] == 3
        assert stats["total_answers"] == 3
        assert stats["fast_searches"] == 2
        assert stats["deep_searches"] == 1
        assert stats["files_sent"] == 1
        assert stats["days_active"] == 1

    def test_format_day_history_for_display(self, history_manager):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        user_id = 123456
        username = "test_user"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        history_manager.save_message_to_history(
            user_id=user_id,
            username=username,
            message_id=1,
            message_type="user_question",
            text="–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_text = history_manager.format_day_history_for_display(user_id)
        
        assert "üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞" in display_text
        assert "ü§î –í–æ–ø—Ä–æ—Å—ã: 1" in display_text
        assert "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å" in display_text

    def test_format_user_stats_for_display(self, history_manager):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        user_id = 123456
        username = "test_user"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        history_manager.save_message_to_history(
            user_id=user_id,
            username=username,
            message_id=1,
            message_type="user_question",
            text="–í–æ–ø—Ä–æ—Å"
        )
        
        history_manager.save_message_to_history(
            user_id=user_id,
            username=username,
            message_id=2,
            message_type="bot_answer",
            text="–û—Ç–≤–µ—Ç",
            sent_as="message",
            search_type="fast"
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_text = history_manager.format_user_stats_for_display(user_id)
        
        assert "üìà **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" in display_text
        assert "üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: 1" in display_text
        assert "ü§î –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: 1" in display_text
        assert "ü§ñ –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: 1" in display_text

    def test_empty_history(self, history_manager):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏."""
        user_id = 999999
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏—Å—Ç–æ—Ä–∏—é
        day_history = history_manager.load_day_history(user_id)
        assert day_history is None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏
        stats = history_manager.get_user_stats(user_id)
        assert stats["total_questions"] == 0
        assert stats["total_answers"] == 0
        assert stats["days_active"] == 0
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏
        display_text = history_manager.format_day_history_for_display(user_id)
        assert "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å" in display_text


class TestMessage:
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–∏ Message."""

    def test_message_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è."""
        message = Message(
            timestamp="2025-01-15T10:30:00",
            message_id=123,
            type="user_question",
            text="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            tokens=15,
            sent_as="message",
            file_path=None,
            search_type="fast"
        )
        
        assert message.timestamp == "2025-01-15T10:30:00"
        assert message.message_id == 123
        assert message.type == "user_question"
        assert message.text == "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        assert message.tokens == 15
        assert message.sent_as == "message"
        assert message.file_path is None
        assert message.search_type == "fast"


class TestDayStats:
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–∏ DayStats."""

    def test_day_stats_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–Ω—è."""
        stats = DayStats(
            total_questions=5,
            total_answers=5,
            fast_searches=3,
            deep_searches=2,
            total_tokens=1000,
            files_sent=2
        )
        
        assert stats.total_questions == 5
        assert stats.total_answers == 5
        assert stats.fast_searches == 3
        assert stats.deep_searches == 2
        assert stats.total_tokens == 1000
        assert stats.files_sent == 2

    def test_day_stats_defaults(self):
        """–¢–µ—Å—Ç –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        stats = DayStats()
        
        assert stats.total_questions == 0
        assert stats.total_answers == 0
        assert stats.fast_searches == 0
        assert stats.deep_searches == 0
        assert stats.total_tokens == 0
        assert stats.files_sent == 0