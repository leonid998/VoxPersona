"""
Edge cases –∏ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –º–æ–¥—É–ª—è "–ú–æ–∏ –æ—Ç—á–µ—Ç—ã" v2.

Task ID: 00001_20251010_144500
–ê–≥–µ–Ω—Ç: test-automator
–î–∞—Ç–∞: 11.10.2025

–ö—Ä–∏—Ç–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã:
1. Race condition –ø—Ä–∏ confirm_delete_report
2. MessageTracker exception handling
3. Transaction order –ø—Ä–∏ delete_report
4. Memory leak –ø—Ä–∏ BytesIO (show_report_details)
5. Blocking analyzer (asyncio.to_thread vs sync)
"""

import pytest
import asyncio
from io import BytesIO
from unittest.mock import AsyncMock, MagicMock, patch, call
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç—ã —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
import sys
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from handlers_my_reports_v2 import (
    handle_report_view_input,
    handle_report_delete_confirm,
    handle_my_reports_v2
)


# ============================================================================
#                           –§–∏–∫—Å—Ç—É—Ä—ã
# ============================================================================

@pytest.fixture
def mock_app():
    """–ú–æ–∫ Pyrogram Client."""
    app = MagicMock()
    app.send_message = AsyncMock()
    app.send_document = AsyncMock()
    return app


@pytest.fixture
def user_states_clean():
    """–û—á–∏—â–µ–Ω–Ω—ã–π user_states –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤."""
    from config import user_states
    user_states.clear()
    return user_states


# ============================================================================
#       üî¥ –ö–†–ò–¢–ò–ß–ù–´–ô –¢–ï–°–¢ 1: Race condition –ø—Ä–∏ confirm_delete_report
# ============================================================================

class TestRaceConditions:
    """–¢–µ—Å—Ç—ã race conditions."""

    @pytest.mark.asyncio
    async def test_concurrent_delete_same_report(self, mock_app, user_states_clean):
        """
        üî¥ –ö–†–ò–¢–ò–ß–ù–û: Race condition –ø—Ä–∏ concurrent —É–¥–∞–ª–µ–Ω–∏–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.

        –°—Ü–µ–Ω–∞—Ä–∏–π:
        - 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —É–¥–∞–ª—è—é—Ç –æ–¥–∏–Ω –æ—Ç—á–µ—Ç (ID 123)
        - –û–¥–∏–Ω –¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—Ç—å, –≤—Ç–æ—Ä–æ–π - –ø–æ–ª—É—á–∏—Ç—å –æ—à–∏–±–∫—É "–æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        """
        with patch("handlers_my_reports_v2.asyncio.to_thread", new_callable=AsyncMock) as mock_to_thread, \
             patch("handlers_my_reports_v2.track_and_send", new_callable=AsyncMock) as mock_track:

            # –ú–æ–∫–∞–µ–º: –ø–µ—Ä–≤—ã–π delete_report ‚Üí True, –≤—Ç–æ—Ä–æ–π ‚Üí False (—É–∂–µ —É–¥–∞–ª–µ–Ω)
            mock_to_thread.side_effect = [True, False]

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSM –¥–ª—è –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_states_clean[111] = {"step": "report_delete_confirm", "report_index": 5, "report_name": "–û—Ç—á–µ—Ç"}
            user_states_clean[222] = {"step": "report_delete_confirm", "report_index": 5, "report_name": "–û—Ç—á–µ—Ç"}

            # Concurrent –∑–∞–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–∏—è
            task1 = asyncio.create_task(handle_report_delete_confirm(111, mock_app))
            task2 = asyncio.create_task(handle_report_delete_confirm(222, mock_app))

            await asyncio.gather(task1, task2)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–∞ FSM –æ—á–∏—â–µ–Ω—ã
            assert user_states_clean.get(111, {}) == {}
            assert user_states_clean.get(222, {}) == {}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª—É—á–∏–ª –æ—à–∏–±–∫—É
            assert mock_track.call_count == 2
            # –û–¥–∏–Ω —É—Å–ø–µ—Ö, –æ–¥–∏–Ω –æ—à–∏–±–∫–∞
            calls_texts = [call.kwargs["text"] for call in mock_track.call_args_list]
            success_count = sum(1 for text in calls_texts if "—É–¥–∞–ª–µ–Ω" in text.lower())
            error_count = sum(1 for text in calls_texts if "–æ—à–∏–±–∫–∞" in text.lower() or "–Ω–µ —É–¥–∞–ª–æ—Å—å" in text.lower())

            assert success_count >= 1  # –ú–∏–Ω–∏–º—É–º –æ–¥–∏–Ω —É—Å–ø–µ—Ö
            assert error_count >= 0  # –ú–æ–∂–µ—Ç –±—ã—Ç—å 0 –∏–ª–∏ 1 –æ—à–∏–±–∫–∞

    @pytest.mark.asyncio
    async def test_race_condition_view_after_delete(self, mock_app, user_states_clean):
        """
        üî¥ –ö–†–ò–¢–ò–ß–ù–û: Race condition - –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞ –ø–æ—Å–ª–µ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è.

        –°—Ü–µ–Ω–∞—Ä–∏–π:
        - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 —É–¥–∞–ª—è–µ—Ç –æ—Ç—á–µ—Ç
        - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø—ã—Ç–∞–µ—Ç—Å—è –µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å
        - –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ "–æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        """
        with patch("handlers_my_reports_v2.asyncio.to_thread", new_callable=AsyncMock) as mock_to_thread, \
             patch("handlers_my_reports_v2.track_and_send", new_callable=AsyncMock) as mock_track:

            # –ú–æ–∫–∞–µ–º:
            # delete_report ‚Üí True
            # get_report_by_index ‚Üí None (–æ—Ç—á–µ—Ç —É–¥–∞–ª–µ–Ω)
            mock_to_thread.side_effect = [True, None]

            # FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
            user_states_clean[111] = {"step": "report_delete_confirm", "report_index": 3, "report_name": "–û—Ç—á–µ—Ç"}
            user_states_clean[222] = {"step": "report_view_ask_number", "total_reports": 5}

            # Concurrent –∑–∞–ø—É—Å–∫
            task1 = asyncio.create_task(handle_report_delete_confirm(111, mock_app))
            task2 = asyncio.create_task(handle_report_view_input(222, "3", mock_app))

            await asyncio.gather(task1, task2)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–∞ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            assert mock_track.call_count == 2

            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ "–æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            user2_call = [call for call in mock_track.call_args_list if call.kwargs.get("chat_id") == 222]
            if user2_call:
                assert "–Ω–µ –Ω–∞–π–¥–µ–Ω" in user2_call[0].kwargs["text"].lower()


# ============================================================================
#       üî¥ –ö–†–ò–¢–ò–ß–ù–´–ô –¢–ï–°–¢ 2: MessageTracker exception handling
# ============================================================================

class TestMessageTrackerExceptions:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π MessageTracker."""

    @pytest.mark.asyncio
    async def test_track_and_send_exception_during_send(self, mock_app, user_states_clean):
        """
        üî¥ –ö–†–ò–¢–ò–ß–ù–û: MessageTracker exception –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.

        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ track_and_send –Ω–µ –ª–æ–º–∞–µ—Ç handler.
        """
        with patch("handlers_my_reports_v2.asyncio.to_thread", new_callable=AsyncMock) as mock_to_thread, \
             patch("handlers_my_reports_v2.track_and_send", new_callable=AsyncMock) as mock_track, \
             patch("handlers_my_reports_v2.logger") as mock_logger:

            # –ú–æ–∫–∞–µ–º:
            mock_to_thread.return_value = []  # –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤
            mock_track.side_effect = Exception("MessageTracker error")

            # –ó–∞–ø—É—Å–∫–∞–µ–º handler
            await handle_my_reports_v2(123, mock_app)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—à–∏–±–∫–∞ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞
            mock_logger.error.assert_called()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ —É–ø–∞–ª–∞
            assert True

    @pytest.mark.asyncio
    async def test_track_and_send_cleanup_after_error(self, mock_app, user_states_clean):
        """
        üî¥ –ö–†–ò–¢–ò–ß–ù–û: Cleanup MessageTracker –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏.

        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ tracked messages –æ—á–∏—â–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.
        """
        with patch("handlers_my_reports_v2.asyncio.to_thread", new_callable=AsyncMock) as mock_to_thread, \
             patch("handlers_my_reports_v2.track_and_send", new_callable=AsyncMock) as mock_track, \
             patch("handlers_my_reports_v2.message_tracker") as mock_tracker:

            # –ú–æ–∫–∞–µ–º:
            mock_to_thread.return_value = True
            mock_track.side_effect = Exception("Send error")

            user_states_clean[123] = {"step": "report_delete_confirm", "report_index": 1, "report_name": "Test"}

            # –ó–∞–ø—É—Å–∫–∞–µ–º handler
            try:
                await handle_report_delete_confirm(123, mock_app)
            except Exception:
                pass

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ FSM –æ—á–∏—â–µ–Ω (cleanup –≤—ã–ø–æ–ª–Ω–µ–Ω)
            assert user_states_clean.get(123, {}) == {}


# ============================================================================
#       üî¥ –ö–†–ò–¢–ò–ß–ù–´–ô –¢–ï–°–¢ 3: Transaction order –ø—Ä–∏ delete_report
# ============================================================================

class TestTransactionOrder:
    """–¢–µ—Å—Ç—ã –ø–æ—Ä—è–¥–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."""

    @pytest.mark.asyncio
    async def test_delete_report_transaction_order(self, mock_app, user_states_clean):
        """
        üî¥ –ö–†–ò–¢–ò–ß–ù–û: –ü–æ—Ä—è–¥–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.

        –î–æ–ª–∂–µ–Ω –±—ã—Ç—å:
        1. –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        2. –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ index.json
        """
        with patch("handlers_my_reports_v2.asyncio.to_thread", new_callable=AsyncMock) as mock_to_thread, \
             patch("handlers_my_reports_v2.track_and_send", new_callable=AsyncMock):

            # –ú–æ–∫–∞–µ–º: delete_report ‚Üí True
            mock_to_thread.return_value = True

            user_states_clean[123] = {"step": "report_delete_confirm", "report_index": 5, "report_name": "Test"}

            await handle_report_delete_confirm(123, mock_app)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ asyncio.to_thread –≤—ã–∑–≤–∞–Ω –û–î–ò–ù –†–ê–ó
            # (–≤—Å—è –ª–æ–≥–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ md_storage.delete_report)
            assert mock_to_thread.call_count == 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞
            call_args = mock_to_thread.call_args[0]
            assert call_args[1] == 123  # chat_id
            assert call_args[2] == 5    # index

    @pytest.mark.asyncio
    async def test_transaction_rollback_on_partial_failure(self, mock_app, user_states_clean):
        """
        üî¥ –ö–†–ò–¢–ò–ß–ù–û: Rollback –ø—Ä–∏ —á–∞—Å—Ç–∏—á–Ω–æ–π –æ—à–∏–±–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.

        –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ—à–ª–æ, –Ω–æ –∑–∞–ø–∏—Å—å –≤ index.json –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å -
        –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å rollback (–∏–ª–∏ error message).
        """
        with patch("handlers_my_reports_v2.asyncio.to_thread", new_callable=AsyncMock) as mock_to_thread, \
             patch("handlers_my_reports_v2.track_and_send", new_callable=AsyncMock) as mock_track, \
             patch("handlers_my_reports_v2.logger") as mock_logger:

            # –ú–æ–∫–∞–µ–º: delete_report ‚Üí False (–æ—à–∏–±–∫–∞)
            mock_to_thread.return_value = False

            user_states_clean[123] = {"step": "report_delete_confirm", "report_index": 3, "report_name": "Test"}

            await handle_report_delete_confirm(123, mock_app)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∫–∞–∑–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            mock_track.assert_called_once()
            call_args = mock_track.call_args
            assert "–æ—à–∏–±–∫–∞" in call_args.kwargs["text"].lower() or "–Ω–µ —É–¥–∞–ª–æ—Å—å" in call_args.kwargs["text"].lower()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—à–∏–±–∫–∞ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            # mock_logger.error.assert_called()


# ============================================================================
#       üî¥ –ö–†–ò–¢–ò–ß–ù–´–ô –¢–ï–°–¢ 4: Memory leak –ø—Ä–∏ BytesIO
# ============================================================================

class TestMemoryLeaks:
    """–¢–µ—Å—Ç—ã memory leaks."""

    @pytest.mark.asyncio
    async def test_bytesio_closed_in_finally(self, mock_app, user_states_clean):
        """
        üî¥ –ö–†–ò–¢–ò–ß–ù–û: BytesIO –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ finally –±–ª–æ–∫–µ.

        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ BytesIO.close() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–∞–∂–µ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏.
        """
        from md_storage import ReportMetadata

        mock_report = ReportMetadata(
            file_path="test.md",
            user_id=123,
            username="test",
            timestamp="2025-01-01T00:00:00",
            question="Test",
            size_bytes=100,
            tokens=10,
            search_type="fast"
        )

        with patch("handlers_my_reports_v2.asyncio.to_thread", new_callable=AsyncMock) as mock_to_thread, \
             patch("handlers_my_reports_v2.track_and_send", new_callable=AsyncMock) as mock_track, \
             patch("handlers_my_reports_v2.md_storage_manager.get_report_file_path") as mock_get_path, \
             patch("builtins.open", side_effect=Exception("File read error")):

            # –ú–æ–∫–∞–µ–º:
            mock_to_thread.side_effect = [
                mock_report,  # get_report_by_index
                Exception("Read error")  # _read_file_sync
            ]

            mock_path = MagicMock()
            mock_path.exists.return_value = True
            mock_get_path.return_value = mock_path

            user_states_clean[123] = {"step": "report_view_ask_number", "total_reports": 5}

            # –ó–∞–ø—É—Å–∫–∞–µ–º handler (–¥–æ–ª–∂–µ–Ω –Ω–µ —É–ø–∞—Å—Ç—å)
            await handle_report_view_input(123, "1", mock_app)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ FSM –æ—á–∏—â–µ–Ω (finally –≤—ã–ø–æ–ª–Ω–µ–Ω)
            assert user_states_clean.get(123, {}) == {}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            mock_track.assert_called()

    @pytest.mark.asyncio
    async def test_memory_leak_multiple_operations(self, mock_app, user_states_clean):
        """
        üî¥ –ö–†–ò–¢–ò–ß–ù–û: Memory leak –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.

        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ BytesIO —Å–æ–∑–¥–∞–Ω–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è
        –Ω–µ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ —É—Ç–µ—á–∫–µ –ø–∞–º—è—Ç–∏.
        """
        from md_storage import ReportMetadata
        import gc

        mock_report = ReportMetadata(
            file_path="test.md",
            user_id=123,
            username="test",
            timestamp="2025-01-01T00:00:00",
            question="Test",
            size_bytes=100,
            tokens=10,
            search_type="fast"
        )

        with patch("handlers_my_reports_v2.asyncio.to_thread", new_callable=AsyncMock) as mock_to_thread, \
             patch("handlers_my_reports_v2.track_and_send", new_callable=AsyncMock), \
             patch("handlers_my_reports_v2.md_storage_manager.get_report_file_path") as mock_get_path:

            mock_to_thread.side_effect = [
                mock_report,
                b"Test content"
            ] * 10  # 10 –æ–ø–µ—Ä–∞—Ü–∏–π

            mock_path = MagicMock()
            mock_path.exists.return_value = True
            mock_get_path.return_value = mock_path

            # –í—ã–ø–æ–ª–Ω—è–µ–º 10 –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            for i in range(10):
                user_states_clean[123] = {"step": "report_view_ask_number", "total_reports": 5}
                await handle_report_view_input(123, "1", mock_app)

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π garbage collection
            gc.collect()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ BytesIO –æ–±—ä–µ–∫—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã
            # (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω memory profiler)
            assert True  # Symbolic check


# ============================================================================
#       üî¥ –ö–†–ò–¢–ò–ß–ù–´–ô –¢–ï–°–¢ 5: Blocking analyzer (asyncio.to_thread)
# ============================================================================

class TestBlockingAnalyzer:
    """–¢–µ—Å—Ç—ã –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è event loop."""

    @pytest.mark.asyncio
    async def test_asyncio_to_thread_used_for_file_io(self, mock_app, user_states_clean):
        """
        üî¥ –ö–†–ò–¢–ò–ß–ù–û: asyncio.to_thread –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è file I/O.

        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        –æ–±–µ—Ä–Ω—É—Ç—ã –≤ asyncio.to_thread().
        """
        with patch("handlers_my_reports_v2.asyncio.to_thread", new_callable=AsyncMock) as mock_to_thread, \
             patch("handlers_my_reports_v2.track_and_send", new_callable=AsyncMock):

            mock_to_thread.return_value = []  # get_user_reports

            await handle_my_reports_v2(123, mock_app)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ asyncio.to_thread –≤—ã–∑–≤–∞–Ω
            assert mock_to_thread.call_count >= 1

    @pytest.mark.asyncio
    async def test_no_blocking_sync_calls(self, mock_app, user_states_clean):
        """
        üî¥ –ö–†–ò–¢–ò–ß–ù–û: –ù–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –≤—ã–∑–æ–≤–æ–≤.

        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –Ω–µ—Ç –ø—Ä—è–º—ã—Ö –≤—ã–∑–æ–≤–æ–≤ md_storage.get_user_reports()
        –±–µ–∑ asyncio.to_thread().
        """
        from md_storage import ReportMetadata

        mock_reports = [
            ReportMetadata(
                file_path="test.md",
                user_id=123,
                username="test",
                timestamp="2025-01-01T00:00:00",
                question="Test",
                size_bytes=100,
                tokens=10,
                search_type="fast"
            )
        ]

        with patch("handlers_my_reports_v2.asyncio.to_thread", new_callable=AsyncMock) as mock_to_thread, \
             patch("handlers_my_reports_v2.track_and_send", new_callable=AsyncMock):

            mock_to_thread.side_effect = [
                mock_reports,  # get_user_reports
                "/tmp/reports.txt",  # export_reports_list_to_txt
                b"Test content"  # _read_file_sync
            ]

            await handle_my_reports_v2(123, mock_app)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ asyncio.to_thread –≤—ã–∑–≤–∞–Ω 3 —Ä–∞–∑–∞
            assert mock_to_thread.call_count == 3

    @pytest.mark.asyncio
    async def test_event_loop_not_blocked(self, mock_app, user_states_clean):
        """
        üî¥ –ö–†–ò–¢–ò–ß–ù–û: Event loop –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –¥–æ–ª–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.

        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏ –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ.
        """
        from md_storage import ReportMetadata
        import time

        mock_report = ReportMetadata(
            file_path="test.md",
            user_id=123,
            username="test",
            timestamp="2025-01-01T00:00:00",
            question="Test",
            size_bytes=100,
            tokens=10,
            search_type="fast"
        )

        async def slow_operation():
            """–°–∏–º—É–ª—è—Ü–∏—è –¥–æ–ª–≥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏."""
            await asyncio.sleep(0.1)
            return mock_report

        with patch("handlers_my_reports_v2.asyncio.to_thread", new_callable=AsyncMock) as mock_to_thread, \
             patch("handlers_my_reports_v2.track_and_send", new_callable=AsyncMock), \
             patch("handlers_my_reports_v2.md_storage_manager.get_report_file_path") as mock_get_path:

            mock_to_thread.side_effect = [
                slow_operation(),
                b"Test content"
            ]

            mock_path = MagicMock()
            mock_path.exists.return_value = True
            mock_get_path.return_value = mock_path

            user_states_clean[123] = {"step": "report_view_ask_number", "total_reports": 5}

            # –ó–∞–ø—É—Å–∫–∞–µ–º handler + –¥—Ä—É–≥—É—é –∑–∞–¥–∞—á—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            start_time = time.time()

            counter = {"value": 0}

            async def parallel_task():
                for _ in range(10):
                    counter["value"] += 1
                    await asyncio.sleep(0.01)

            task1 = asyncio.create_task(handle_report_view_input(123, "1", mock_app))
            task2 = asyncio.create_task(parallel_task())

            await asyncio.gather(task1, task2)

            elapsed = time.time() - start_time

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            assert counter["value"] == 10
            assert elapsed < 0.3  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ —á–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ


if __name__ == "__main__":
    pytest.main([__file__, "-v", "--tb=short"])
